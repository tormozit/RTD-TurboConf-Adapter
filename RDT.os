//@script_version 45
//@script_appid 8552
//@script_name ИРАдаптер
//@script_display_name ИРАдаптер
//@script_description Адаптер для подсистемы "Инструменты разработчика Tormozit"
//@script_author Tormozit
//@script_developer_url http://devtool1c.ucoz.ru/
//@script_url https://fastcode.im/Store/8552
//@script_section Редактирование
//@turbomenuitem ИР адаптер
//script_hotkey None             АвтодополнениеМодальное Автодополнение модальное
//@script_hotkey None            АнализЗамера Анализ замера
//@script_hotkey Control+OemPlus ВернутьсяИзПерехода Вернуться из перехода в модуле
//@script_hotkey Control+M       ВыделитьМетод Выделить метод
//@script_hotkey Shift+Alt+F9    ВычислитьВыражение Вычислить выражение
//@script_hotkey None            ВычислитьОписатьПараметрыМетода Вычислить описать параметры метода
//@script_hotkey Control+Shift+Q ЗакрытьПриложениеИР Закрыть приложение ИР
//@script_hotkey Control+Alt+C   ЗапомнитьДляСравнения Запомнить для сравнения
//@script_hotkey None            ЗапуститьТолстыйКлиент Запустить толстый клиент
//@script_hotkey Control+F11     КопироватьСсылку Копировать ссылку
//@script_hotkey None            НайтиПоследнееИзменениеМетода Найти последнее изменение метода
//@script_hotkey Control+Alt+F12 НайтиВМодулях Найти в модулях
//@script_hotkey None            ОбновитьКэшМодулей Обновить кэш модулей
//@script_hotkey Alt+Q           ОткрытьОбъектМетаданных Открыть объект метаданных
//@script_hotkey None            ОткрытьСписок Открыть список в ИР
//@script_hotkey Control+Shift+D ОтладитьОбъект Отладить объект
//@script_hotkey Control+B       ПерейтиВНачалоБлока Перейти в начало блока
//@script_hotkey Control+F12     ПерейтиКОпределению Перейти к определению
//@script_hotkey None            ПереименоватьСлово Переименовать слово
//@script_hotkey None            ПодпискиНаСобытия Подписки на события
//@script_hotkey Alt+F3          ПоказатьПараметрыМетода Показать параметры метода
//@script_hotkey Alt+F7          ПроверитьМодуль Проверить модуль
//@script_hotkey None            РедактироватьКомпоновку Редактировать компоновку
//@script_hotkey Control+Shift+E РедактироватьТекст Редактировать текст
//@script_hotkey None            СброситьНастройкиИРБазы Сбросить настройки ИР базы
//@script_hotkey Alt+F1          СинтаксПомощник Синтакс-помощник по слову
//@script_hotkey None            СписокМетодовМодуля Список методов модуля
//@script_hotkey None            СписокОбщихМетодов Список общих методов
//@script_hotkey None            СохранитьМодульВФайл Сохранить модуль в файл
//@script_hotkey Control+Alt+F9  ТочкаОстанова Точка останова
//@script_hotkey None            ТочкиОстановаИзРезультатовПоиска Точки останова из результатов поиска
//@script_hotkey Alt+Shift+F     ФорматироватьТекст Форматировать текст
//@retain_clipboard 0
//@enterprise_mode 0
//@hide_actions 0
//@min_api_version 5
//@turbomenu 1 // Отображать команды скрипта в подменю "Скрипты" основного меню ТурбоКонфа
//@AccessIBInfo 1 // ТурбоКонф сам подготовит параметры базы заранее, а не в момент выполнения скрипта
//@RequestDocInfo 0 // ТурбоКонф сам подготовит параметры документа перед каждым вызовом скрипта
//@subscribe МодифицированныеДокументы // ТурбоКонф будет копить измененные документы, которые можно получать методом ПолучитьМодифицированныеДокументы()
//#Дублировать в файл C:\Portable\TurboConf\user_scripts\RDT.os

// Настройки
Перем ПапкаПортативногоИР;
Перем АвтоМаксимизацияОконМодулей; 

Перем ТурбоКонф;
Перем МинимальнаяВерсияИР;
Перем МинимальнаяВерсияТурбоКонф;
Перем ВерсияАдаптера;
Перем ЗаголовокОкна;
Перем ЗаголовокКонфигуратора;
Перем ВыделенныйТекст;
Перем ПозицияВТексте; 
Перем НомерСтроки;
Перем НомерКолонки;
Перем ТекстМодуля;
Перем ЯзыкПрограммы;
Перем ТипЭлементаИнтерфейса;
Перем ЗаголовокПриложенияИР;

// Контекст скрипта Турбоконф. Раскомментировать - для синтаксической проверки в VisualStudioCode. Закомментировать - для исполнения.
// Перем Конфигуратор;
// Перем РежимОткрытияВнешнегоОкна;
// Перем Клавиши;
// Перем ТипЭлемента;
// Перем РежимДиалогаВопрос;
// Перем КодВозвратаДиалога;

Функция НазваниеСкрипта()
	Возврат "ИР адаптер " + ВерсияАдаптера;
КонецФункции

Функция НазваниеПриложения()
	Возврат "ИР";
КонецФункции

Функция НазваниеПодсистемы()
	Возврат "Инструменты разработчика Tormozit";
КонецФункции

// Просил добавить в API https://turboconf.ru/Tasks/9025
// Сохраним историю границ выделения таким замороченным способом.
// Полезно вызывать перед вставкой области, которая содержит выделенную пользователем область.
Процедура СохранитьГраницыВыделенияДляОтмены()
	
	ВыделенныйТекст = ""; 
	Пустышка = 0;
	Начало = 0;
	Конец = 0;
	//ТурбоКонф.ПолучитьТекстДокумента(ВыделенныйТекст, Пустышка, Начало, Конец);
	//ТурбоКонф.ВставитьТекст(ВыделенныйТекст + " ");
	//ТурбоКонф.Клавиша(Клавиши.Back);
	////ТурбоКонф.ВыделитьТекст(Начало, Конец); // Почему то вызывает прокрутку окна чтобы выделенный диапазон стал в самый низ https://turboconf.ru/Tasks/8888
	ТурбоКонф.КонтролКлавиша(Клавиши.C);
	ТурбоКонф.КонтролКлавиша(Клавиши.V); // Опасно! Если выделенный текст пустой, то вставится текущее содержимое буфера обмена
	
	// Ждем завершения операции конфигуратора с буфером обмена
	
	// Способ 1
	ТурбоКонф.Ждать(200);   
	
	// Способ 2
	// Глючит https://turboconf.ru/Tasks/9302
	//ТурбоКонф.КонтролКлавиша(Клавиши.F);
	//ТурбоКонф.ОткрытьЗакрытьОкно("Поиск", 2000);
	
КонецПроцедуры

Процедура ОповеститьПользователяОПриостановке()
	ТурбоКонф.ПоказатьУведомление("Работа TurboConf ПРИОСТАНОВЛЕНА на время диалога с приложением " + НазваниеПриложения(), 3000);
КонецПроцедуры

Процедура ОповеститьПользователяОВозобновлении()
	ТурбоКонф.ПоказатьУведомление("Работа TurboConf ВОЗОБНОВЛЕНА после диалога с приложением " + НазваниеПриложения(), 3000);
КонецПроцедуры

Процедура РедактироватьТекст()
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекстМодуля) Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЯзыкПрограммы = ПолеТекстаПрограммы.ЯзыкПрограммы;
	ОповеститьПользователяОПриостановке();
	ИдентификаторПроцессаИР = МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс();
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх("^Текст.*", 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, ИдентификаторПроцессаИР);
	// ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх(".*", 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, ИдентификаторПроцессаИР);
	Значение = Ложь;
	ПодключениеИР.Visible = Истина;
	Попытка
		Если ЯзыкПрограммы = 0 Тогда
			ПолеТекстаПрограммы.КончитьОбработкуКоманды();
			ПолеТекстаПрограммы.РазобратьТекущийКонтекст();
			Значение = ПолеТекстаПрограммы.ОткрытьРедакторСтроковогоЛитерала();
		Иначе
			ПолеТекстаПрограммы.мЗаменяемыйДиапазон = Неопределено;
			Значение = МодулиИР.ирКлиент.ОткрытьТекстЛкс(ТекстМодуля, "", "", Ложь, Неопределено, Неопределено, Ложь, Истина, ПолеТекстаПрограммы.ПолеТекста.ВыделениеДвумерное());
			ПолеТекстаПрограммы.УстановитьТекст(Значение,,, Истина);
			Значение = Значение <> Неопределено И ТекстМодуля <> Значение;
		КонецЕсли;
		ОповеститьПользователяОВозобновлении();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
		Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
	КонецПопытки;
	ЗавершитьВызовВнешнегоОкнаАсинх(Истина, ИдентификаторПроцессаИР);
	ПодключениеИР.Visible = Ложь;
	Если Значение Тогда
		ТурбоКонф.Ждать(100); // Иначе при закрытии по CTRL+ENTER ПолучитьТекстМодуля() возвращает пусто
		ПередатьИзмененияИзПоляТекстаВОкноМодуля(ПолеТекстаПрограммы);
	КонецЕсли;	
КонецПроцедуры

//.
// Параметры:
//    ПолеТекстаПрограммы - ОбработкаОбъект.ирКлсПолеТекстаПрограммы - 
Процедура ПередатьИзмененияИзПоляТекстаВОкноМодуля(Знач ПолеТекстаПрограммы, Знач ПроверитьНеизменность = Истина, Знач ВесьМодульДляAPI5 = Ложь, Знач ДобавкаПослеМетодаДляAPI5 = "") Экспорт
	
	Пустышка = 0;
	НовыйТекстМодуляИзКонфигуратора = ТурбоКонф.ПолучитьТекстМодуля(ВыделенныйТекст, Пустышка);
	Если ПроверитьНеизменность Тогда
		Если НовыйТекстМодуляИзКонфигуратора <> ТекстМодуля Тогда
			ПолеТекстаПрограммы.мЗамещающийФрагмент = "";
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Текст в окне конфигуратора был изменен с начала редактирования. Вставка не выполнена. Фрагмент помещен в буфер обмена", 4000);
			Если ЯзыкПрограммы = 0 Тогда
				ТекстЛитерала = ПолеТекстаПрограммы.ВыделитьТекстовыйЛитерал();
			Иначе
				ТекстЛитерала = ПолеТекстаПрограммы.ПолеТекста.ПолучитьТекст();
			КонецЕсли;
			ТурбоКонф.УстановитьБуферОбмена(ТекстЛитерала);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ТурбоКонф.ПолучитьВерсиюAPI() < 6 Тогда
		Если Истина
			И ЯзыкПрограммы = 0 
			И Не ВесьМодульДляAPI5 
			И ПолеТекстаПрограммы.мМетодМодуля <> Неопределено 
			И ПолеТекстаПрограммы.мКонечнаяСтрока <= ПолеТекстаПрограммы.мНомерПоследнейСтрокиТелаМетода + 1 // для форматирования
		Тогда
			// Заменяем только текущий метод
			ПолеТекстаПрограммы.РазобратьТекущийКонтекст();
			ТекстВставки = ПолеТекстаПрограммы.ОпределениеМетодаБезОписания() + ДобавкаПослеМетодаДляAPI5;
			НачальнаяКолонкаМетода = 1 + СтрДлина(ТекстВставки) - СтрДлина(СокрЛ(ТекстВставки));
			ТекстВставки = СокрЛ(ТекстВставки);
			НомерСтрокиОпределенияМетода = СтрЧислоСтрок(Лев(ТекстМодуля, ПолеТекстаПрограммы.мМетодМодуля.ПозицияОпределения) + "й");
			ПерейтиВПозицию(НачальнаяКолонкаМетода, НомерСтрокиОпределенияМетода); 
			ТурбоКонф.КонтролШифтКлавиша(Клавиши.OemCloseBrackets);
		Иначе
			// Заменяем весь модуль и теряем свертки
			ТекстВставки = ПолеТекстаПрограммы.ПолеТекста.ПолучитьТекст();
			ТурбоКонф.КонтролКлавиша(Клавиши.A);
			ТурбоКонф.Ждать(200);
		КонецЕсли;
	Иначе
		Если ВыделенныйТекст <> "" Тогда
			СохранитьГраницыВыделенияДляОтмены();
		КонецЕсли;
		ЗаменяемыйДиапазон = ПолеТекстаПрограммы.мЗаменяемыйДиапазон;
		Если ЗаменяемыйДиапазон <> Неопределено Тогда
			ТекстВставки = ПолеТекстаПрограммы.мЗамещающийФрагмент;
			ПолеТекстаПрограммы.мЗамещающийФрагмент = "";
			ТурбоКонф.ВыделитьТекст(ЗаменяемыйДиапазон.Начало - 1, ЗаменяемыйДиапазон.Конец - 1);
		Иначе
			ТекстВставки = ПолеТекстаПрограммы.ПолеТекста.ПолучитьТекст();
			ТурбоКонф.ВыделитьТекст(0, СтрДлина(ТурбоКонф.ПолучитьТекстТекущегоЭлемента()));
		КонецЕсли;
	КонецЕсли;
	МоментНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТурбоКонф.ВставитьТекст(ТекстВставки); 
	Сообщить("Вставка блока " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментНачала) + "мс");
	Если ТурбоКонф.ПолучитьВерсиюAPI() < 6 Тогда
		ВыделениеДвумерное = ПолеТекстаПрограммы.ПолеТекста.ВыделениеДвумерное();
		ПерейтиВПозицию(ВыделениеДвумерное.НачальнаяКолонка, ВыделениеДвумерное.НачальнаяСтрока);
	Иначе 
		ВыделениеОдномерное = ПолеТекстаПрограммы.ПолеТекста.ВыделениеОдномерное();
		ТурбоКонф.ВыделитьТекст(ВыделениеОдномерное.Начало - 1, ВыделениеОдномерное.Конец - 1);
	КонецЕсли;
КонецПроцедуры

Процедура ВыделитьМетод()
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗаголовокОкна = "Запрос" Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОповеститьПользователяОПриостановке();
	ИдентификаторПроцессаИР = МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс();
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх("^Выделение метода.*", 5000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, ИдентификаторПроцессаИР);
	Значение = Ложь;
	// ПодключениеИР.Visible = Истина;
	Попытка
		Значение = ПолеТекстаПрограммы.ВыделитьМетод();
		ОповеститьПользователяОВозобновлении();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
		Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
	КонецПопытки;
	ЗавершитьВызовВнешнегоОкнаАсинх(Истина, ИдентификаторПроцессаИР);
	ПодключениеИР.Visible = Ложь;
	Если Значение = Ложь Тогда
		Возврат;
	ИначеЕсли Значение = "Ошибка" Тогда
		ВосстановитьОкноПриложения(ПодключениеИР);
	Иначе
		ПередатьИзмененияИзПоляТекстаВОкноМодуля(ПолеТекстаПрограммы,,, Символы.ПС + Символы.ПС + Значение);
	КонецЕсли;
		
КонецПроцедуры

//&ЗапроситьИнформациюОДокументе
Процедура ФорматироватьТекст()
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;             
	Если ПолеТекстаПрограммы.ЯзыкПрограммы = 0 Тогда 
		Если Не ЗначениеЗаполнено(ВыделенныйТекст) Тогда
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Необходимо выделить блок текста", 2000);
			Возврат;
		КонецЕсли;
		Если ПолеТекстаПрограммы.ФорматироватьТекстВстроенногоЯзыка(Ложь) Тогда
			ПередатьИзмененияИзПоляТекстаВОкноМодуля(ПолеТекстаПрограммы, Ложь, ПолеТекстаПрограммы.мКонечнаяСтрока > ПолеТекстаПрограммы.мНомерПоследнейСтрокиТелаМетода + 1);
		КонецЕсли;
	ИначеЕсли ПолеТекстаПрограммы.ЯзыкПрограммы = 1 Тогда 
		Если ПолеТекстаПрограммы.ФорматироватьТекстЯзыкаЗапросов() Тогда 
			ПередатьИзмененияИзПоляТекстаВОкноМодуля(ПолеТекстаПрограммы, Ложь, Истина);
		КонецЕсли;
	КонецЕсли;
		         
КонецПроцедуры

Процедура ВосстановитьОкноПриложения(ПодключениеИР)
	// ПодключениеИР нельзя из кэша брать, т.к. там активное окно конфигуратора заново получается
	СтароеАктивноеОкно = ТурбоКонф.ПолучитьАктивноеОкно();
	ПодключениеИР.Visible = Истина; 
	МодулиИР = МодулиИР(ПодключениеИР);
	ИдентификаторПроцессаИР = МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс();
	// В 8.3.9- заголовок окна будет с добавкой слева
	Если Не ЗначениеЗаполнено(Конфигуратор) Тогда
		ОкноКонфигуратора = 1;
	Иначе
		ОкноКонфигуратора = Конфигуратор.ГлавноеОкно;
	КонецЕсли;
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх(МодулиИР.ирОбщий.ПодготовитьТекстДляРегВыраженияЛкс(ЗаголовокПриложенияИР), 2000, ОкноКонфигуратора, РежимОткрытияВнешнегоОкна.ГлавноеОкно,
		Истина, ИдентификаторПроцессаИР);
	ЗавершитьВызовВнешнегоОкнаАсинх(Ложь, ИдентификаторПроцессаИР);
	ПодключениеИР.Visible = Истина;
	
	// Подождем получения фокуса окном приложения ИР, что иногда не сразу происходит https://turboconf.ru/Tasks/8912
	ЖдатьПотерюАктивностиОкна(СтароеАктивноеОкно);
КонецПроцедуры

// .
//
// Параметры:
//  СтароеАктивноеОкно	 - Число - 
//  ЧислоСекунд			 - Число - 
// 
// Возвращаемое значение:
//  Булево - Истина если окно потеряло фокус
//
Функция ЖдатьПотерюАктивностиОкна(Знач СтароеАктивноеОкно = Неопределено, Знач ЧислоСекунд = 2) Экспорт
	Если СтароеАктивноеОкно = Неопределено Тогда
		СтароеАктивноеОкно = ТурбоКонф.ПолучитьАктивноеОкно();
	КонецЕсли;
	Если ТурбоКонф.ПолучитьВерсиюAPI() < 6 Тогда
		МоментНачала = ТекущаяДата();
		Пока Истина
			И ТурбоКонф.ПолучитьАктивноеОкно() = СтароеАктивноеОкно 
			И ТекущаяДата() <= МоментНачала + ЧислоСекунд - 1 // Не больше ЧислоСекунд секунд ждем
		Цикл
			ТурбоКонф.Ждать(100);
		КонецЦикла;
		Результат = ТурбоКонф.ПолучитьАктивноеОкно() <> СтароеАктивноеОкно;
	Иначе 
		Результат = ТурбоКонф.ЖдатьСменуАктивногоОкна(СтароеАктивноеОкно, ЧислоСекунд * 1000, Ложь);
	КонецЕсли;
	Возврат Результат;
КонецФункции

//&ЗапроситьИнформациюОДокументе
Процедура КопироватьСсылку()
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Ссылка = СсылкаНаОбъектМДВДеревеКонфигурации(ПодключениеИР);
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Возврат;
		КонецЕсли;
	Иначе 
		Если Не ЗначениеЗаполнено(ПолеТекстаПрограммы.мИмяМодуля) Тогда
			// ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Поддерживается копирование ссылок только в развернутых модулях");
			Возврат;
		КонецЕсли;
		// В первой строке идет расширенная ссылка. Во второй - стандартный формат платформы.
		Ссылка = ПолеТекстаПрограммы.СсылкаСтрокиМодуля(, Истина) + Символы.ПС + ПолеТекстаПрограммы.СсылкаСтрокиМодуля(, Ложь) + ": <Стандартная>";
	КонецЕсли;
	УстановитьБуферОбмена(Ссылка);
	ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Скопирована ссылка - " + Ссылка);
КонецПроцедуры

//.
// Параметры:
//    МодулиИР - Application {V83.Application}, Неопределено - 
//    ПодключениеИР - Application {V83.Application}, Неопределено - 
// Возвращаемое значение:
//    Строка - 
Функция СсылкаНаОбъектМДВДеревеКонфигурации(Знач ПодключениеИР, Знач ТолькоВерхнийУровень = Ложь, выхИмяРасширения = "") Экспорт
	Если ТипЭлементаИнтерфейса = ТипЭлемента.Неизвестный Тогда
		Возврат "";
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ИмяТекЭлемента = Неопределено;
	Фрагменты = Новый Массив;
	Пока ИмяТекЭлемента <> ТурбоКонф.ПолучитьИмяЭлемента() Цикл
		ИмяЭлемента = ТурбоКонф.ПолучитьИмяЭлемента();
		Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
			Прервать;
		КонецЕсли;
		ИмяЭлемента = МодулиИР.ирОбщий.ЗаменитьРегВыражениеЛкс(ИмяЭлемента, "\<[^\>]*\>", "", Ложь);
		Фрагменты.Вставить(0, ИмяЭлемента);
		ТурбоКонф.КонтролКлавиша(Клавиши.Up);
		ИмяТекЭлемента = ИмяЭлемента;
	КонецЦикла;
	Если Фрагменты.Количество() < 2 Тогда
		Возврат "";
	КонецЕсли;
	Если Фрагменты[1] = "Общие" Тогда
		Фрагменты.Удалить(1);
	КонецЕсли;
	ПозицияФрагмента = Фрагменты.Найти("Табличные части");
	Если ПозицияФрагмента <> Неопределено Тогда
		Если Фрагменты.Количество() > ПозицияФрагмента + 2 Тогда
			Фрагменты.Вставить(ПозицияФрагмента + 2, "Реквизиты");
		КонецЕсли;
	КонецЕсли;
	ПозицияФрагмента = Фрагменты.Найти("Перерасчеты");
	Если ПозицияФрагмента <> Неопределено Тогда
		Если Фрагменты.Количество() > ПозицияФрагмента + 2 Тогда
			Фрагменты.Вставить(ПозицияФрагмента + 2, "Измерения");
		КонецЕсли;
	КонецЕсли;
	Для Счетчик = 1 По Цел(Фрагменты.Количество() / 2) Цикл
		ИндексФрагмента = 2*(Счетчик - 1) + 1;
		ИмяМножественное = МодулиИР.ирОбщий.ИдентификаторИзПредставленияЛкс(Фрагменты[ИндексФрагмента]);
		ЕдинственноеИмя = МодулиИР.ирОбщий.ЕдинственноеИмяМДЛкс(ИмяМножественное);
		Если ЕдинственноеИмя = Неопределено Тогда
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Неизвестный тип метаданных """ + ИмяМножественное + """");
			Возврат "";
		КонецЕсли;
		Фрагменты[ИндексФрагмента] = ЕдинственноеИмя;
	КонецЦикла;
	ИмяКонфигурации = Фрагменты[0];
	Фрагменты.Удалить(0); // Имя конфигурации/расширения
	СсылкаВосстановления = СтрСоединить(Фрагменты, ".");
	Пока ТолькоВерхнийУровень И Фрагменты.Количество() > 2 Цикл
		Фрагменты.Удалить(Фрагменты.ВГраница());
	КонецЦикла;
	Ссылка = СтрСоединить(Фрагменты, ".");
	ИмяОсновнойКонфигурации = ИмяОсновнойКонфигурации(ПодключениеИР);
	Если ИмяОсновнойКонфигурации <> ИмяКонфигурации Тогда
		выхИмяРасширения = ИмяКонфигурации;
		СсылкаВосстановления = ИмяКонфигурации + " " + СсылкаВосстановления;
		Ссылка = ИмяКонфигурации + " " + Ссылка;
	КонецЕсли;
	ТурбоКонф.Перейти(СсылкаВосстановления);
	Возврат Ссылка;
КонецФункции

// 8мс, 20мс при открытом окне "Служебные сообщения"
Функция ПолучитьТипТекущегоЭлемента()
	Возврат ТурбоКонф.ПолучитьТипТекущегоЭлемента(); // Вероятно ошибка OScript https://turboconf.ru/Tasks/8430
	// Возврат ТурбоКонф.ПолучитьНазваниеТипаТекущегоЭлемента(); 

КонецФункции

Функция ЭтоДокумент(Знач ТипПоля = "") 
	Если Не ЗначениеЗаполнено(ТипПоля) Тогда
		ТипПоля = ПолучитьТипТекущегоЭлемента();
	КонецЕсли;
	Возврат ТипПоля = ТипЭлемента.Документ;
	// Возврат ТипПоля = "документ";
КонецФункции

Функция ЭтоПоле(Знач ТипПоля = "")
	Если Не ЗначениеЗаполнено(ТипПоля) Тогда
		ТипПоля = ПолучитьТипТекущегоЭлемента();
	КонецЕсли;
	Возврат ТипПоля = ТипЭлемента.Поле;
	// Возврат ТипПоля = "поле";
КонецФункции

Функция ЭтоПолеСоСписком(Знач ТипПоля = "")
	Если Не ЗначениеЗаполнено(ТипПоля) Тогда
		ТипПоля = ПолучитьТипТекущегоЭлемента();
	КонецЕсли;
	Возврат ТипПоля = ТипЭлемента.ПолеСоСписком;
	// Возврат ТипПоля = "поле со списком";
КонецФункции

//&-ВосстанавливатьБуферОбмена
//&ЗапроситьИнформациюОДокументе
Процедура ПерейтиКОпределению()
	СтароеЗначениеБуфераОбмена = ТурбоКонф.ПолучитьБуферОбмена();
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	Если Не ЭтоДокумент(ТипЭлементаИнтерфейса) Тогда
		ТекстМодуля = ПолучитьВыделенныйТекст(Ложь);
	КонецЕсли;
	ИмяФайлаБуфера = ВосстановитьЗначениеСеансаКонфигуратора("ИмяФайлаБуфера");
	ФайлБуфера = Новый Файл(ИмяФайлаБуфера);
	РазрешитьСсылкуИзТекущейПозиции = Истина;
	Если ФайлБуфера.Существует() Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайлаБуфера);
		ЗначениеИзБуфера = СокрЛП(ТекстовыйДокумент.ПолучитьТекст());
		УдалитьФайлы(ИмяФайлаБуфера);
		РазрешитьСсылкуИзТекущейПозиции = Ложь;
	Иначе 
		ЗначениеИзБуфера = СтароеЗначениеБуфераОбмена;
		Если Не ЗначениеЗаполнено(ТекстМодуля) Тогда
			ТекстМодуля = ЗначениеИзБуфера;
		КонецЕсли;
	КонецЕсли;
	Сообщить("Ссылка из буфера = " + ЗначениеИзБуфера);
	Значение = Неопределено; 
	СтруктураСсылки = Неопределено;
	ИмяРасширения = "";
	Если НомерСтроки > 0 Тогда
		ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст,,,,,,, ИмяРасширения);
		Если ПолеТекстаПрограммы = Неопределено Тогда
			// Окно сообщений
			ТурбоКонф.Клавиша(Клавиши.Home);
			ТурбоКонф.ШифтКлавиша(Клавиши.End);
			//Значение = ПолучитьВыделенныйТекст(); // Ненадежно
			ВремПозиция = 0;
			ТурбоКонф.ПолучитьТекстМодуля(ТекстМодуля, ВремПозиция);
		Иначе
			ПолеТекстаПрограммы.ЗапомнитьИсточникПерехода();
			Если РазрешитьСсылкуИзТекущейПозиции Тогда 
				Значение = ПолеТекстаПрограммы.ПерейтиКОпределению(,, Ложь); 
			КонецЕсли;
			Если Значение = Неопределено Тогда
				СтруктураСсылки = МодулиИР.ирОбщий.СтруктураСсылкиСтрокиМодуляЛкс(ЗначениеИзБуфера);
				Если Истина     
					И СтруктураСсылки <> Неопределено
					И ПолеТекстаПрограммы.ПерейтиПоСсылкеСтрокиМодуля(ЗначениеИзБуфера) = Истина 
				Тогда 
					Значение = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СсылкаМД = СсылкаНаОбъектМДВДеревеКонфигурации(ПодключениеИР, Истина, ИмяРасширения);
		Если ЗначениеЗаполнено(ИмяРасширения) Тогда
			ТекстМодуля = Сред(СсылкаМД, СтрДлина(ИмяРасширения) + 2);
			ИмяРасширения = "";
		КонецЕсли;
	КонецЕсли;
	Если ПолеТекстаПрограммы = Неопределено И РазрешитьСсылкуИзТекущейПозиции Тогда 
		Если Лев(ТекстМодуля, 1) = "(" Тогда
			// В реквизитах управляемой формы иногда текст обрамлен скобками
			ТекстМодуля = СтрЗаменить(ТекстМодуля, "(", "");
			ТекстМодуля = СтрЗаменить(ТекстМодуля, ")", "");
		КонецЕсли;
		Значение = ТекстМодуля;
		Значение = МодулиИР.ирОбщий.ИменаМетаданныхИзОписанияТиповЛкс(Значение);
		Если Значение.Количество() = 0 Тогда
			// Текст параметризуемой команды
			Фрагменты = СтрРазделить(ТекстМодуля, " ", Ложь);
			Если Фрагменты.Количество() < 20 Тогда
				Для каждого Фрагмент Из Фрагменты Цикл
					ОбъектМД = ПодключениеИР.Метаданные.НайтиПоПолномуИмени(Фрагмент);
					Если ОбъектМД <> Неопределено Тогда
						Значение.Добавить(МодулиИР.ирОбщий.ПолноеИмяМДСРасширениемЛкс(ОбъектМД));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Значение.СортироватьПоЗначению();
			Значение.СортироватьПоПредставлению();
		КонецЕсли;
		Если Значение.Количество() = 0 И ЗначениеЗаполнено(ТекстМодуля) Тогда
			Значение = ТекстМодуля;
			Если НомерСтроки = 0 Тогда 
				// Отделять пробелом нужно для ячеек табличных документов. В их имя в конце добавляется адрес через пробел, например "<ТекстЯчейки> A3" 
				ТекстМодуля = СтрРазделить(ТекстМодуля, " ")[0];
			КонецЕсли;
			ТекстМодуля = "//" + ТекстМодуля; 
			ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, СтрДлина(ТекстМодуля), ВыделенныйТекст,,, Ложь);
			Если ПолеТекстаПрограммы <> Неопределено Тогда
				ПолеТекстаПрограммы.КончитьОбработкуКоманды();
				Значение = ПолеТекстаПрограммы.ПерейтиКОпределению(,, Ложь);
			КонецЕсли;
			Если Значение = Неопределено Тогда
				Значение = ТекстМодуля;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПродолжатьОбработку = Истина;
	Представление = "";
	Если ТипЗнч(Значение) = Тип("COMОбъект") Тогда
		//! Значение = 0 // СписокЗначений
		Если Значение.Количество() = 0 Тогда
			Значение = Неопределено;
		Иначе
			Если Значение.Количество() = 1 Тогда
				НоваяЦельПерехода = Значение.Получить(0);
			Иначе
				ПодключениеИР.Visible = Истина;
				ОповеститьПользователяОПриостановке();
				НоваяЦельПерехода = Неопределено;
				ЗаголовокФормыВыбора = "Выберите переход";
				ИдентификаторПроцессаИР = МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс();
				Попытка
					ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх(ЗаголовокФормыВыбора, 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, ИдентификаторПроцессаИР);
					НоваяЦельПерехода = МодулиИР.ирКлиент.ВыбратьЭлементСпискаЗначенийЛкс(Значение,, Истина, ЗаголовокФормыВыбора, Ложь, Истина);
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
					Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
				КонецПопытки;
				ЗавершитьВызовВнешнегоОкнаАсинх(, ИдентификаторПроцессаИР);
				ОповеститьПользователяОВозобновлении();
				ПодключениеИР.Visible = Ложь;
			КонецЕсли;
			Если НоваяЦельПерехода = Неопределено Тогда
				ПродолжатьОбработку = Ложь;
			Иначе
				РезультатПереходаИР = Ложь;
				Если ПолеТекстаПрограммы <> Неопределено Тогда 
					РезультатПереходаИР = ПолеТекстаПрограммы.ПерейтиПоСсылкеСтрокиМодуля(НоваяЦельПерехода.Значение); // Только локально
					ПродолжатьОбработку = Истина;
				КонецЕсли;
				Если РезультатПереходаИР = Истина Тогда 
					Значение = Истина; 
				Иначе
					Значение = НоваяЦельПерехода.Значение;
					Представление = НоваяЦельПерехода.Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПродолжатьОбработку Тогда
		// ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
		Сообщить("Ссылка из текущей позиции = " + Значение);
		Если Значение = Истина Тогда
			// ИР совершил переход в своем поле модуля
			ПерейтиВПозицию(,, ПолеТекстаПрограммы);
			ВыполнитьКомандуИзСсылкиПослеПерехода(ПолеТекстаПрограммы, СтруктураСсылки);
		// ИначеЕсли Значение = "Справка" Тогда // Мертвая ветка
		// 	ВосстановитьОкноПриложения(ПодключениеИР);
		// 	ПродолжатьОбработку = Ложь;
		ИначеЕсли Представление = "Метод прямой" Тогда
			ТурбоКонф.Клавиша(Клавиши.F12);
			Окно = ТурбоКонф.ЖдатьОкно("Объект перехода", 500, Ложь);
			Если Окно > 0 Тогда
				ТурбоКонф.Клавиша(Клавиши.Enter);
			КонецЕсли
		ИначеЕсли Представление = "ГиперСсылка" Тогда
			ЗапуститьПриложение(Значение);
		Иначе
			ПродолжатьОбработку = Истина;
			Если Ложь
				Или Не ЗначениеЗаполнено(Значение)
				//Или (Истина 
				//	И МодулиИР.ирОбщий.СтруктураСсылкиСтрокиМодуляЛкс(Значение) = Неопределено
				//	И Не ЭтоПолноеИмяМД(МодулиИР, Значение))  
			Тогда
				Значение = ЗначениеИзБуфера;
				Если Истина
					И МодулиИР.ирОбщий.СтруктураСсылкиСтрокиМодуляЛкс(Значение) = Неопределено
					И Не ЭтоПолноеИмяМД(МодулиИР, Значение) 
				Тогда
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(),
						"Нет ссылки для перехода. В текущей позиции пусто. В буфере обмена не найдено. Открыть справку.", 5000,
						ЭтотОбъект, "ОткрытьСправкуКоманды", Новый Структура("Команда", "ПерейтиКОпределению"));
					ПродолжатьОбработку = Ложь;
				КонецЕсли;
			ИначеЕсли Значение = "*" Тогда
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(),
					"Нет ссылки для перехода. В текущей позиции не найдено. Открыть справку.", 5000,
					ЭтотОбъект, "ОткрытьСправкуКоманды", Новый Структура("Команда", "ПерейтиКОпределению"));
				ПродолжатьОбработку = Ложь; 
			КонецЕсли;
			Если ПродолжатьОбработку И Не ПерейтиПоСсылкеСтрокиМодуля(Значение, ИмяРасширения) Тогда
				ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта);
				ТурбоКонф.Клавиша(Клавиши.F12);
			КонецЕсли;
		КонецЕсли;
		ТурбоКонф.ОтжатьМодификаторы(); // Иначе будет залипать CTRL после перехода из формы приложения ИР к строке модуля
	КонецЕсли;
	УстановитьБуферОбмена(СтароеЗначениеБуфераОбмена); // Почему то после этого перестает работать чтение из буфера обмена. Проверено на реквизитах управляемой формы. Похоже на баг Турбоконфа
КонецПроцедуры   

Процедура ОткрытьСправкуКоманды(Параметры) Экспорт
	Если Параметры.Команда = "ПерейтиКОпределению" Тогда
		ЗапуститьПриложение("https://fastcode.im/Templates/Shared/bc4da1a446444e249e02b6f9b5467296");
	КонецЕсли;
КонецПроцедуры

Процедура ЗавершитьВызовВнешнегоОкнаАсинх(Знач ВернутьФокусВОкноВызоваСкрипта = Истина, Знач ИдентификаторПроцесса = 0) Экспорт
	Если ВернутьФокусВОкноВызоваСкрипта Тогда
		Окно = Конфигуратор.ОкноВызоваСкрипта;
	КонецЕсли;
	Попытка
		ТурбоКонф.ЗавершитьВызовВнешнегоОкнаАсинх(Окно,, ИдентификаторПроцесса); // Вроде бы избыточная передача идентификатора
	Исключение
		// ниже 6.0.8819.34377
		ТурбоКонф.ЗавершитьВызовВнешнегоОкнаАсинх(Окно);
	КонецПопытки;
КонецПроцедуры

// Ускоренный вариант Турбоконф.ПерейтиВПозицию для случая непервой колонки.
//  Пришлось делать, т.к. Турбоконф не мог сам сделать это простое улучшение. https://turboconf.ru/Tasks/9031
//
// Параметры:
//  НомерКолонки		 - 	 - 
//  НомерСтроки			 - 	 - 
//  ПолеТекстаПрограммы	 - 	 - если указано, то производится еще разворачивание блока 
//
Процедура ПерейтиВПозицию(Знач НомерКолонки = 0, Знач НомерСтроки = 0, Знач ПолеТекстаПрограммы = Неопределено)
	//ВыделениеДвумерное = ПолеТекстаПрограммы.ПолеТекста.ВыделениеДвумерное();
	////Если ТурбоКонф.ПолучитьВерсиюAPI() >= 6 Тогда 
	////	ТурбоКонф.ВыделитьТекст(ВыделениеОдномерное.Начало - 1, ВыделениеОдномерное.Конец - 1);
	////КонецЕсли;
	Если Найти(ТурбоКонф.ПолучитьЗаголовокТекущегоОкна(), " - Конфигуратор - ") = 0 Тогда
		// https://turboconf.ru/Tasks/9185
		Возврат;
	КонецЕсли;
	Если ТурбоКонф.ПолучитьВерсиюAPI() < 6 Или НомерКолонки = 1 Тогда
		ТурбоКонф.ПерейтиВПозицию(НомерКолонки, НомерСтроки);
	ИначеЕсли ПолеТекстаПрограммы <> Неопределено Тогда 
		ВыделениеДвумерное = ПолеТекстаПрограммы.ПолеТекста.ВыделениеДвумерное();
		ТурбоКонф.ПерейтиВПозицию(1, ВыделениеДвумерное.НачальнаяСтрока); // Нужно для запоминания позиции в истории переходов конфигуратора и для центриования по высоте
		ВыделениеОдномерное = ПолеТекстаПрограммы.ПолеТекста.ВыделениеОдномерное();
		РазвернутьБлокМодуля(ВыделениеОдномерное.Начало - 1, ВыделениеОдномерное.Конец - 1);
	Иначе 
		Позиция = 0; 
		Пустышка = 0;
		ТурбоКонф.ПолучитьТекстДокумента(Пустышка, Пустышка, Позиция, Позиция);
		ТурбоКонф.ПерейтиВПозицию(1, НомерСтроки);
		Позиция = Позиция + НомерКолонки - 1;
		ТурбоКонф.ВыделитьТекст(Позиция, Позиция); // Почему то делает текущую строку самой нижней в области просмотра
	КонецЕсли;
КонецПроцедуры

Процедура ПерейтиВНачалоБлока()
	ПодключениеИР = ПодключениеИР(,, Ложь);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ПолеТекстаПрограммы.ПерейтиВНачалоБлока() Тогда 
		Возврат;
	КонецЕсли;
	ПерейтиВПозицию(,, ПолеТекстаПрограммы);
КонецПроцедуры

Процедура ВернутьсяИзПерехода()
	ПодключениеИР = ПодключениеИР(,, Ложь);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля);
	Если Не ПолеТекстаПрограммы.ВернутьсяИзПерехода() Тогда 
		Возврат;
	КонецЕсли;
	ПерейтиВПозицию(,, ПолеТекстаПрограммы);
	//ТурбоКонф.КонтролКлавиша(Клавиши.OemMinus);
КонецПроцедуры

Функция ЭтоПолноеИмяМД(МодулиИР, Знач Значение)
	Если Лев(Значение, 1) = "{" Тогда
		Возврат Ложь;
	КонецЕсли;
	Фрагменты = СтрРазделить(Значение, " ");
	Если Фрагменты.Количество() = 2 Тогда
		Значение = Фрагменты[1]; // Убираем имя расширения
	КонецЕсли;
	Возврат МодулиИР.ирОбщий.ЛиКорневойТипМетаданныхЛкс(СтрРазделить(Значение, ".")[0]);
КонецФункции

Функция ЭтоСсылкаСтрокиМодуля(Значение)
	Возврат Лев(Значение, 1) = "{"; 
КонецФункции

// Портит буфер обмена
Функция ПерейтиПоСсылкеСтрокиМодуля(Знач СсылкаСтроки = "", Знач ИмяРасширения = "")
	// СтароеЗначениеБуфераОбмена = ТурбоКонф.ПолучитьБуферОбмена();
	ПодключениеИР = ПодключениеИР(,, Ложь);
	// Если Не ЗначениеЗаполнено(СсылкаСтроки) Тогда
	// 	СсылкаСтроки = СтароеЗначениеБуфераОбмена;
	// КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	Если ЭтоПолноеИмяМД(МодулиИР, СсылкаСтроки) Тогда
		Если Найти(СсылкаСтроки, ".Форма.") > 0 Тогда
			ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, "//");
			ЧастиПолногоИмениЭлементаФормы = ПолеТекстаПрограммы.ЧастиПолногоИмениЭлементаФормы(СсылкаСтроки);
			Если ЧастиПолногоИмениЭлементаФормы <> Неопределено Тогда
				СсылкаСтроки = ЧастиПолногоИмениЭлементаФормы.ИмяФормы;
				ПутьКЭлементуФормы = ЧастиПолногоИмениЭлементаФормы.ПутьКЭлементу;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИмяРасширения) Тогда
			СсылкаСтроки = ИмяРасширения + " " + СсылкаСтроки;
		КонецЕсли;                          
		// Активируем дерево конфигурации, чтобы запомнить текущую позицию в нем
		ТурбоКонф.КонтролШифтКлавиша(Клавиши.C);
		ФрагментыИмени = СтрРазделить(СсылкаСтроки, ".");
		НижнееИскомоеИмя = ФрагментыИмени[ФрагментыИмени.ВГраница()]; 
		БылВременныйСдвиг = НижнееИскомоеИмя = ТурбоКонф.ПолучитьИмяЭлемента();
		Если БылВременныйСдвиг Тогда
			// Временно переходим на соседний элемент дерева, чтобы точно отследить успешность перехода, если уже стоим на нужном элементе
			ТурбоКонф.Клавиша(Клавиши.Up); 
		КонецЕсли;
		СтарыйАктивныйЭлементДерева = ТурбоКонф.ПолучитьRuntimeIdСтрокой();
		Попытка
			ТурбоКонф.Перейти(СсылкаСтроки);
		Исключение
			//Сообщить("Ошибка перехода к объекту метаданных """ + СсылкаСтроки + """: " + ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;
		Успех = СтарыйАктивныйЭлементДерева <> ТурбоКонф.ПолучитьRuntimeIdСтрокой();
		Если Не Успех Тогда
			Если БылВременныйСдвиг Тогда
				ТурбоКонф.Клавиша(Клавиши.Down); 
			КонецЕсли;
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Не удалось перейти к """ + СсылкаСтроки + """. Отключите фильтр в дереве метаданных."); 
			Возврат Ложь;
		КонецЕсли;
		Если Найти(СсылкаСтроки, "Команда.") > 0 Тогда
			ТурбоКонф.АльтКлавиша(Клавиши.Enter);
		ИначеЕсли Ложь
			Или СтрНачинаетсяС(СсылкаСтроки, "ОбщаяФорма.")
			Или СтрЧислоВхождений(СсылкаСтроки, ".") > 1
		Тогда
			ТурбоКонф.Клавиша(Клавиши.Enter);
		КонецЕсли;
		// УстановитьБуферОбмена(СтароеЗначениеБуфераОбмена);
		Если ЗначениеЗаполнено(ПутьКЭлементуФормы) Тогда
			ТипЭлементаИнтерфейса = ПолучитьТипТекущегоЭлемента();
			МаркерЭлементаФормы = "ЭлементыФормы."; 
			Если СтрНачинаетсяС(ПутьКЭлементуФормы, МаркерЭлементаФормы) Тогда
				Если ТипЭлементаИнтерфейса = ТипЭлемента.Документ Тогда
					ТурбоКонф.КонтролКлавиша(Клавиши.PageUp); // Активируем странцу "Диалог" редактора формы
				КонецЕсли;
				ИмяЭлементаФормы = Сред(ПутьКЭлементуФормы, СтрДлина(МаркерЭлементаФормы) + 1);
				ИмяЭлементаФормы = " (" + ИмяЭлементаФормы + ") ";
				ТурбоКонф.КонтролШифтКлавиша(Клавиши.L); // Список элементов управления формы
				//ТурбоКонф.ЖдатьОкно("Список элементов управления формы", 1000, Истина); // Не работает
				ТурбоКонф.Клавиша(Клавиши.Home);
				ТурбоКонф.КонтролШифтКлавиша(Клавиши.Add);
				ТурбоКонф.КонтролКлавиша(Клавиши.F);
				ТурбоКонф.Ждать(100);
				//ТурбоКонф.ЖдатьОкно("Поиск", 1000, Истина); // Не работает
				ТурбоКонф.ВставитьТекст(ИмяЭлементаФормы);
				ТурбоКонф.Клавиша(Клавиши.Enter);
				ТурбоКонф.Ждать(100);
				ИмяТекущегоЭлемента = ТурбоКонф.ПолучитьИмяЭлемента();
				Сообщить("ИмяТекущегоЭлемента=" + ИмяТекущегоЭлемента);
				Если ИмяТекущегоЭлемента = ИмяЭлементаФормы Тогда
					ТурбоКонф.Клавиша(Клавиши.Escape); 
				Иначе 
					// Т.к. поиск делается по подстроке, то может быть найдено не то, что нужно. Поэтому оставляем дерево открытым.
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Если найден неверный элемент, нажмите F3 для поиска следующего варианта");
				КонецЕсли;
			КонецЕсли;
			МаркерЭлементаФормы = "Элементы."; 
			Если СтрНачинаетсяС(ПутьКЭлементуФормы, МаркерЭлементаФормы) Тогда
				Если ТипЭлементаИнтерфейса = ТипЭлемента.Документ Тогда
					ТурбоКонф.АльтКлавиша(Клавиши.D1); // Активируем странцу "Форма" редактора формы
				КонецЕсли;
				ИмяЭлементаФормы = Сред(ПутьКЭлементуФормы, СтрДлина(МаркерЭлементаФормы) + 1);
				ТурбоКонф.Клавиша(Клавиши.Home);
				ТурбоКонф.КонтролШифтКлавиша(Клавиши.Add);
				ТурбоКонф.КонтролКлавиша(Клавиши.F);
				ТурбоКонф.Ждать(100);
				ТурбоКонф.ВставитьТекст(ИмяЭлементаФормы);
				ТурбоКонф.Клавиша(Клавиши.Enter);
				ТурбоКонф.Ждать(100);
				ИмяТекущегоЭлемента = ТурбоКонф.ПолучитьИмяЭлемента();
				Сообщить("ИмяТекущегоЭлемента=" + ИмяТекущегоЭлемента);
				Если ИмяТекущегоЭлемента <> ИмяЭлементаФормы + " Элемент" Тогда
					// Т.к. поиск делается по подстроке, то может быть найдено не то, что нужно. Поэтому оставляем дерево открытым.
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Если найден неверный элемент, нажмите F3 для поиска следующего варианта");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Возврат Истина; 
	КонецЕсли;
	СтруктураСсылки = МодулиИР.ирОбщий.СтруктураСсылкиСтрокиМодуляЛкс(СсылкаСтроки);
	Если СтруктураСсылки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Модуль открывает только если точка останова уже была в списке до вызова команды. Иначе открывает модуль последней точки останова.
	// Не возращает успешность. Не поддерживает модули расширений и внешних обработок.
	// ТурбоКонф.ОткрытьМодуль(СсылкаСтроки, ИмяФайлаВнешнейОбработки); 
	// Возврат Истина;
	
	Если ТурбоКонф.ПолучитьЗаголовокТекущегоОкна() = "Событие" Тогда
		ТурбоКонф.Клавиша(Клавиши.Escape);
	КонецЕсли;
	ИмяВременногоФайла = СохранитьТочкиОстановаВФайл();
	Если Не ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	Успех = Ложь;
	СтруктураСсылки = МодулиИР.ирКлиент.ДобавитьВФайлТочекОстановаЛкс(ИмяВременногоФайла, СсылкаСтроки);
	СтароеАктивноеОкно = Неопределено;
	СтарыйИД = Неопределено;
	Если Не ЗагрузитьТочкиОстановаИзФайлаВОткрытомОкнеТочекОстанова(ИмяВременногоФайла, СтарыйИД, СтароеАктивноеОкно) Тогда
		Возврат Ложь;
	КонецЕсли;
	НомерВерсииПлатформы = МодулиИР.ирКэш.НомерВерсииПлатформыЛкс();
	Если НомерВерсииПлатформы < 803024 Тогда
		ЧислоКолонок = 3;
		ИмяЯчейки = СтруктураСсылки.УсловиеОстанова + " Условие";
	Иначе
		ЧислоКолонок = 4;
		ИмяЯчейки = "условие: " + СтруктураСсылки.УсловиеОстанова + " Условие срабатывания";
	КонецЕсли;
	НачМомент = ТекущаяДата();
	ПредСтрока = Неопределено;

	// Такой способ не совместим с прикрепленным режимом окна в 8.3.24+
	////ТурбоКонф.ЖдатьСменуТекущегоЭлемента(СтарыйИД, 2000, Истина); // Не отключать в 8.3.24+! https://turboconf.ru/Tasks/8742 . Работает нестабильно https://turboconf.ru/Tasks/9020
	//Окно = ТурбоКонф.ЖдатьОкно("Точки останова", 2000, Истина);
	//Если Окно = 0 Тогда
	//	Возврат "";
	//КонецЕсли;
	//
	Если Не ЖдатьПотерюАктивностиОкна(СтароеАктивноеОкно) Тогда // На 8.3.23- окно можно открываться очень долго, если есть точка останова из большого расширения (например ИР), которое не открыто
		Возврат "";
	КонецЕсли;

	Пока ТекущаяДата() - НачМомент < 2 Цикл
		ТурбоКонф.Клавиша(Клавиши.Home);
		ТурбоКонф.Ждать(30); // Файл загружается асинхронно. Менее чем за 100мс он обычно не успевает загрузиться
		ТурбоКонф.Клавиша(Клавиши.PageDown); // Переходим на последнюю видимую строку
		Пока Истина Цикл
			ТекстПоследнейСтроки = ТурбоКонф.ПолучитьRuntimeIdСтрокой();
			Если ПредСтрока = ТекстПоследнейСтроки Тогда
				// Дошли до конца таблицы
				Прервать;
			КонецЕсли;
			ПредСтрока = ТекстПоследнейСтроки;
			// МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Если ТурбоКонф.КликнутьПоЭлементу(ИмяЯчейки, Неопределено, 0, Ложь) Тогда // Было 1000мс (исправлено). Иногда возвращает ложь, хотя клик выполняет
				// Сообщить("Время клика " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска));
				//ТурбоКонф.Клавиша(Клавиши.Escape);
				Успех = Истина;
				Прервать;
			Иначе
				ТурбоКонф.Клавиша(Клавиши.PageDown);
				ТурбоКонф.Ждать(30);
			КонецЕсли;
		КонецЦикла;
		Если Успех Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не Успех Тогда
		// ТурбоКонф.Клавиша(Клавиши.Escape);
	Иначе
		СтароеОкно = ТурбоКонф.ПолучитьАктивноеОкно();
		//ТурбоКонф.Клавиша(Клавиши.Return); // В 8.3.20- не работает TODO переделать на КликПоЭлементу. В 8.3.24+ не работает.
		ТурбоКонф.КликнутьПоЭлементу("Перейти к исходному коду", "кнопка", 0, Ложь);
		НачМомент = ТекущаяДата();
		Пока ТекущаяДата() - НачМомент < 2 И Не ЭтоДокумент() Цикл
			ТурбоКонф.Ждать(20);
		КонецЦикла;
		ТурбоКонф.Клавиша(Клавиши.F9);
		ТурбоКонф.Ждать(20);
		Если СтруктураСсылки.НомерСтроки > 1 Тогда
			ТурбоКонф.ШифтКлавиша(Клавиши.End);
		КонецЕсли;
		Если НомерВерсииПлатформы >= 803024 Тогда
			ТурбоКонф.Клавиша(Клавиши.F9);
			ТурбоКонф.АльтКлавиша(Клавиши.F9);
			ТурбоКонф.ШифтКлавиша(Клавиши.Escape);
		КонецЕсли;
		Попытка
			СтарыйИД = ТурбоКонф.ПолучитьRuntimeIdСтрокой(); // Тут часто возвникает ошибка - Время ожидания операции истекло. (Исключение из HRESULT: 0x80131505)
		Исключение
		КонецПопытки; 
		БлокРазвернут = Ложь;
		Если ЗначениеЗаполнено(СтруктураСсылки.Метод) Тогда 
			ТурбоКонф.ЖдатьСменуТекущегоЭлемента(СтарыйИД, 200, Ложь);
			//ТурбоКонф.Ждать(200); // Иначе может вернуться пустой текст модуля
			ИмяМетода = СтруктураСсылки.Метод;
			Если Истина
				И СтруктураСсылки.НомерСтроки > 1 
				И СтруктураСсылки.СмещениеСтрокиМетода = 0
			Тогда
				ВыделенныйТекст = "";
				ВремПозиция = 0;
				// ВыделенныйТекст = ПолучитьВыделенныйТекст(); // Так часто возникает ошибка чтения буфера
				ТурбоКонф.ПолучитьТекстМодуля(ВыделенныйТекст, ВремПозиция);
			КонецЕсли;
			Если Ложь
				Или СтруктураСсылки.СмещениеСтрокиМетода <> 0
				Или Найти(НРег(ВыделенныйТекст), НРег(" " + ИмяМетода + "(")) = 0 
			Тогда
				Попытка
					ТекстМодуля = ТурбоКонф.ПолучитьТекстТекущегоЭлемента();
				Исключение
					// Старая версия Турбоконф
					РазобратьПозициюВТексте(); 
				КонецПопытки;
				Если Не ЗначениеЗаполнено(ТекстМодуля) Тогда
					ТекстСообщения = "Получен пустой текст модуля";
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ТекстСообщения, 3000);
					Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
				КонецЕсли;
				ЗаголовокОкна = "";
				ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, 0, ВыделенныйТекст); // Позиция тут не играет роли
				ПолеТекстаПрограммы.ПерейтиПоСсылкеСтрокиМодуля(СсылкаСтроки); // Только локально
				ПерейтиВПозицию(,, ПолеТекстаПрограммы);
				БлокРазвернут = Истина;
				ВыполнитьКомандуИзСсылкиПослеПерехода(ПолеТекстаПрограммы, СтруктураСсылки);
			КонецЕсли;
		КонецЕсли;
		Если Не БлокРазвернут Тогда 
			РазвернутьБлокМодуля(,, Истина);
		КонецЕсли;
	КонецЕсли;
	УдалитьФайлы(ИмяВременногоФайла); // Нельзя сразу делать, т.к. загрузка идет асинхронно
	Возврат Успех;

КонецФункции

//.
// Параметры:
//    ПолеТекстаПрограммы - ОбработкаОбъект.ирКлсПолеТекстаПрограммы - 
//    СсылкаСтроки - Структура - 
Процедура ВыполнитьКомандуИзСсылкиПослеПерехода(Знач ПолеТекстаПрограммы, Знач СтруктураСсылки) Экспорт
	Если Истина
		И СтруктураСсылки <> Неопределено
		И СтруктураСсылки.Команда = "ПодавитьПроверки" 
	Тогда
		СтрокаТекста = ПолеТекстаПрограммы.ПолеТекста.ПолучитьСтроку(ПолеТекстаПрограммы.мКонечнаяСтрока);
		Сообщить("Строка текста = " + СтрокаТекста);
		ИнструкцияПодавленияПроверки = ПолеТекстаПрограммы.ИнструкцияПодавленияПроверки();
		Если Найти(СтрокаТекста, ИнструкцияПодавленияПроверки) = 0 Тогда
			ТурбоКонф.Клавиша(Клавиши.End);
			ТурбоКонф.ВставитьТекст(" " + ИнструкцияПодавленияПроверки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СохранитьТочкиОстановаВФайл() 
	Попытка
		СтарыйИД = ТурбоКонф.ПолучитьRuntimeIdСтрокой(); // Тут часто возвникает ошибка - Время ожидания операции истекло. (Исключение из HRESULT: 0x80131505)
	Исключение
	КонецПопытки; 
	СтароеАктивноеОкно = ТурбоКонф.ПолучитьАктивноеОкно();
	ТурбоКонф.АльтКлавиша(Клавиши.F9); 
	
	// Такой способ не совместим с прикрепленным режимом окна в 8.3.24+
	//Окно = ТурбоКонф.ЖдатьОкно("Точки останова", 3000, Истина); // На 8.3.23- окно можно открываться очень долго, если есть точка останова из большого расширения (например ИР), которое не открыто
	//Если Окно = 0 Тогда
	//	Возврат "";
	//КонецЕсли;
	//
	ТурбоКонф.ЖдатьСменуТекущегоЭлемента(СтарыйИД, 3000, Истина); // На 8.3.23- окно можно открываться очень долго, если есть точка останова из большого расширения (например ИР), которое не открыто
	
	//СтарыйИД = ТурбоКонф.ПолучитьRuntimeId();
	ТурбоКонф.КонтролКлавиша(Клавиши.s);
	Окно = ТурбоКонф.ЖдатьОкно("Сохранить точки останова в файл", 2000, Истина);
	Если Окно = 0 Тогда
		Возврат "";
	КонецЕсли;
	// ТурбоКонф.ЖдатьСменуТекущегоЭлемента(СтарыйИД, 2000, Истина);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	// ТурбоКонф.ВставитьТекст(ИмяВременногоФайла); // Через буфер обмена
	ТурбоКонф.УстановитьЗначение(ИмяВременногоФайла);
	ТурбоКонф.Клавиша(Клавиши.Enter);
	НачМомент = ТекущаяДата();
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	Пока ТекущаяДата() - НачМомент < 2 Цикл
		Попытка
			ТекстовыйДокумент.Прочитать(ИмяВременногоФайла);
			Прервать;
		Исключение
		КонецПопытки;
		ТурбоКонф.Ждать(20);
	КонецЦикла;
	Если ПустаяСтрока(ТекстовыйДокумент.ПолучитьТекст()) Тогда
		УдалитьФайлы(ИмяВременногоФайла);
		Возврат "";
	КонецЕсли;
	Возврат ИмяВременногоФайла; 
КонецФункции

Функция ЗагрузитьТочкиОстановаИзФайлаВОткрытомОкнеТочекОстанова(ИмяФайла, СтарыйИД = Неопределено, СтароеАктивноеОкно = Неопределено)
	ТурбоКонф.КонтролКлавиша(Клавиши.o);
	Окно = ТурбоКонф.ЖдатьОкно("Загрузить точки останова из файла", 1000, Истина);
	Если Окно = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	// ТурбоКонф.ВставитьТекст(ИмяФайла); // Через буфер обмена
	ТурбоКонф.УстановитьЗначение(ИмяФайла);
	СтароеАктивноеОкно = ТурбоКонф.ПолучитьАктивноеОкно();
	ТурбоКонф.Клавиша(Клавиши.Enter);
	//СтарыйИД = ТурбоКонф.ПолучитьRuntimeId(); // Тут часто возникает ошибка - Время ожидания операции истекло. (Исключение из HRESULT: 0x80131505)

	// Такой способ не совместим с прикрепленным режимом окна в 8.3.24+
	//Окно = ТурбоКонф.ЖдатьОкно("Точки останова", 2000, Истина);
	//Если Окно = 0 Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	Если Не ЖдатьПотерюАктивностиОкна() Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка
		СтарыйИД = ТурбоКонф.ПолучитьRuntimeIdСтрокой(); // Тут часто возвникает ошибка - Время ожидания операции истекло. (Исключение из HRESULT: 0x80131505)
	Исключение
	КонецПопытки; 
	Возврат Истина;
КонецФункции

Процедура ТочкиОстановаИзРезультатовПоиска()
	Текст = ПолучитьВыделенныйТекст();
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = СохранитьТочкиОстановаВФайл();
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	ПодключениеИР = ПодключениеИР(, Ложь, Ложь); 
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	МодулиИР.ирКлиент.ДобавитьВФайлТочекОстановаРезультатыПоискаКонфигуратораЛкс(ИмяФайла, Текст);
	ЗагрузитьТочкиОстановаИзФайлаВОткрытомОкнеТочекОстанова(ИмяФайла);
КонецПроцедуры

// Если сработает, то сбрасывает выделение. Поэтому после выполения выделение переустанавливается.
// Поэтому настоятельно рекомендуется передавать НачалоВыделения и КонецВыделения
Процедура РазвернутьБлокМодуля(Знач НачалоВыделения = 0, Знач КонецВыделения = 0, Знач ВыделитьВсюСтроку = Ложь)
	
	ТурбоКонф.КонтролКлавиша(Клавиши.Add);
	Если Не ЗначениеЗаполнено(КонецВыделения) Тогда
		КонецВыделения = НачалоВыделения;
	КонецЕсли;
	Если ВыделитьВсюСтроку Или ТурбоКонф.ПолучитьВерсиюAPI() < 6 Тогда
		ТурбоКонф.Ждать(20);
		ТурбоКонф.ШифтКлавиша(Клавиши.End);
	Иначе 
		// Чтобы свернутый блок, внутри которого скрыта строка, развернулся
		ТурбоКонф.КонтролКлавиша(Клавиши.Left);
		ТурбоКонф.КонтролКлавиша(Клавиши.Right);

		// Неудобное позиционирование https://turboconf.ru/Tasks/8888
		Если ЗначениеЗаполнено(КонецВыделения) Тогда
			ТурбоКонф.ВыделитьТекст(НачалоВыделения, КонецВыделения);
		КонецЕсли;
		Если НачалоВыделения = КонецВыделения Тогда
			ТурбоКонф.КонтролКлавиша(Клавиши.W);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ОткрытьОкноВыражения(выхПолеТекстаПрограммы = Неопределено, выхВыражение = "")
	Если Не ЭтоДокумент() Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	выхПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь); // Для сохранения контекста в кэше 
	Если выхПолеТекстаПрограммы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	// ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта); // Так почему то не всегда затем получается заголовок модального окна
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	ТурбоКонф.ШифтКлавиша(Клавиши.F9);
	ЦелевойЗаголовок = "Выражение";
	Попытка
		ТурбоКонф.ЖдатьОкно(ЦелевойЗаголовок, 1000, Истина);
	Исключение
		Возврат Неопределено; 
	КонецПопытки;
	Если ЗначениеЗаполнено(ВыделенныйТекст) Тогда
		выхВыражение = ВыделенныйТекст;
	Иначе 
		выхВыражение = выхПолеТекстаПрограммы.мКонтекст;
	КонецЕсли;
	Если Прав(выхВыражение, 1) = "(" Тогда
		выхВыражение = выхВыражение + ")";
	КонецЕсли;
	// Окно сначала появляется, а затем берет фокус, даже не смотря на то, что оно модальное
	МоментНачала = ТекущаяДата();
	Пока ТекущаяДата() - МоментНачала = 0 Цикл
		Успех = Истина;
		Если ТурбоКонф.ПолучитьЗаголовокТекущегоОкна() = ЦелевойЗаголовок Тогда
			Прервать;
		КонецЕсли;
		Успех = Ложь;
		ТурбоКонф.Ждать(50);
	КонецЦикла;
	Возврат ПодключениеИР;
КонецФункции

Процедура ВычислитьВыражение()
	ТекстПоля = "";
	ПолеТекстаПрограммы = Неопределено; // ОбработкаОбъект.ирКлсПолеТекстаПрограммы
	ПодключениеИР = ОткрытьОкноВыражения(ПолеТекстаПрограммы, ТекстПоля); 
	Если ПодключениеИР = Неопределено Тогда
		ИмяМетода = "<Инициация>";
		Если ПолеТекстаПрограммы.мМетодМодуля <> Неопределено Тогда
			ИмяМетода = ПолеТекстаПрограммы.мМетодМодуля.Имя;
		КонецЕсли;
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Загружен контекст метода """ + ИмяМетода + """ для автодополнения в модальных окнах");
		Возврат;
	КонецЕсли;
	ШаблонВызова = ПолеТекстаПрограммы.ВычисляемыйКонтекстОтладчика();
	ТекстВызова = СтрЗаменить(СтрРазделить(ШаблонВызова, "(")[0], "*", "Стк");
	Если ПустаяСтрока(ТекстПоля) Тогда
		ТекстПоля = ТурбоКонф.ПолучитьЗначение();
	КонецЕсли;
	Если Не СтрНачинаетсяС(ТекстПоля, ТекстВызова) Тогда
		Выражение = ТекстВызова + "(Новый Структура(""Я"", " + ТекстПоля + "))";
		ТурбоКонф.ВставитьТекст(Выражение);
		ТурбоКонф.Ждать(50);
		ТурбоКонф.Клавиша(Клавиши.Enter);
		ТурбоКонф.ШифтКлавиша(Клавиши.Tab);
		ТурбоКонф.Ждать(50);
		ТурбоКонф.Клавиша(Клавиши.Add);
		ТурбоКонф.Ждать(50);
		ТурбоКонф.Клавиша(Клавиши.Down);
	КонецЕсли;
	ТурбоКонф.ШифтКлавиша(Клавиши.Tab);
	Если ЗначениеЗаполнено(ТекстПоля) Тогда
		ТурбоКонф.ВставитьТекст(ТекстПоля);
	КонецЕсли;
КонецПроцедуры

Процедура ВычислитьОписатьПараметрыМетода()
	ПолеТекстаПрограммы = Неопределено; // ОбработкаОбъект.ирКлсПолеТекстаПрограммы
	ПодключениеИР = ОткрытьОкноВыражения(ПолеТекстаПрограммы); 
	Если ПодключениеИР = Неопределено Или ПолеТекстаПрограммы.мМетодМодуля = Неопределено Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Команда применима только в редакторе модуля во время остановки отладки");
		Возврат;
	КонецЕсли;
	СтароеЗначениеБуфераОбмена = ТурбоКонф.ПолучитьБуферОбмена();
	ШаблонВызова = ПолеТекстаПрограммы.ВычисляемыйКонтекстОтладчика();
	ТекстВызова = СтрЗаменить(СтрРазделить(ШаблонВызова, "(")[0], "*", "ДокПар");
	ИменаПараметров = ПолеТекстаПрограммы.СтрокаИменПараметровМетода();
	Выражение = "Вычислить(" + ТекстВызова + "(""" + ИменаПараметров + """))";
	ТурбоКонф.ВставитьТекст(Выражение);
	ТурбоКонф.Ждать(50);
	ТурбоКонф.Клавиша(Клавиши.Enter);
	ТурбоКонф.ШифтКлавиша(Клавиши.Tab);
КонецПроцедуры

Процедура ОткрытьСписок()
	ТипЭлементаИнтерфейса = ПолучитьТипТекущегоЭлемента();
	Сообщить("ТипПоляОкна = " + ТипЭлементаИнтерфейса);
	Если Истина
		И ЗначениеЗаполнено(ТипЭлементаИнтерфейса) 
		И ТипЭлементаИнтерфейса <> ТипЭлемента.Неизвестный // ячейка таблицы
		И ТипЭлементаИнтерфейса <> ТипЭлемента.ЭлементСписка
	Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Команда доступна только для списков");
		Возврат;
	КонецЕсли;  
	
	//ТурбоКонф.КонтролКлавиша(Клавиши.Home);
	//ТекстПредСтроки = "";
	//МаксСтрок = 50;
	//Счетчик = 0;
	//ВесьТекст = Новый Массив;
	//Пока Истина Цикл
	//	Счетчик = Счетчик + 1;
	//	ТекстСтроки = ПолучитьВыделенныйТекст();
	//	Если ТекстПредСтроки = ТекстСтроки Тогда
	//		Прервать;
	//	КонецЕсли;
	//	ВесьТекст.Добавить(ТекстСтроки);
	//	Если Счетчик = МаксСтрок Тогда
	//		Прервать;
	//	КонецЕсли;
	//	ТекстПредСтроки = ТекстСтроки;
	//	ТурбоКонф.Клавиша(Клавиши.Down);
	//КонецЦикла;
	//УстановитьБуферОбмена(СтрСоединить(ВесьТекст, Символы.ПС));
	
	ТекстТекущейЯчейки = ТурбоКонф.ПолучитьИмяЭлемента();
	Сообщить("ТекстТекущейЯчейки="+ТекстТекущейЯчейки);
	ТекстыПолей = ТурбоКонф.ПолучитьЭлементыСписка(); // долго
	Если ТекстыПолей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	ИндексТекущегоЭлемента = ТекстыПолей.Найти(ТекстТекущейЯчейки);
	НажатьКлавишуЦикл(Клавиши.Down, ИндексТекущегоЭлемента);
	ПодключениеИР = ПодключениеИР();
	ВосстановитьОкноПриложения(ПодключениеИР);
	МодулиИР = МодулиИР(ПодключениеИР);
	ЗаписьТекста = Новый ЗаписьJSON;
	ЗаписьТекста.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьТекста, ТекстыПолей);
	ТекстыПолейСтрока = ЗаписьТекста.Закрыть();
	НачатьОжиданиеМодальныхОконПриложенияИР(МодулиИР);
	МодулиИР.ирКлиент.ОткрытьТаблицуИзМассиваИзСтрокиВнутрЛкс(ТекстыПолейСтрока, ТекстТекущейЯчейки);
	ИдентификаторПроцессаИР = МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс();
	ЗавершитьВызовВнешнегоОкнаАсинх(Ложь, ИдентификаторПроцессаИР);
	ОповеститьПользователяОВозобновлении();
	
КонецПроцедуры

Функция ПолучитьВыделенныйТекст(ТолькоВыделенный = Истина)
	// Еще есть ТурбоКонф.ПолучитьТекстТекущегоЭлемента()
	Текст = Неопределено;
	Если Не ТолькоВыделенный Тогда 
		Если Ложь 
			Или ТипЭлементаИнтерфейса = ТипЭлемента.Поле
			Или ТипЭлементаИнтерфейса = ТипЭлемента.ПолеСоСписком
		Тогда
			Текст = ТурбоКонф.ПолучитьЗначение();
		ИначеЕсли Ложь
			Или ТипЭлементаИнтерфейса = ТипЭлемента.ЭлементСписка
			Или ТипЭлементаИнтерфейса = ТипЭлемента.ЭлементМеню
			Или ТипЭлементаИнтерфейса = ТипЭлемента.Неизвестный
		Тогда
			Текст = ТурбоКонф.ПолучитьИмяЭлемента();
		КонецЕсли;
	КонецЕсли;
	Если Текст = Неопределено Тогда 
		ТекстСтарый = ТурбоКонф.ПолучитьБуферОбмена();
		ТурбоКонф.Копировать(); // Так дальше может возникать ошибка "Сбой при выполнении запрошенной операции с буфером обмена" 
		//ТурбоКонф.КонтролКлавиша(Клавиши.C); // Так даже 100 мс ожидания не всегда хватает для получения нового содержимого буфера
		ТурбоКонф.Ждать(100); // 50мс не хватает для первого в жизни окна вызова, например в ячейку журнала регистрации	
		Текст = ТурбоКонф.ПолучитьБуферОбмена(); 
		Если Текст = ТекстСтарый Тогда
			Текст = "";
		КонецЕсли;
	КонецЕсли;
	Сообщить("Текст " + ?(ТолькоВыделенный, "выделенный ", "") + "элемента интерфейса = " + Лев(Текст, 1000));
	Возврат Текст;
КонецФункции

Процедура ОтладитьОбъект()
	ТребоватьОтложеннуюОтладку = "Ложь";
	ПодключениеИР = ПодключениеИР(, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЦелевойЗаголовок = "Выражение";
	ТекстПоля = "";
	Если ТурбоКонф.ПолучитьЗаголовокТекущегоОкна() <> ЦелевойЗаголовок Тогда
		Если ОткрытьОкноВыражения(, ТекстПоля) = Неопределено Тогда
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), СтрШаблон("Команда применима только в редакторе модуля во время остановки отладки и в окне ""%1""", ЦелевойЗаголовок));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтароеЗначениеБуфераОбмена = ТурбоКонф.ПолучитьБуферОбмена();
	МодулиИР = МодулиИР(ПодключениеИР);
	ШаблонВызова = МодулиИР.ирКлиент.ВычисляемыйКонтекстОтладчикаЛкс();
	ТекстВызова = СтрЗаменить(ШаблонВызова, "*()", "От");
	// ТекстыЯчеек = ТурбоКонф.ПолучитьЭлементыСписка(); // Нельзя тут вызывать, т.к. оно снимает выделение в поле ввода
	Если ПустаяСтрока(ТекстПоля) Тогда
		ТекстПоля = ТурбоКонф.ПолучитьЗначение();
	КонецЕсли;
	Если Не СтрНачинаетсяС(ТекстПоля, ТекстВызова) Тогда
		ДобавкаЗапятых = ",,";
		Если Найти(ТекстПоля, ",") = 0 Тогда
			ДобавкаЗапятых = ДобавкаЗапятых + ",";
		КонецЕсли;
		Выражение = ТекстВызова + "(" + ТекстПоля + ДобавкаЗапятых + " " + ТребоватьОтложеннуюОтладку + ")";
		ТурбоКонф.ВставитьТекст(Выражение);
		ТурбоКонф.Ждать(100);
		ТурбоКонф.Клавиша(Клавиши.Enter);
		ТурбоКонф.ШифтКлавиша(Клавиши.Tab);
	КонецЕсли;
	Успех = Ложь;
	МаксЖдать = 1;
	текущаяДата = текущаяДата(); 
	//ИнфоПроцесса();
	Пока текущаяДата() - текущаяДата <= МаксЖдать Цикл
		// ЦельВычисления = ПолучитьВыделенныйТекст(Ложь);
		// ТекстыЯчеек = ТурбоКонф.ПолучитьЭлементыСписка();
		ТурбоКонф.Клавиша(Клавиши.Add);
		Попытка
			ТекстыЯчеек = ТурбоКонф.ПолучитьТекстТаблицы();
		Исключение
			ТекстыЯчеек = Неопределено;
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;
		Если ТипЗнч(ТекстыЯчеек) = Тип("Массив") Тогда
			// Старый вариант
			ЦельВычисления = СтрСоединить(ТекстыЯчеек, Символы.Таб);
		Иначе
			ЦельВычисления = "" + ТекстыЯчеек;
			ТекстыЯчеек = СтрРазделить(ЦельВычисления, Символы.Таб);
		КонецЕсли;
		Сообщить("ЦельВычисления = " + ЦельВычисления);
		Если ТекстыЯчеек.Количество() = 3 Тогда
			СнимокОбъекта = ТекстыЯчеек[1];
			Сообщить("Снимок объекта = " + СнимокОбъекта);
			Если Найти(НРег(СнимокОбъекта), "открыть объект для отладки") > 0 Тогда
				НачатьОжиданиеМодальныхОконПриложенияИР(МодулиИР);
				МодулиИР.ирКлиент.ОтладитьОтложенныйОбъектЛкс(СнимокОбъекта);
				ИдентификаторПроцессаИР = МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс();
				ЗавершитьВызовВнешнегоОкнаАсинх(Ложь, ИдентификаторПроцессаИР);
				ОповеститьПользователяОВозобновлении();
				Успех = Истина;
			КонецЕсли;
		КонецЕсли;
		ТурбоКонф.Ждать(200);
	КонецЦикла;
	Если Не Успех Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Не дождались снимка объекта. Либо повторите команду после его появления, либо активируйте окно отлаживаемого приложения.", 5000);
	КонецЕсли;
	// УстановитьБуферОбмена(СтароеЗначениеБуфераОбмена); // Почему то после этого перестает работать чтение из буфера обмена
КонецПроцедуры

//&ЗапроситьИнформациюОДокументе
Процедура ТочкаОстанова()
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерСтроки = ПолеТекстаПрограммы.ПолучитьНомерТекущейСтроки();
	СтрокаТекста = СокрЛП(ПолеТекстаПрограммы.ПолеТекста.ПолучитьСтроку(НомерСтроки));
	ТурбоКонф.КонтролШифтКлавиша(Клавиши.F10);
	МодулиИР = МодулиИР(ПодключениеИР);
	НомерВерсииПлатформы = МодулиИР.ирКэш.НомерВерсииПлатформыЛкс();
	Если НомерВерсииПлатформы  < 803024 Тогда
		ТекстЭлемента = "Точка останова с условием...";
		ЗаголовокОкна = "Условие останова";
	Иначе 
		ТекстЭлемента = "Точка останова с параметрами...";
		ЗаголовокОкна = "Параметры точки останова";
	КонецЕсли;
	Если Не ТурбоКонф.НайтиЭлементПоИмени(ТекстЭлемента, "элемент меню") Тогда 
		//ТурбоКонф.Клавиша(Клавиши.Escape);
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Команда применима только в редакторе модуля НЕ во время отладки");
		Возврат;
	КонецЕсли;
	НачалоПредставления = """$";
	ТурбоКонф.КликнутьПоЭлементу(ТекстЭлемента, "элемент меню", 0, Ложь);
	ТурбоКонф.ЖдатьОкно(ЗаголовокОкна, 1000, Истина);
	СтрокаТекста = НачалоПредставления + СтрЗаменить(СтрокаТекста, """", "'") + """<>1";
	Если НомерВерсииПлатформы  < 803024 Тогда
		СтарыйТекст = ТурбоКонф.ПолучитьТекстТекущегоЭлемента();
		РазрешитьИзменения = ПустаяСтрока(СтарыйТекст) Или СтрНачинаетсяС(СтарыйТекст, НачалоПредставления);
		Если РазрешитьИзменения Тогда
			Если СтрНачинаетсяС(СтарыйТекст, НачалоПредставления) Тогда
				ТурбоКонф.Клавиша(Клавиши.Escape);
				ТурбоКонф.Клавиша(Клавиши.F9);
				Возврат;
			КонецЕсли;
			ТурбоКонф.УстановитьЗначение(СтрокаТекста);
			ТурбоКонф.КонтролКлавиша(Клавиши.Enter);
		КонецЕсли;
	Иначе 
		ТурбоКонф.Клавиша(Клавиши.Tab);
		БылаВключена = ТурбоКонф.ПолучитьСостояниеФлажка(); 
		Если Не БылаВключена Тогда
			ТурбоКонф.УстановитьСостояниеФлажка(Истина);
		КонецЕсли;
		Сообщить("БылВключен=" + БылаВключена);
		ТурбоКонф.Клавиша(Клавиши.Tab);
		СтарыйТекст = ТурбоКонф.ПолучитьТекстТекущегоЭлемента();
		РазрешитьИзменения = ПустаяСтрока(СтарыйТекст) Или СтрНачинаетсяС(СтарыйТекст, НачалоПредставления);
		Если РазрешитьИзменения Тогда
			Если ПустаяСтрока(СтарыйТекст) Тогда
				ТурбоКонф.ВставитьТекст(СтрокаТекста);
			КонецЕсли;
			ТурбоКонф.КликнутьПоЭлементу("При выполнении условия:", "флажок", 0, Ложь);
			Если Не БылаВключена Или Не РазрешитьИзменения Тогда
				ТурбоКонф.КликнутьПоЭлементу("При выполнении условия:", "флажок", 0, Ложь);
			КонецЕсли;
			ТурбоКонф.ШифтКлавиша(Клавиши.Tab);
			ТурбоКонф.КонтролКлавиша(Клавиши.Enter);
			Если БылаВключена Тогда
				ТурбоКонф.Клавиша(Клавиши.F9);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//.
// Параметры:
//    МодулиИР - Application {V83.Application}, Неопределено - 
Процедура НачатьОжиданиеМодальныхОконПриложенияИР(МодулиИР) Экспорт
	ОповеститьПользователяОПриостановке();
	Опции = Новый Структура("УправлениеМодальнымиОкнами,PIDКлиента,КлассОкна,ПриНахожденииВызыватьИсключение,ПриНахожденииПрерватьОжидание,ПриНахожденииПрерватьВыполнение", 
		Истина, МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс(), "V8NewLocalFrameBaseWnd", Ложь, Ложь, Ложь);
	ИдентификаторПроцессаИР = МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс();
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх("", 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.ГлавноеОкно, Истина, ИдентификаторПроцессаИР, Опции);
КонецПроцедуры

Функция ЗакрытьПриложениеИР(Знач ИДКонфигуратора = 0, Знач Причина = "по запросу пользователя", Знач БезСохраненияНастроек = Ложь) Экспорт 
	Если ЗначениеЗаполнено(Конфигуратор) Тогда
		ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	КонецЕсли;
	ИДПриложения = 0;
	ПодключениеИР = ПодключениеИРИзКэша(ИДКонфигуратора, ИДПриложения);
	Сообщить("ПодключениеИР=" + ПодключениеИР);
	Если ПодключениеИР = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	// Делаем окно видимым, чтобы приложение штатно завершилось и сохранились настройки, включая положения окон
	ВосстановитьОкноПриложения(ПодключениеИР);
	
	// Вопросы не отображаются https://www.hostedredmine.com/issues/967021
	// Почему то не отправляет формам команду закрытия
	// ПодключениеИР.ЗавершитьРаботуСистемы(); 

	Попытка
		ВсеФормыЗакрыты = МодулиИР.ирКлиент.ЗакрытьВсеФормыЛкс();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
		ВсеФормыЗакрыты = Истина;
	КонецПопытки;
	Если Не ВсеФормыЗакрыты Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Закройте все окна в приложении " + НазваниеПриложения() + " и повторите команду");
		МодулиИР.ирОбщий.СообщитьЛкс("Закройте все окна");
		Возврат Ложь;
	КонецЕсли;
	МодулиИР = Неопределено;
	СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР", Неопределено);
	СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИД", Неопределено);
	СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.Кэш", Неопределено);
	СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИмяКонфигурации", Неопределено);
	СохранитьЗначениеСеансаКонфигуратора("ПолеТекстаПрограммы", Неопределено);
	ПодключениеИР.ЗавершитьРаботуСистемы(Ложь);
	ПроцессОС = ПолучитьПроцессОС(ИДПриложения);
	Причина = ""; // Не сильно полезная информация
	Если ПроцессОС <> Неопределено Тогда
		Если БезСохраненияНастроек Тогда
			УбитьПроцесс(ПроцессОС, Причина);
		Иначе
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Приложение " + НазваниеПриложения() + " завершено " + Причина + ". На его отключение от базы уйдет несколько секунд.", 4000);
		КонецЕсли;
	Иначе
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Приложение " + НазваниеПриложения() + " завершено " + Причина, 3000);
	 КонецЕсли;
	Возврат Истина;
КонецФункции

// Внешний вызов
Процедура ПередПолучениемДанныхТ9(Параметры, Отказ, СтандартнаяОбработка)
	Если ПроверитьРазрешениеИР(Отказ) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;  
КонецПроцедуры

//&ЗапроситьИнформациюОДокументе

// см. СобытияМодуль.ПриПолученииДанныхТ9 
Процедура ПриПолученииДанныхТ9(Параметры)
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РазрешитьОткрытиеОкон = Ложь;
	НомерСтроки = 0;
	НомерКолонки = 0;
	ТекстМодуля = Параметры.ТекстМодуля;
	ПозицияВТексте = Параметры.Позиция;  
	ЭтоДокумент = Параметры.ЭтоДокумент;
	Попытка
		ИмяКонфигурации = Параметры.ИмяКонфигурации;
		Сообщить("ИмяКонфигурации=" + ИмяКонфигурации);
	Исключение
	КонецПопытки;
	ПодключениеИР = ПодключениеИР(, Ложь, Ложь, ЭтоДокумент);
	Сообщить("Время обновления подключения ИР " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	// ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта); // 55мс нужно в случае запуска приложения ИР
	Сообщить("Активация модулей ИР " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	ОбновленаСтруктураФормы = Ложь;
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте,,,, ЭтоДокумент, Истина, ИмяКонфигурации, ОбновленаСтруктураФормы);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТаблицаТипов = ПолеТекстаПрограммы.ТаблицаТиповТекущегоВыражения(Ложь, Ложь, Истина, Истина);
	Если Не ОбновленаСтруктураФормы И ПроверитьОбновитьСтруктуруФормы(ПолеТекстаПрограммы) Тогда
		ТаблицаТипов = ПолеТекстаПрограммы.ТаблицаТиповТекущегоВыражения(Ложь, Ложь, Истина, Истина);
	КонецЕсли;
	КоличествоТипов = ТаблицаТипов.Количество();
	Сообщить("Расчет типов контекста " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПолеТекстаПрограммы.ЗаполнитьТаблицуСлов(ТаблицаТипов,,, РазрешитьОткрытиеОкон, Ложь, Истина, Истина);
	ТипКонтекста = ПолеТекстаПрограммы.ИмяТипаКонтекста();
	//Если Найти(ТипКонтекста, "+") > 0 Тогда
	//	Попытка
	//		ИменаТипов = ПолеТекстаПрограммы.ПредставлениеМассиваСтруктурТипов(ПолеТекстаПрограммы.мТаблицаТиповКонтекста,, 30);
	//	Исключение
	//		// ИР 7.00-
	//		ИменаТипов = "";
	//	КонецПопытки;
	//	Если ЯзыкПрограммы = 0 Тогда
	//		ДобавкаСообщения = "Во встроенном языке это делается проверкой типа https://www.hostedredmine.com/issues/970771 или присвоением с указанием типа в комментарии https://www.hostedredmine.com/issues/967806";
	//	Иначе
	//		ДобавкаСообщения = "В языке запросов это делается через ВЫРАЗИТЬ(<Выражение> КАК <Тип>)";
	//	КонецЕсли;
	//	ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Чтобы увидеть слова другого типа, сузьте тип выражения до: " + ИменаТипов + Символы.ПС + ДобавкаСообщения, 4000);
	//КонецЕсли;
	Сообщить("Заполнение слов контекста " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КэшНаборовСлов = ВосстановитьЗначениеСеансаКонфигуратора("ПодключениеИР.Кэш");
	Если КэшНаборовСлов = Неопределено Тогда
		КэшНаборовСлов = Новый Соответствие();
	КонецЕсли;
	ПереданоСлов = 0;
	ВыведеноСлов = 0;
	Словари = Новый Массив;
	Для каждого КлючИЗначение Из ПолеТекстаПрограммы.мНаборыСлов Цикл
		ИмяНабораСлов = КлючИЗначение.Ключ;
		Если КэшНаборовСлов[ИмяНабораСлов] = Неопределено Тогда
			ТаблицаСлов = НаборСловИзИР(ПолеТекстаПрограммы, ИмяНабораСлов);
			ТурбоКонф.УстановитьСловарьT9(ИмяНабораСлов, ТаблицаСлов);
			КэшНаборовСлов[ИмяНабораСлов] = ТаблицаСлов.Количество();
			ПереданоСлов = ПереданоСлов + КэшНаборовСлов[ИмяНабораСлов];
		КонецЕсли;
		ВыведеноСлов = ВыведеноСлов + КэшНаборовСлов[ИмяНабораСлов];
		Словари.Добавить(ИмяНабораСлов);
	КонецЦикла;
	СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.Кэш", КэшНаборовСлов);
	ТаблицаСлов = НаборСловИзИР(ПолеТекстаПрограммы);
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Элементы", ТаблицаСлов);
	ПараметрыЗаполнения.Вставить("ДобавляемыеСловари", Словари);
	ПараметрыЗаполнения.Вставить("ТипКонтекста", ТипКонтекста);
	Попытка
		ПараметрыЗаполнения.Вставить("ЭтоКонтекстМодуля", ПолеТекстаПрограммы.мЭтоЛокальныйКонтекстТаблицыСлов);
	Исключение
		// Старая версия ИР
		ПараметрыЗаполнения.Вставить("ЭтоКонтекстМодуля", ТипКонтекста = "Локальный");
	КонецПопытки;
	ЛиДобавитьШаблоны = ЯзыкПрограммы = 0 И ПараметрыЗаполнения.ЭтоКонтекстМодуля И Не ПолеТекстаПрограммы.мЭтоОбъявлениеПсевдонима;
	Попытка
		Параметры.ДобавитьШаблоны = ЛиДобавитьШаблоны;
	Исключение
		// Старая версия Турбоконф
	КонецПопытки;
	ТурбоКонф.УстановитьДанныеT9(ПараметрыЗаполнения);
	ПоказатьСообщенияПриложенияИР(ПолеТекстаПрограммы);
	КоличествоСловВТаблице = ТаблицаСлов.Количество();
	ПереданоСлов = ПереданоСлов + КоличествоСловВТаблице;
	ВыведеноСлов = ВыведеноСлов + КоличествоСловВТаблице;
	Сообщить("Время передачи " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	Сообщить("Выражение = " + ПолеТекстаПрограммы.мКонтекст + ". Найдено типов " + КоличествоТипов + ". Слов передано " + ПереданоСлов + ", выведено " + ВыведеноСлов + ". Основной тип = " + ТипКонтекста);
	КлючХранения = "" + МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс() + ".ДатаОбновленияКэшаМодулейОтображалась";
	Если ТурбоКонф.ВосстановитьЗначениеСеанса(КлючХранения) = Неопределено Тогда
		ДатаОбновленияКэшаМодулей = МодулиИР.ирОбщий.ДатаОбновленияКэшаМодулейЛкс();
		ДобавкаТекста = "";
		ИмяОбработчика = "";
		Если Не ЗначениеЗаполнено(ДатаОбновленияКэшаМодулей) Тогда
			ДобавкаТекста = ПодсказкаОбновленияКэшаМодулей();
			ИмяОбработчика = "ОбновитьКэшМодулей";
		КонецЕсли;
		ВерсияИР = МодулиИР.ирКэш.НомерВерсииПодсистемыИРЛкс();
		Сообщить("Номер версии ИР = " + ВерсияИР);
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Актуальность кэша модулей " + НазваниеПриложения() + " - " + ДатаОбновленияКэшаМодулей + "." + ДобавкаТекста, 5000,
			ЭтотОбъект, ИмяОбработчика);
		ТурбоКонф.СохранитьЗначениеСеанса(КлючХранения, 1);
		СписокРекомендаций = Новый Массив;
		Если ЛиДоступнаЧистаяПодсказка() Тогда
			ИмяНастройки = "T9AlwaysShowOnCtrlSpace"; 
			Если Не ТурбоКонф.ПолучитьЗначениеНастройки(ИмяНастройки) Тогда
				Если ЛиДоступнаУстановкаПользовательскихНастроек() Тогда
					ТурбоКонф.УстановитьЗначениеНастройкиПрограммы(ЭтотОбъект, ИмяНастройки, Истина, "Нужно для полной замены подсказки, если в базе разрешено приложение ИР");
				Иначе
					// Есть еще одноименное значение сеанса. Оно устанавливается в УстановитьРежимЗаменыШтатнойПодсказки()
					СписокРекомендаций.Добавить("Включить ""Разработчикам/ Вседа показывать подсказку Т9 вместо штатной подсказки""");
				КонецЕсли; 
			КонецЕсли;
			Если Не ТурбоКонф.ПолучитьЗначениеНастройки("CloseDDEServerWindow") Тогда
				СписокРекомендаций.Добавить("Включить ""Разработчикам/ Автоматически закрывать окно DDE Server Window""");
			КонецЕсли; 
			ЛиАвтоПодсказкаКонфигуратора = ЛиАвтоПодсказкаКонфигуратора(МодулиИР);
			Если ЛиАвтоПодсказкаКонфигуратора Тогда
				ПредложитьУстановитьАвтоподсказку(Ложь);
				//СписокРекомендаций.Добавить("Отключить настройку конфигуратора " + НазваниеНастройкиАвтоподсказкаКонфигуратора());
			КонецЕсли;
		Иначе
			Если ТурбоКонф.ПолучитьЗначениеНастройки("T9AssistSmartFieldsEnabled") Тогда
				СписокРекомендаций.Добавить("Отключить ""Редактирование/ Подсказывать имена колонок""");
			КонецЕсли; 
		КонецЕсли;
		Если СписокРекомендаций.Количество() > 0 Тогда
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Рекомендуется изменить настройки Турбоконф:" + Символы.ПС + "- " + СтрСоединить(СписокРекомендаций, Символы.ПС + "- "),
				20000, ЭтотОбъект, "ОткрытьНастройки");
		КонецЕсли;
		ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта);
	КонецЕсли;
КонецПроцедуры  

//.
// Параметры:
//    ПолеТекстаПрограммы - ОбработкаОбъект.ирКлсПолеТекстаПрограммы, Неопределено - 
Процедура ПоказатьСообщенияПриложенияИР(Знач ПолеТекстаПрограммы) Экспорт
	Попытка
		СообщенияПользователю = ПолеТекстаПрограммы.ПрочитатьУдалитьСообщенияПользователю();
	Исключение
		// ИР 7.26-
		СообщенияПользователю = "";
	КонецПопытки;
	Если ЗначениеЗаполнено(СообщенияПользователю) Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление("Приложение " + НазваниеПриложения(), СообщенияПользователю, 5000); 
	КонецЕсли;
КонецПроцедуры  

Процедура ОткрытьНастройки(Параметры = Неопределено) Экспорт
	Попытка
		ТурбоКонф.ОткрытьНастройки("~Dev");
	Исключение 
		// < 6.1.8887.43036
		ТурбоКонф.ОткрытьНастройки();
	КонецПопытки;
КонецПроцедуры

// .
// Параметры:
//    МодулиИР - Application {V83.Application}, Неопределено - нужно передавать чтобы настройка считалась корректно в сложных конфигурациях, а иначе она может считаться из неправильного файла
// Возвращаемое значение:
//    Неопределено - 
Функция ЛиАвтоПодсказкаКонфигуратора(МодулиИР) Экспорт
	Если МодулиИР <> Неопределено Тогда
		ИмяПрофайлаНастроек = МодулиИР.ирКэш.КаталогИзданияПлатформыВПрофилеЛкс(Ложь) + "\1cv8.pfl";
	КонецЕсли;
	Попытка
		ЗначениеНастройки = ТурбоКонф.ПолучитьЗначениеНастройкиКонфигуратора(Конфигуратор.ГлавноеОкно, "PointAutoAssist", ИмяПрофайлаНастроек); // https://turboconf.ru/Tasks/8816
	Исключение
		// 6.1.8855.39000-
		Возврат Неопределено;
	КонецПопытки;
	//ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//ТекстовыйДокумент.Прочитать(ИмяПрофайлаНастроек);
	//ЗначениеНастройки = МодулиИР.ирОбщий.ТекстМеждуМаркерамиЛкс(ТекстовыйДокумент.ПолучитьТекст(), "{""PointAutoAssist""," + Символы.ПС + "{""B"",", "}", Ложь);
	ЛиАвтоПодсказкаКонфигуратора = ЗначениеНастройки = "1";
	Возврат ЛиАвтоПодсказкаКонфигуратора;
КонецФункции

Функция НазваниеНастройкиАвтоподсказкаКонфигуратора()
	Возврат """Модули/ Редактирование/ Автоматическая подсказка при наборе '.'""";
КонецФункции

Функция ЛиДоступнаЧистаяПодсказка() Экспорт
	Возврат ТурбоКонф.ПолучитьВерсиюТурбоКонф() >= "6.1.8855.39060";
КонецФункции 

Функция ЛиДоступнаУстановкаПользовательскихНастроек() Экспорт
	Возврат ТурбоКонф.ПолучитьВерсиюТурбоКонф() >= "6.1.8892.26906";
КонецФункции

Функция ПредложитьУстановитьАвтоподсказку(Знач ЛиВключить) Экспорт
	Если Не ТурбоКонф.НайтиЭлементПоИмени("Сервис", "кнопка") Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ЛиВключить Тогда
		НазваниеДействия = "Включить";
	Иначе 
		НазваниеДействия = "Отключить";
	КонецЕсли;
	ПараметрыОбработчика = Новый Структура("ЛиВключить", ЛиВключить);
	ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), НазваниеДействия + " автоподсказку конфигуратора?
	|Все модули будут свернуты!", 10000, ЭтотОбъект, "ОбработчикУстановитьАвтоподсказкуКонфигуратора", ПараметрыОбработчика);
	Возврат Истина;
КонецФункции

Процедура ОбработчикУстановитьАвтоподсказкуКонфигуратора(Параметры) Экспорт
	УстановитьАвтоподсказкуКонфигуратора(Параметры.ЛиВключить);
КонецПроцедуры

Функция УстановитьАвтоподсказкуКонфигуратора(ЛиВключить) Экспорт
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	Если Не ТурбоКонф.НайтиЭлементПоИмени("Сервис", "кнопка") Тогда
		Возврат Ложь;
	КонецЕсли;
	ИмяЭлемента = "Сервис";
	ТурбоКонф.КликнутьПоЭлементу("Сервис", "кнопка", 0, Ложь);
	Если ТурбоКонф.ПолучитьИмяЭлемента() <> ИмяЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	ИмяЭлемента = "Параметры...";
	//ТурбоКонф.КликнутьПоЭлементу(ИмяЭлемента, "кнопка", 0, Ложь); // Почему то не работает, хотя в Мультиметка777238164 работает
	ТурбоКонф.Клавиша(Клавиши.Up);
	Если ТурбоКонф.ПолучитьИмяЭлемента() <> ИмяЭлемента Тогда
		Возврат Ложь;
	КонецЕсли;
	ТурбоКонф.Клавиша(Клавиши.Enter);
	ТурбоКонф.ЖдатьСменуАктивногоОкна(ТурбоКонф.ПолучитьАктивноеОкно(), 1000, Ложь);
	ТурбоКонф.Ждать(100);
	ТурбоКонф.КликнутьПоЭлементу("Модули", "элемент вкладки", 0, Ложь);
	ТурбоКонф.КликнутьПоЭлементу("Контекстная подсказка", "элемент вкладки", 0, Ложь);
	Если Не ТурбоКонф.УстановитьФокусНаЭлемент("Автоматическая подсказка при наборе "".""", "флажок") Тогда
		ТурбоКонф.КонтролКлавиша(Клавиши.Escape);
		Возврат Ложь;
	КонецЕсли; 
	Если ТурбоКонф.ПолучитьСостояниеФлажка() <> ЛиВключить Тогда
		ТурбоКонф.УстановитьСостояниеФлажка(ЛиВключить);
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "" + ?(ЛиВключить, "Включена", "Отключена") + " автоподсказка конфигуратора. Поэтому все модули свернуты.", 5000);
	КонецЕсли;
	ТурбоКонф.КонтролКлавиша(Клавиши.Enter);
	Возврат Истина;
КонецФункции

Функция НаборСловИзИР(ПолеТекстаПрограммы, ИмяНабораСлов = "")
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСлов = ПолеТекстаПрограммы.ТаблицаСловВJSON(ИмяНабораСлов);
	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(ТекстСлов);
	ТаблицаСлов = ПрочитатьJSON(Чтение);
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Результат = Новый Массив; 
	Если ТаблицаСлов.Количество() > 0 Тогда
		Попытка
			Пустышка = ТаблицаСлов[0].Приоритет;
			ЕстьПриоритет = Истина;
		Исключение 
			// ИР 7.16-
			ЕстьПриоритет = Ложь;
		КонецПопытки;
	КонецЕсли;
	Для Каждого СтрокаСлова Из ТаблицаСлов Цикл
		ЭлементСписка = Новый Соответствие();
		ЭлементСписка.Вставить("Представление", СтрокаСлова.Слово);
		ЭлементСписка.Вставить("Фильтр", СтрокаСлова.Слово);
		ЭлементСписка.Вставить("ЭтоМетод", СтрокаСлова.ЛиМетод);
		ЭлементСписка.Вставить("ВозвращаетЗначение", СтрокаСлова.ЛиРез);
		ЭлементСписка.Вставить("Тип", СтрокаСлова.Тип);
		ЭлементСписка.Вставить("ПредполагаемоеЗначение", Не СтрокаСлова.ЛиТочный);
		ЭлементСписка.Вставить("АвтоТочкаСЗапятойОтключена", Не СтрокаСлова.ЛиМетод Или ЗначениеЗаполнено(СтрокаСлова.Тип));
		ЭлементСписка.Вставить("Приоритет", 0);
		ЭлементСписка.Вставить("АвтоперемещениеКурсораОтключено", Ложь);
		ЭлементСписка.Вставить("ИзКонтекста", Истина);
		ЭлементСписка.Вставить("ЕстьПараметры", Истина);
		Если ЕстьПриоритет Тогда
			ЭлементСписка.Вставить("Приоритет", СтрокаСлова.Приоритет);
		КонецЕсли;
		Результат.Добавить(ЭлементСписка);
	КонецЦикла;
	Сообщить("Время передачи набора слов """ + ИмяНабораСлов + """ = " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	Возврат Результат; 
КонецФункции

// Функция - Поле текста программы ИР
//
// Параметры:
//  ПодключениеИР					 - 	 - 
//  ТекстМодуля						 - 	 - 
//  Позиция0Поле					 - Число - с 0; если 0, то текущий документ получается заново
//  ВыделенныйТекст					 - 	 - 
//  ПереходитьВоВложенныйКонтекст	 - 	 - 
//  КакВызовМетода					 - 	 - 
//  ЭтоДокумент						 - 	 - 
//  ЭтоАвтодополнение				 - 	 - 
//  ИмяКонфигурации					 - 	 - 
//  выхОбновленаСтруктураФормы		 - 	 - 
//  выхИмяРасширения				 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолеТекстаПрограммыИР(Знач ПодключениеИР, Знач ТекстПоля = "", Знач Позиция0Поле = 0, Знач ВыделенныйТекст = "", ПереходитьВоВложенныйКонтекст = Истина, Знач КакВызовМетода = Неопределено,
	Знач ЭтоДокумент = Истина, Знач РазрешитьПоследнийДокумент = Ложь, Знач ИмяКонфигурации = "", выхОбновленаСтруктураФормы = Ложь, выхИмяРасширения = "")

	ТекстМодуля = ТекстПоля;
	ПозицияВТексте = Позиция0Поле;
	МоментЗапускаОбщий = ТекущаяУниверсальнаяДатаВМиллисекундах();
	МоментЗапуска = МоментЗапускаОбщий;
	Если ПустаяСтрока(ЗаголовокОкна) Тогда
		ЗаголовокОкна = ТурбоКонф.ПолучитьЗаголовокТекущегоОкна();
	КонецЕсли;
	Сообщить("-ЗаголовокОкна = " + ЗаголовокОкна);
	Если ЭтоДокумент И ЗаголовокОкна <> "Параметры точки останова" Тогда
		Попытка
			Если ПозицияВТексте > 0 Тогда
				ТекущийДокумент = Конфигуратор.ТекущийДокумент;
			Иначе 
				ТекущийДокумент = ТурбоКонф.ИдентифицироватьТекущийДокумент();
			КонецЕсли;
		Исключение
			ТекущийДокумент = Неопределено;
		КонецПопытки;
		Если Истина
			И ТекущийДокумент <> Неопределено 
			//И ТекущийДокумент.ТипДокумента <> "СлужебныеСообщения" 
			//И ТекущийДокумент.ТипДокумента <> "Шаблон"
			//И ТекущийДокумент.ТипДокумента <> "Макет"
		Тогда
			ЗаголовокДокумента = ТекущийДокумент.Заголовок;
			ИмяКонфигурации = ТекущийДокумент.ИмяКонфигурации;
		КонецЕсли;
	ИначеЕсли РазрешитьПоследнийДокумент Тогда
		Попытка
			ПоследнийДокумент = Конфигуратор.ПоследнийДокумент;
		Исключение
			ПоследнийДокумент = Неопределено;
		КонецПопытки;
		Если ПоследнийДокумент <> Неопределено Тогда
			ЗаголовокДокумента = ПоследнийДокумент.Заголовок;
			ИмяКонфигурации = ПоследнийДокумент.ИмяКонфигурации;
			ТекстМодуля = ПоследнийДокумент.Текст;
			ПозицияВТексте = ПоследнийДокумент.Позиция;
		КонецЕсли;
	КонецЕсли;
	ПолноеИмяМодуля = "";
	КлючКэша = "ПолеТекстаПрограммы";
	ПолеТекстаПрограммы = ВосстановитьЗначениеСеансаКонфигуратора(КлючКэша);
	Попытка
		Пустышка = ПолеТекстаПрограммы.мИмяМодуля; 
	Исключение
		ПолеТекстаПрограммы = Неопределено;
	КонецПопытки;
	Если ПолеТекстаПрограммы = Неопределено Тогда
		МодулиИР = МодулиИР(ПодключениеИР);
		ПолеТекстаПрограммы = МодулиИР.ирКэш.ПолеТекстаПрограммы(ЯзыкПрограммы);
		СохранитьЗначениеСеансаКонфигуратора(КлючКэша, ПолеТекстаПрограммы);
		// Сообщить("ПолеТекстаПрограммы0 " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
		// МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	Если Ложь
		Или ЗаголовокОкна = "Запрос" 
		Или ЗаголовокОкна = "Произвольное выражение" 
		Или ЗаголовокОкна = "Динамический список" 
		Или ЗаголовокОкна = "Ограничение доступа"
		Или ПолеТекстаПрограммы.ЛиТекстЯзыкаЗапросовЛкс(Лев(ТекстМодуля, 1000))
	Тогда
		ЯзыкПрограммы = 1;
	Иначе
		ЯзыкПрограммы = 0;
	КонецЕсли;
	ПолеТекстаПрограммы.ЯзыкПрограммы = ЯзыкПрограммы;
	Если Истина
		И ЯзыкПрограммы = 0
		И (ЭтоДокумент Или РазрешитьПоследнийДокумент)
	Тогда
		ПередатьИзмененияМодулей(ПодключениеИР, ПолеТекстаПрограммы);
		ПолноеИмяМодуля = ИмяМодуляДокумента(ПодключениеИР, ТекстМодуля, ИмяКонфигурации, ЗаголовокДокумента, Не РазрешитьПоследнийДокумент, выхИмяРасширения);
		Если ПолноеИмяМодуля = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Сообщить("-Определение имени модуля " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Сообщить("-Активный модуль = "+ ПолноеИмяМодуля);
	// Основное время уходит на передачу большого текста. 10к строк передаются 10мс
	//ПолеТекстаПрограммы.мСтарыйОригинальныйТекст = ТекстМодуля; // Гипотеза не подтвердилась - Для ускорения передаем через свойство, а не параметр, т.к. через параметр потом измененное снаружи свойство обратно поедет
	Попытка
		ПолеТекстаПрограммы.ПрочитатьУдалитьСообщенияПользователю();
	Исключение
		// ИР 7.26-
	КонецПопытки;
	
	Сообщить("-Передача текста модуля " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах(); 

	ПолеТекстаПрограммы.УстановитьТекст(ТекстМодуля, Ложь,, Ложь, ПолноеИмяМодуля,, ПозицияВТексте + 1, ПозицияВТексте + 1 + СтрДлина(ВыделенныйТекст));
	
	Сообщить("-Подготовка структуры модуля " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПоказатьСообщенияПриложенияИР(ПолеТекстаПрограммы);
	Если ЭтоДокумент Тогда
		выхОбновленаСтруктураФормы = ПроверитьОбновитьСтруктуруФормы(ПолеТекстаПрограммы);
	КонецЕсли;  
	
	ПолеТекстаПрограммы.РазобратьТекущийКонтекст(Ложь, Ложь, КакВызовМетода, 0, 0, ПереходитьВоВложенныйКонтекст, ПозицияВТексте + 1);

	Сообщить("-Разбор позици в модуле " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Истина
		И ЯзыкПрограммы = 0 
		И ЗначениеЗаполнено(ТекстПоля) 
		И ТекстПоля <> ТекстМодуля
		И РазрешитьПоследнийДокумент 
	Тогда
		// например в окне "Вычислить" или "Условие точки останова"
		Сообщить("-текст поля выражения = " + Лев(ТекстПоля, 1000));
		ТекстПоля = СокрП(ТекстПоля);
		Если ТурбоКонф.ПолучитьВерсиюAPI() < 6 Тогда
			АктивноеОкно = ТурбоКонф.ПолучитьАктивноеОкно();
			КлючХранения = "УвемодлениеКонтекста." + АктивноеОкно;
			УжеУведомляли = ВосстановитьЗначениеСеансаКонфигуратора(КлючХранения);
			Если УжеУведомляли = Неопределено Тогда
				ИмяТекущегоМетода = ВывестиКонтекстЯзыка(ПолеТекстаПрограммы);
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Вычисление в контексте метода """ + ИмяТекущегоМетода + """. Используйте команду ""ИР.ВычислитьВыражение"" для передачи контекста");
				СохранитьЗначениеСеансаКонфигуратора(КлючХранения, 1);
			КонецЕсли;
		КонецЕсли;
		ПолеТекстаПрограммы.ПродолжитьОбработкуКоманды();
		ПолеТекстаПрограммы.ПрочитатьНачалоИКонецТекущейСтроки(ТекстПоля, Позиция0Поле + 1);
		ПолеТекстаПрограммы.РазобратьКонтекстСтроки(Ложь, Ложь);
		ПолеТекстаПрограммы.мПозицияВБлоке = СтрДлина(ПолеТекстаПрограммы.мТекстБлока);
		ПолеТекстаПрограммы.мПредшествующийТекст = ПолеТекстаПрограммы.мТекстДляПоискаОпределения + " " + ПолеТекстаПрограммы.мТекущаяСтрокаНачало;
		Сообщить("-Добавка динамического кода " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	КонецЕсли;
	ВывестиКонтекстЯзыка(ПолеТекстаПрограммы);
	Сообщить("Обновление поля текста программы " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапускаОбщий) + " мс");
	Возврат ПолеТекстаПрограммы;
КонецФункции

//.
// Параметры:
//    ПодключениеИР - Application {V83.Application}, Неопределено - 
//    ПолеТекстаПрограммы - , ОбработкаОбъект.ирКлсПолеТекстаПрограммы, Неопределено - 
Процедура ПередатьИзмененияМодулей(Знач ПодключениеИР, Знач ПолеТекстаПрограммы = Неопределено) Экспорт
	Попытка
		ДокументыМодулей = ТурбоКонф.ПолучитьМодифицированныеДокументы(Конфигуратор.PID);
	Исключение
		// 6.0.8749.33912+
		ДокументыМодулей = Новый Массив;
	КонецПопытки;
	Если ДокументыМодулей.Количество() > 0 Тогда
		Если ПолеТекстаПрограммы = Неопределено Тогда
			ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, "", 0);
		КонецЕсли;
		СледДокумент = Неопределено; // ОбработкаОбъект.Документ
		Для Индекс = 1 - ДокументыМодулей.Количество() По 0 Цикл // Обратный обход
			Документ = ДокументыМодулей[-Индекс];
			Если Истина
				И Конфигуратор.ТекущийДокумент <> Неопределено
				И Документ.DocumentRuntimeId = Конфигуратор.ТекущийДокумент.DocumentRuntimeId 
			Тогда
				Продолжить;
			КонецЕсли;
			Если Истина
				И СледДокумент <> Неопределено
				И СледДокумент.DocumentRuntimeId = Документ.DocumentRuntimeId
			Тогда
				// Ошибка Турбоконф https://turboconf.ru/Tasks/9074
				Продолжить;
			КонецЕсли;
			ИмяКонфигурации = Документ.ИмяКонфигурации;
			Если Не ЗначениеЗаполнено(ИмяКонфигурации) Тогда
				//  если с момента открытия модуля в нем что то изменили без вызова команд требующих идентификации документа
				// https://turboconf.ru/Tasks/9074
				Если СтрДлина(Документ.Текст) < 1000 Тогда 
					Продолжить;
				КонецЕсли; 
				НачалоТекста = Лев(Документ.Текст, 50000); // Для ускорения анализа
				Если Ложь
					Или Найти(НачалоТекста, Символы.ПС + "&После(""") > 0
					Или Найти(НачалоТекста, Символы.ПС + "&Перед(""") > 0
					Или Найти(НачалоТекста, Символы.ПС + "&Вместо(""") > 0
					Или Найти(НачалоТекста, Символы.ПС + "&ИзменениеИКонтроль(""") > 0
				Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СледДокумент = Документ;
			МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ПолноеИмяМодуля = ИмяМодуляДокумента(ПодключениеИР, Документ.Текст, ИмяКонфигурации, Документ.Заголовок, Ложь);
			Если ПолноеИмяМодуля = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Сообщить("Синхронизация модуля " + ПолноеИмяМодуля + " " + Документ.DocumentRuntimeId + " начата. Длина текста - " + СтрДлина(Документ.Текст) + " символов. Последняя позиция " + Документ.Позиция);
			ПолеТекстаПрограммы.УстановитьТекст(Документ.Текст, Ложь,, Ложь, ПолноеИмяМодуля,, Документ.Позиция, Документ.Позиция);
			Сообщить("Синхронизация модуля " + ПолноеИмяМодуля + " " + Документ.DocumentRuntimeId + " выполнена за " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//.
// Параметры:
//    ПодключениеИР - Application {V83.Application}, Неопределено - 
//    ТекстМодуля - Строка - 
//    ЭтоАвтодополнение - Булево - 
//    ИмяКонфигурации - Строка, Неопределено - 
//    ТипВыхода - Строка - Служебный параметр для перехода после вызова метода
Функция ИмяМодуляДокумента(Знач ПодключениеИР, Знач ТекстМодуля, Знач ИмяКонфигурации, Знач ЗаголовокДокумента = "", Знач ПроверятьЧтоЭтоОкноСообщений = Истина, выхИмяРасширения = "") Экспорт
	Если ИмяКонфигурации = "?" Тогда 
		Если ПроверятьЧтоЭтоОкноСообщений Тогда
			ТурбоКонф.ПоказатьВсплывающееУведомление(, "TurboConf не смог связать окно модуля с конфигурацией. Переоткройте окно модуля.", 4000);
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	ПороговаяДлина = 30000; // для 4х Найти() - 2мс
	ЭтоМодульВнешнегоОбъекта = Ложь;
	НачалоМодуля = Прав(ТекстМодуля, ПороговаяДлина);
	Если Истина
		И Найти(ТекстМодуля, Символы.ПС + "КонецФункции") = 0
		И Найти(ТекстМодуля, Символы.ПС + "КонецПроцедуры") = 0
		И Найти(ТекстМодуля, Символы.ПС + "EndFunction") = 0
		И Найти(ТекстМодуля, Символы.ПС + "EndProcedure") = 0
		// И Найти(ТекстМодуля, "|ВЫБРАТЬ") = 0
		// И Найти(ТекстМодуля, "|SELECT") = 0
	Тогда
		Если СтрДлина(НачалоМодуля) = ПороговаяДлина Тогда
			// Это текст НЕ на встроенном языке
			ЯзыкПрограммы = Неопределено;
		Иначе 
			ПороговаяДлина = 3000; // для 4х Найти() и 30000 символов - 2мс
			НачалоМодуля = Прав(ТекстМодуля, ПороговаяДлина);
			Если Истина
				И Найти(ТекстМодуля, "//") = 0
				И Найти(ТекстМодуля, "КонецЕсли") = 0
				И Найти(ТекстМодуля, "EndIf") = 0
				И Найти(ТекстМодуля, "=") = 0
				И Найти(ТекстМодуля, ");") = 0
				И Найти(ТекстМодуля, "()") = 0
				И Найти(ТекстМодуля, "Перем ") = 0
				И Найти(ТекстМодуля, "|") = 0
				И Найти(ТекстМодуля, "&НаКлиенте") = 0
				И Найти(ТекстМодуля, "&НаСервере") = 0
			Тогда
				// Это текст НЕ на встроенном языке
				ЯзыкПрограммы = Неопределено;
			ИначеЕсли ПроверятьЧтоЭтоОкноСообщений Тогда
				// Проверка на окно сообщений
				ПозицияКаретки1 = ТурбоКонф.ПолучитьПозициюКаретки();
				ТурбоКонф.ControlAltKey(Клавиши.O);
				ТурбоКонф.Ждать(20);
				ПозицияКаретки2 = ТурбоКонф.ПолучитьПозициюКаретки(); 
				Если ПозицияКаретки1.X = ПозицияКаретки2.X И ПозицияКаретки1.Y = ПозицияКаретки2.Y Тогда
					// Теперь точно узнали что это окно сообщений
					ЯзыкПрограммы = Неопределено;
					// ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Чтобы анализ модуля мог определить его тип, добавьте метод");
				Иначе
					ТурбоКонф.Клавиша(Клавиши.Escape);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЯзыкПрограммы = Неопределено Тогда
		Возврат Неопределено; 
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗаголовокДокумента) Тогда
		ЗаголовокКонфигуратора = ТурбоКонф.ПолучитьЗаголовокКонфигуратора(Конфигуратор.ГлавноеОкно);
		ЗаголовокДокумента = ЧистыйЗаголовокДочернегоОкна(ЗаголовокКонфигуратора);
		//Сообщить("Заголовок документа свежий = " + ЗаголовокКонфигуратора);
		Если Не ЗначениеЗаполнено(ЗаголовокДокумента) Тогда
			ЗаголовокДокумента = ЗаголовокОкна;
		КонецЕсли;
		//// Если ЧистыйЗаголовокДочернегоОкна = "Конфигуратор" Тогда
		// Если ПустаяСтрока(ЧистыйЗаголовокДочернегоОкна) Тогда
		// 	Если Истина
		// 		И Не ЭтоАвтодополнение
		// 		И АвтоМаксимизацияОконМодулей
		// 	Тогда
		// 		ТурбоКонф.MaximizeWindowIfNeeded(); // Много глюков возникает если звать из Т9!
		// 		ТурбоКонф.Ждать(100);
		// 		ЗаголовокКонфигуратора = ТурбоКонф.ПолучитьЗаголовокКонфигуратора(Конфигуратор.ГлавноеОкно);
		// 		ЧистыйЗаголовокДочернегоОкна = ЧистыйЗаголовокДочернегоОкна(ЗаголовокКонфигуратора);
		// 		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Окно модуля было развернуто, чтобы анализ модуля мог определить его имя", 2000);
		// 	Иначе
		// 	 	ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Разверните окно модуля, чтобы анализ модуля мог определить его имя", 3000);
		// 	КонецЕсли;
		// КонецЕсли;
	КонецЕсли;
	Сообщить("Заголовок документа = " + ЗаголовокДокумента);
	Если Ложь
		Или ЗаголовокДокумента = "?" 
		Или ЗаголовокДокумента = "..." // Соединенные окна документов https://turboconf.ru/Tasks/9359 
		Или Найти(ЗаголовокДокумента, " - Конфигуратор - ") > 0 
	Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Разверните окно модуля, чтобы анализатор мог определить его имя", 3000);
		//Возврат Неопределено;
		ЗаголовокДокумента = "Внешняя обработка: Модуль объекта";
	КонецЕсли;
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПолноеИмяМодуля = ЗаголовокДокумента;
	ПолноеИмяМодуля = СтрЗаменить(ПолноеИмяМодуля, "-", " "); // Нужно для Http-Сервис и Бизнес-Процесс
	Если ПолноеИмяМодуля = "Конфигуратор" Тогда
		// ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Чтобы анализ модуля мог определить его имя, нужно развернуть его окно");
		ПолноеИмяМодуля = "";
	Иначе
		Если СтрНачинаетсяС(ПолноеИмяМодуля, "Конфигурация ") Тогда
			ПервыйФрагмент = СтрРазделить(ПолноеИмяМодуля, ":")[0];
			ПолноеИмяМодуля = СтрЗаменить(ПолноеИмяМодуля, ПервыйФрагмент + ":", "Общая форма") + ":";						
		КонецЕсли;
		ФрагментыДвоеточия = СтрРазделить(ПолноеИмяМодуля, ":");
		Если ФрагментыДвоеточия[0] = "Внешняя обработка" Или ФрагментыДвоеточия[0] = "Внешний отчет" Тогда
			ФрагментыДвоеточия[0] = ФрагментыДвоеточия[0] + " Незаписанное";
			ЭтоМодульВнешнегоОбъекта = Истина;
		КонецЕсли;
		ФрагментыСборки = Новый Массив;
		Если Найти(ПолноеИмяМодуля, "\") > 0 Тогда
			Если ФрагментыДвоеточия.Количество() < 3 Тогда
				ТипМодуля = "Неизвестный";
			ИначеЕсли Найти(ФрагментыДвоеточия[2], " ") > 0 Тогда
				ТипМодуля = ТРег(СтрЗаменить(ФрагментыДвоеточия[2], " ", ""));
			Иначе
				ТипМодуля = ФрагментыДвоеточия[2];
			КонецЕсли;
			ПолноеИмяМодуля = "Ф::" + ФрагментыДвоеточия[0] + ":" + ФрагментыДвоеточия[1] + "::" + ТипМодуля;
			ЭтоМодульВнешнегоОбъекта = Истина;
		Иначе
			ФрагментыПробела = СтрРазделить(ПолноеИмяМодуля, " ");
			Если Прав(ФрагментыПробела[0], 1) = ":" Тогда
				ПолноеИмяМодуля = СтрЗаменить(ПолноеИмяМодуля, ФрагментыПробела[0], ""); // удаляем имя конфигурации из представления модуля конфигурации
				ФрагментыДвоеточия = СтрРазделить(ПолноеИмяМодуля, ":");
			КонецЕсли;
			Если ФрагментыДвоеточия.Количество() > 1 Тогда
				ФрагментыОбъекта = СтрРазделить(СокрЛП(ФрагментыДвоеточия[0]), " ");
				ФрагментыДвоеточия.Удалить(0);
				ИмяОбъекта = ФрагментыОбъекта[ФрагментыОбъекта.ВГраница()];
				ФрагментыОбъекта.Удалить(ФрагментыОбъекта.ВГраница());
				Если ФрагментыОбъекта.Количество() > 0 Тогда
					ТипОбъекта = СтрЗаменить(ТРег(СтрСоединить(ФрагментыОбъекта, " ")), " ", "");
					ФрагментыСборки.Добавить(ТипОбъекта);
				КонецЕсли;
				ФрагментыСборки.Добавить(ИмяОбъекта);
			КонецЕсли;
			ТипМодуля = СокрЛП(ФрагментыДвоеточия[0]);
			Если ЗначениеЗаполнено(ТипМодуля) Тогда
				Если Найти(ТипМодуля, " ") > 0 Тогда
					ТипМодуля = СтрЗаменить(ТРег(ТипМодуля), " ", "");						
				КонецЕсли;
				ФрагментыСборки.Добавить(ТипМодуля);
			КонецЕсли;
			ПолноеИмяМодуля = СтрСоединить(ФрагментыСборки, ".");
		КонецЕсли;
		МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ИмяОсновнойКонфигурации = ИмяОсновнойКонфигурации(ПодключениеИР);
		Если Не ЭтоМодульВнешнегоОбъекта Тогда
			Сообщить("ИмяКонфигурации = " + ИмяКонфигурации);
			Если ПустаяСтрока(ИмяКонфигурации) Тогда
				ИмяКонфигурации = ИмяОсновнойКонфигурации;
			КонецЕсли;
			Если ИмяКонфигурации <> ИмяОсновнойКонфигурации Тогда
				ПолноеИмяМодуля = ИмяКонфигурации + " " + ПолноеИмяМодуля;
				выхИмяРасширения = ИмяКонфигурации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ПолноеИмяМодуля;
КонецФункции

//.
// Параметры:
//    ПодключениеИР - Application {V83.Application}, Неопределено  -  
// Возвращаемое значение:
//    Строка - 
Функция ИмяОсновнойКонфигурации(Знач ПодключениеИР) Экспорт 
	ИмяОсновнойКонфигурации = ВосстановитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИмяКонфигурации");
	Если ИмяОсновнойКонфигурации = Неопределено Тогда
		ИмяОсновнойКонфигурации = ПодключениеИР.Метаданные.Имя; // 3мс
		СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИмяКонфигурации", ИмяОсновнойКонфигурации);
	КонецЕсли;
	Возврат ИмяОсновнойКонфигурации;
КонецФункции

// Результат - Булево - загружена ли новая структура в ИР
Функция ПроверитьОбновитьСтруктуруФормы(ПолеТекстаПрограммы)
	Результат = Ложь;
	ДатаОбновленияСтруктурыФормы = ПолеТекстаПрограммы.ДатаОбновленияСтруктурыФормыМодуля();
	Сообщить("ДатаОбновленияСтруктурыФормы=" + ДатаОбновленияСтруктурыФормы);
	ПолеТекстаПрограммы.КончитьОбработкуКоманды();
	Если Истина
		И ТипЗнч(ДатаОбновленияСтруктурыФормы) = Тип("Дата") 
		И ТекущаяДата() - ДатаОбновленияСтруктурыФормы > 300 // автообновление не чаще раза в 300 секнуд
	Тогда
		ОбновитьСтруктуруФормы(ПолеТекстаПрограммы);
		Результат = Истина;
	КонецЕсли;
	Возврат Результат;
КонецФункции

//.
// Параметры:
//    ПолеТекстаПрограммы - , ОбработкаОбъект.ирКлсПолеТекстаПрограммы, Неопределено - 
Процедура ОбновитьСтруктуруФормы(Знач ПолеТекстаПрограммы) Экспорт
	ТекстСтруктурыФормы = "";
	СтароеЗначениеБуфераОбмена = ТурбоКонф.ПолучитьБуферОбмена();
	ТурбоКонф.КонтролКлавиша(Клавиши.T);
	ТурбоКонф.КонтролКлавиша(Клавиши.C);
	МоментНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментНачала < 200 Цикл
		ТурбоКонф.Ждать(50);
		Попытка
			ОписаниеФормы = ТурбоКонф.ПолучитьБуферОбмена("1C:MD8 Data");
		Исключение
			ОписаниеФормы = "";
		КонецПопытки;
		Если ПолеТекстаПрограммы.ПроверитьОписаниеФормыИзБуфераОбмена(ОписаниеФормы) Тогда
			ТекстСтруктурыФормы = ТурбоКонф.ПолучитьБуферОбмена("1C:MD8 External Data");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ТурбоКонф.КонтролКлавиша(Клавиши.OemMinus);
	УстановитьБуферОбмена(СтароеЗначениеБуфераОбмена);
	Сообщить("СтруктураФормы=" + Лев(ТекстСтруктурыФормы, 1000));
	Попытка
		ПолеТекстаПрограммы.УстановитьСлужебныеДанныеФормы(ТекстСтруктурыФормы);
		Результат = Истина;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	Если Не ЗначениеЗаполнено(ТекстСтруктурыФормы) Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Сделайте форму видимой в дереве конфигурации, чтобы анализ модуля мог получить ее новую структуру", 4000);
	КонецЕсли;
КонецПроцедуры

// Защита от ошибки Турбоконфа с пустым параметром
Процедура УстановитьБуферОбмена(Текст)
	Если ЗначениеЗаполнено(Текст) Тогда // Защита от странной ошибки - Внешнее исключение (System.ArgumentNullException): Значение не может быть неопределенным. Имя параметра: text}    
		ТурбоКонф.УстановитьБуферОбмена(Текст);
	КонецЕсли;
КонецПроцедуры

Функция КлючКэшаИмениКонфигурацииДляПоля(Знач НомерРодителяПоля = 0, Знач ИдентификаторПоляСырой = Неопределено)
	Если НомерРодителяПоля = 0 Тогда
		Если ИдентификаторПоляСырой = Неопределено Тогда
			ИдентификаторПоля = ТурбоКонф.ПолучитьRuntimeId(); // 9мс
			// ИдентификаторПоля = ТурбоКонф.ПолучитьRuntimeIdСтрокой();
			ИдентификаторПоля = СтрСоединить(ИдентификаторПоля, "-");
		Иначе
			ИдентификаторПоля = СтрЗаменить(ИдентификаторПоляСырой, " ", "-");
		КонецЕсли;
	Иначе
		ИдентификаторПоля = ТурбоКонф.ПолучитьRuntimeIdСИерархией(НомерРодителяПоля)[1]; // 9мс
		// ИдентификаторПоля = ТурбоКонф.ПолучитьRuntimeIdСИерархиейСтроками();
		ИдентификаторПоля = СтрСоединить(ИдентификаторПоля, "-");
	КонецЕсли;
	Сообщить("ИдентификаторПоля=" + ИдентификаторПоля);
	КлючКэша = "ИмяКонфигурации." + XMLСтрока(ИдентификаторПоля);
	Возврат КлючКэша;
КонецФункции

// Не используется
// теперь эту информацию получаем от Турбокнофа
Функция ИмяКонфигурации()
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	ТурбоКонф.КонтролКлавиша(Клавиши.T);
	КлючКэшаИмениКонфигурации = КлючКэшаИмениКонфигурацииДляПоля(2);
	ИмяКонфигурации = ВосстановитьЗначениеСеансаКонфигуратора(КлючКэшаИмениКонфигурации);
	Если ПустаяСтрока(ИмяКонфигурации) Тогда
		СохранитьЗначениеСеансаКонфигуратора(КлючКэшаИмениКонфигурации, ИмяКонфигурации);
		ТурбоКонф.Клавиша(Клавиши.Home);
		ТурбоКонф.Ждать(100);
		ИмяКонфигурации = ПолучитьВыделенныйТекст(Ложь);
		Если ИмяКонфигурации = "Мои шаблоны" Тогда
			// Залипла клавиша SHIFT при нажтии CTRL+T
			Возврат Неопределено;
		Иначе
			СохранитьЗначениеСеансаКонфигуратора(КлючКэшаИмениКонфигурации, ИмяКонфигурации);
		КонецЕсли;
		ТурбоКонф.КонтролКлавиша(Клавиши.OemMinus);
		ТурбоКонф.КонтролКлавиша(Клавиши.T);
	КонецЕсли;
	Сообщить("ИмяКонфигурации = " + ИмяКонфигурации);
	ТурбоКонф.КонтролКлавиша(Клавиши.OemMinus);
	Возврат ИмяКонфигурации;
КонецФункции

Функция ЧистыйЗаголовокДочернегоОкна(ЗаголовокОкнаКонфигуратора)
	ПолноеИмяМодуля = ЗаголовокОкнаКонфигуратора;
	ПозицияТире = Найти(ПолноеИмяМодуля, " - Конфигуратор");
	ПолноеИмяМодуля = СокрЛП(Лев(ПолноеИмяМодуля, ПозицияТире));
	Возврат ПолноеИмяМодуля;
КонецФункции

Функция ВывестиКонтекстЯзыка(ПолеТекстаПрограммы)
	ИмяМетода = ПолеТекстаПрограммы.ИмяТекущегоМетода();
	Сообщить("-Язык: " + ЯзыкПрограммы + ", Модуль: " + ПолеТекстаПрограммы.мИмяМодуля + ", Метод: " + ИмяМетода  + ", Позиция: " + ПозицияВТексте + ", Выражение: " + ПолеТекстаПрограммы.мКонтекст);
	Возврат ИмяМетода;
КонецФункции

//&ЗапроситьИнформациюОДокументе
Процедура ПоказатьПараметрыМетода()
	ПозицияКаретки = ТурбоКонф.ПолучитьПозициюКаретки();  
	ЭтоДокумент = ЭтоДокумент();
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст,, Истина, ЭтоДокумент, Истина);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Сообщить("Имя вызываемого метода = " + ПолеТекстаПрограммы.мИмяМетодаВызова);
	ФормаВызова = ПолеТекстаПрограммы.ФормаВызовМетода(Истина);
	ПодключениеИР.Visible = Истина;
	ОповеститьПользователяОПриостановке();
	ИдентификаторПроцессаИР = МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс();
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх("^Метод.*", 3000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, ИдентификаторПроцессаИР, ПозицияКаретки);
	Попытка
		Результат = ФормаВызова.ОткрытьМодально();
		ОповеститьПользователяОВозобновлении();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
		Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
	КонецПопытки;
	ЗавершитьВызовВнешнегоОкнаАсинх(Истина, ИдентификаторПроцессаИР);
	ПодключениеИР.Visible = Ложь;
	Если Результат = Истина Тогда 
		ПерейтиВПозицию(,, ПолеТекстаПрограммы); 
	ИначеЕсли ЗначениеЗаполнено(Результат) Тогда
		ПерейтиПоСсылкеСтрокиМодуля(Результат);
	КонецЕсли;
КонецПроцедуры

//&ЗапроситьИнформациюОДокументе
Процедура ПереименоватьСлово()
	ПозицияКаретки = ТурбоКонф.ПолучитьПозициюКаретки();  
	ЭтоДокумент = ЭтоДокумент();
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст,, Истина, ЭтоДокумент, Истина);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПодключениеИР.Visible = Истина;
	Результат = Неопределено;
	ОповеститьПользователяОПриостановке();
	ИдентификаторПроцессаИР = МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс();
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх("^Переименовать.*", 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, ИдентификаторПроцессаИР, ПозицияКаретки);
	Попытка
		Результат = ПолеТекстаПрограммы.ПереименоватьСлово(Ложь);
		ОповеститьПользователяОВозобновлении();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
		Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
	КонецПопытки;
	ЗавершитьВызовВнешнегоОкнаАсинх(Истина, ИдентификаторПроцессаИР);
	ПодключениеИР.Visible = Ложь;
	Если Результат = "НайтиВнешниеСсылки" Тогда 
		НайтиВМодулях();
	ИначеЕсли Результат <> Неопределено Тогда
		ПередатьИзмененияИзПоляТекстаВОкноМодуля(ПолеТекстаПрограммы,, Результат.ВесьМодульИзменен);
	КонецЕсли;
КонецПроцедуры 

//&ЗапроситьИнформациюОДокументе
Процедура ЗапомнитьДляСравнения()
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Результат = ПолеТекстаПрограммы.ЗапомнитьДляСравнения(Ложь);
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), Результат);
	Иначе
		ПодключениеИР.Visible = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура АвтодополнениеМодальное()
	ПозицияКаретки = ТурбоКонф.ПолучитьПозициюКаретки();
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	// ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта);
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст,, Истина);
	ПодключениеИР.Visible = Истина;
	ОповеститьПользователяОПриостановке();
	ИдентификаторПроцессаИР = МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс();
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх("^Тип:.*", 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, ИдентификаторПроцессаИР, ПозицияКаретки);
	Попытка
		ПолеТекстаПрограммы.ОткрытьАвтодополнение(, Истина);
		ОповеститьПользователяОВозобновлении();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
		Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
	КонецПопытки;
	ЗавершитьВызовВнешнегоОкнаАсинх(Истина, ИдентификаторПроцессаИР);
	ПодключениеИР.Visible = Ложь;
КонецПроцедуры

Процедура СинтаксПомощник()
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВосстановитьОкноПриложения(ПодключениеИР);
	ПолеТекстаПрограммы.ОткрытьКонтекстнуюСправку();
КонецПроцедуры

//&ЗапроситьИнформациюОДокументе
Процедура НайтиВМодулях()
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	РежимСсылки = Ложь;
	ОкноПоискаОткрыто = Ложь;
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь, Ложь);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		ЧтоИскать = СсылкаНаОбъектМДВДеревеКонфигурации(ПодключениеИР);
		РежимСсылки = ЗначениеЗаполнено(ЧтоИскать);
		ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР,,,, Ложь, Ложь, Ложь);
		Если Не ЗначениеЗаполнено(ЧтоИскать) Тогда
			ЧтоИскать = ПолучитьВыделенныйТекст();
		КонецЕсли;
	КонецЕсли;
	ВосстановитьОкноПриложения(ПодключениеИР); // Надо делать до открытия формы ИР, т.к. она может эмулировать ввод в режиме управляемого приложения
	Если РежимСсылки Тогда
		Если Не ПолеТекстаПрограммы.ОткрытьПоискВызововСлова(ЧтоИскать, Истина, Ложь) Тогда 
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ПолеТекстаПрограммы.ОткрытьПоискВМодулях(ЧтоИскать, Ложь) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ТурбоКонф.КонтролКлавиша(Клавиши.Enter); // Так пользователь сможет прерывать
КонецПроцедуры 

Процедура АнализЗамера()
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТурбоКонф.АльтКлавиша(Клавиши.A); // Подменю Файл
	ТурбоКонф.Клавиша(Клавиши.R); // Сохранить Как
	ИмяФайла = ПолучитьИмяВременногоФайла("pff");
	Если Не УстановитьИмяФайлаВДиалогеСохранения(ИмяФайла, "Сохранение") Тогда 
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ВосстановитьОкноПриложения(ПодключениеИР);
	ТурбоКонф.Ждать(100);
	МодулиИР.ирКлиент.ОткрытьЗамерПроизводительностиЛкс(ИмяФайла);
КонецПроцедуры

//.
// Параметры:
//    ИмяФайла - Строка - 
// Возвращаемое значение:
//  Булево - Истина, если дождались окна и отправили в него выбранное имя файла
Функция УстановитьИмяФайлаВДиалогеСохранения(ИмяФайла, ЗаголовокОкна) Экспорт
	//ОкноСохранения = ТурбоКонф.ЖдатьОкно(ЗаголовокОкна, 2000, Ложь);
	//Если ОкноСохранения = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	Если Не ЖдатьПотерюАктивностиОкна() Тогда 
		Сообщить("Не дождались появления диалога сохранения файла");
		Возврат Ложь;
	КонецЕсли;
	ТурбоКонф.Ждать(100);
	//ТурбоКонф.УстановитьЗначение(ИмяФайла); // Так диалог не видит изменения
	ТурбоКонф.УстановитьЗначение("");
	ТурбоКонф.ВставитьТекст(ИмяФайла);
	ТурбоКонф.Ждать(100);
	ТурбоКонф.Клавиша(Клавиши.Enter);
	Возврат ЖдатьДоступностиФайла(ИмяФайла);
КонецФункции 

// .
//
// Параметры:
//  ИмяФайла	 - Строка - 
//  ЧислоСекунд		- Число - 
// 
// Возвращаемое значение:
//  Булево - Истина, если файл стал доступен
//
Функция ЖдатьДоступностиФайла(Знач ИмяФайла, Знач ЧислоСекунд = 2) Экспорт
	МоментНачала = ТекущаяДата();
	Файл = Новый Файл(ИмяФайла);
	Пока Истина
		И ТекущаяДата() <= МоментНачала + ЧислоСекунд - 1 // Не больше 2-х секунд ждем
	Цикл 
		Попытка
			Пустышка = Файл.ПолучитьВремяИзменения();
			Возврат Истина;
		Исключение
		КонецПопытки;
		ТурбоКонф.Ждать(100);
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Процедура ПодпискиНаСобытия()
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТурбоКонф.КонтролКлавиша(Клавиши.T);
	МодулиИР = МодулиИР(ПодключениеИР);
	СсылкаНаОбъектМД = СсылкаНаОбъектМДВДеревеКонфигурации(ПодключениеИР, Истина);
	ВосстановитьОкноПриложения(ПодключениеИР);
	Если СтрНачинаетсяС(СсылкаНаОбъектМД, "ПодпискаНаСобытие") Тогда
		Событие = ПодключениеИР.String(ПодключениеИР.Метаданные.ПодпискиНаСобытия.Найти(СтрРазделить(СсылкаНаОбъектМД, ".")[1]).Событие); // Опасный тип https://www.hostedredmine.com/issues/959928
	Иначе
		ОбъектМД = СсылкаНаОбъектМД;
	КонецЕсли;
	МодулиИР.ирКлиент.ОткрытьПодпискиНаСобытияЛкс(ОбъектМД, Событие);
КонецПроцедуры 

Процедура ОткрытьОбъектМетаданных()
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТурбоКонф.КонтролКлавиша(Клавиши.T);
	МодулиИР = МодулиИР(ПодключениеИР);
	СсылкаНаОбъектМД = СсылкаНаОбъектМДВДеревеКонфигурации(ПодключениеИР);
	ВосстановитьОкноПриложения(ПодключениеИР);
	МодулиИР.ирКлиент.ОткрытьОбъектМетаданныхЛкс(СсылкаНаОбъектМД);
КонецПроцедуры

//&ЗапроситьИнформациюОДокументе
Процедура ПроверитьМодуль()
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь, Ложь);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВосстановитьОкноПриложения(ПодключениеИР);
	ПолеТекстаПрограммы.ОткрытьПроверкуМодуля();
	//ТурбоКонф.Ждать(100); // Не помогает при первом открытии отправить CTRL+Enter
	ТурбоКонф.КонтролКлавиша(Клавиши.Enter); // Так пользователь сможет прерывать
КонецПроцедуры

Процедура СписокОбщихМетодов()
	ОткрытьСписокМетодов();
КонецПроцедуры

Процедура СписокМетодовМодуля()
	ОткрытьСписокМетодов(Истина);
КонецПроцедуры

Процедура ОткрытьСписокМетодов(ТолькоЭтогоМодуля = Ложь)
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь, Ложь);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВосстановитьОкноПриложения(ПодключениеИР);
	ПолеТекстаПрограммы.ОткрытьСписокМетодов(ВыделенныйТекст, ТолькоЭтогоМодуля);
КонецПроцедуры

Процедура РедактироватьКомпоновку()
	ПодключениеИР = ПодключениеИР(, Ложь, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Заголовок = "Сохранить схему в файл";
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ТурбоКонф.КликнутьПоЭлементу(Заголовок, "кнопка", 0, Ложь);
	Если Не УстановитьИмяФайлаВДиалогеСохранения(ИмяФайла, Заголовок) Тогда 
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ВосстановитьОкноПриложения(ПодключениеИР);
	ТурбоКонф.Ждать(100);
	МодулиИР.ирКлиент.РедактироватьСхемуКомпоновкиИзФайлаЛкс(ИмяФайла);
	ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Измененную схему нужно будет вручную загрузить в конфигуратор!", 4000);
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры

Функция ВосстановитьЗначениеСеансаКонфигуратора(Ключ, ИДКонфигуратора = Неопределено)
	Если Не ЗначениеЗаполнено(ИДКонфигуратора) Тогда
		ИДКонфигуратора = Конфигуратор.PID;
	КонецЕсли;
	СеансБазы = "" + ИДКонфигуратора; 
	Значение = ТурбоКонф.ВосстановитьЗначениеСеанса(СеансБазы + Ключ);
	Сообщить("ВосстановитьЗначениеСеансаКонфигуратора. СеансБазы=" + СеансБазы + ";" + Ключ + "=" + Значение);
	Возврат Значение;
КонецФункции

Процедура СохранитьЗначениеСеансаКонфигуратора(Ключ, Значение)
	Если Не ЗначениеЗаполнено(Конфигуратор) Тогда
		Возврат;
	КонецЕсли;
	ИДКонфигуратора = Конфигуратор.PID;
	ПодлюченныеКонфигураторы = ТурбоКонф.ВосстановитьЗначениеСеанса("ИР.ПодлюченныеКонфигураторы");
	Если ПодлюченныеКонфигураторы = Неопределено Тогда
		ПодлюченныеКонфигураторы = Новый Соответствие();
	КонецЕсли;
	ПодлюченныеКонфигураторы[ИДКонфигуратора] = 1;
	ТурбоКонф.СохранитьЗначениеСеанса("ИР.ПодлюченныеКонфигураторы", ПодлюченныеКонфигураторы);
	СеансБазы = "" + ИДКонфигуратора;
	ТурбоКонф.СохранитьЗначениеСеанса(СеансБазы + Ключ, Значение);
	Сообщить("СохранитьЗначениеСеансаКонфигуратора. СеансБазы=" + СеансБазы + ";" + Ключ + "=" + Значение);
КонецПроцедуры

Функция ПодлюченныеКонфигураторы()
	ПодлюченныеКонфигураторы = ТурбоКонф.ВосстановитьЗначениеСеанса("ИР.ПодлюченныеКонфигураторы");
	Если ПодлюченныеКонфигураторы = Неопределено Тогда
		ПодлюченныеКонфигураторы = Новый Соответствие();
	КонецЕсли;	
	Возврат ПодлюченныеКонфигураторы;
КонецФункции

// Возвращает либо здоровое подключение, либо Неопределено
Функция ПодключениеИРИзКэша(Знач ИДКонфигуратора = Неопределено, ИДПриложения = Неопределено)
	ПодключениеИР = ВосстановитьЗначениеСеансаКонфигуратора("ПодключениеИР", ИДКонфигуратора);
	Если ПодключениеИР <> Неопределено Тогда
		ИДПриложения = ВосстановитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИД", ИДКонфигуратора);
		Попытка
			Пустышка = ПодключениеИР.Visible;
		Исключение
			ПроцессОС = ПолучитьПроцессОС(ИДПриложения);
			Если ПроцессОС <> Неопределено Тогда
				УбитьПроцесс(ПроцессОС, "из-за порчи");
			КонецЕсли;
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
			ПодключениеИР = Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ПодключениеИР;
КонецФункции

// Функция - Строка соединения базы ИР
//
// Параметры:
//  ПарольИлиСтрокаСоединения	 - 	 - 
//  СтрокаСоединенияКраткая		 - 	 - 
//  ЛиКраткаяСПользователем		 - Булево - нужно ли в краткой строке оставить имя пользователя
// 
// Возвращаемое значение:
//   - 
//
Функция СтрокаСоединенияБазыИР(Знач ПарольИлиСтрокаСоединения = Неопределено, СтрокаСоединенияКраткая = "", Знач ЛиКраткаяСПользователем = Истина)
	Если ПарольИлиСтрокаСоединения = Неопределено Тогда
		ПарольИлиСтрокаСоединения = ВосстановитьЗначениеБазы("ПарольИлиСтрокаСоединения", Истина);
	КонецЕсли;
	Если ЛиСтрокаСоединения(ПарольИлиСтрокаСоединения) Тогда
		СтрокаСоединения = ПарольИлиСтрокаСоединения;
		СтрокаСоединенияКраткая = СтрокаСоединения;
		МаркерПароля = "pwd=";
		Если Найти(НРег(СтрокаСоединенияКраткая), МаркерПароля) > 0 Тогда
			СтрокаСоединенияКраткая = Лев(СтрокаСоединенияКраткая, Найти(НРег(СтрокаСоединенияКраткая), МаркерПароля) - 1);
		КонецЕсли;
	Иначе
		СтрокаСоединенияКраткая = СтрокаСоединенияБазыКонфигуратора();
		СтрокаСоединения = СтрокаСоединенияКраткая + СтрШаблон("Pwd=""%1"";", ПарольИлиСтрокаСоединения);
	КонецЕсли;
	МаркерПользователя = ";usr=";
	Если Не ЛиКраткаяСПользователем И Найти(НРег(СтрокаСоединенияКраткая), МаркерПользователя) > 0 Тогда
		СтрокаСоединенияКраткая = Лев(СтрокаСоединенияКраткая, СтрНайти(НРег(СтрокаСоединенияКраткая), МаркерПользователя) - 1);
	КонецЕсли;
	Сообщить("Строка соединения базы " + НазваниеПриложения() + " без пароля = " + СтрокаСоединенияКраткая);
	Возврат СтрокаСоединения;
КонецФункции

//.
// Параметры:
//    ПарольИлиСтрокаСоединения - Строка - 
// Возвращаемое значение:
//    Булево - 
Функция ЛиСтрокаСоединения(Знач ПарольИлиСтрокаСоединения) Экспорт
	Результат = Истина
		И Найти(ПарольИлиСтрокаСоединения, "=") > 0 
		И Найти(ПарольИлиСтрокаСоединения, ";") > 0
		И (Ложь
			Или Найти(НРег(ПарольИлиСтрокаСоединения), "file") > 0
			Или Найти(НРег(ПарольИлиСтрокаСоединения), "srvr") > 0);
	Возврат Результат;
КонецФункции

Функция СтрокаСоединенияБазыКонфигуратора(Знач СПользователем = Истина)
	ИнфоПроцесса = ИнфоПроцесса();
	Если ИнфоПроцесса.Режим = "Серверный" Тогда
		СтрокаСоединения = СтрШаблон("Srvr=""%1"";Ref=""%2"";", ИнфоПроцесса.Сервер, ИнфоПроцесса.БазаДанных);
	Иначе
		СтрокаСоединения = СтрШаблон("File=""%1"";", ИнфоПроцесса.Каталог);  
	КонецЕсли;
	Если СПользователем И ЗначениеЗаполнено(ИнфоПроцесса.Пользователь) Тогда
		СтрокаСоединения = СтрокаСоединения + СтрШаблон("Usr=""%1"";", ИнфоПроцесса.Пользователь);
	КонецЕсли;
	Сообщить("Строка соединения базы конфигуратора = " + СтрокаСоединения);
	Возврат СтрокаСоединения;
КонецФункции

Функция ИнфоПроцесса()
	Возврат Конфигуратор.ПараметрыИнформационнойБазы;
КонецФункции

Функция ПодключениеИР(ПарольИлиСтрокаСоединения = Неопределено, РазобратьПозициюВТексте = Истина, Знач ВидимостьДляНовогоПодключения = Ложь, Знач ЭтоДокумент = Неопределено, выхПодключеноНоНетПодсистемы = Ложь) Экспорт
	ТипЭлементаИнтерфейса = Неопределено;
	Если ЭтоДокумент = Неопределено Тогда
		ТипЭлементаИнтерфейса = ПолучитьТипТекущегоЭлемента();
		ЭтоДокумент = ЭтоДокумент(ТипЭлементаИнтерфейса);
	КонецЕсли;
	Сообщить("ЭтоДокумент = " + ЭтоДокумент);
	Если РазобратьПозициюВТексте Тогда
		РазобратьПозициюВТексте(Ложь);
	КонецЕсли;
	ПодключениеИР = ПодключениеИРИзКэша();
	Если ПодключениеИР <> Неопределено Тогда
		Возврат ПодключениеИР;
	КонецЕсли;
	Если ПарольИлиСтрокаСоединения = Неопределено И Не ПроверитьРазрешениеИР() Тогда
		Возврат Неопределено; 
	КонецЕсли;
	ТекущаяВерсияТурбоКонф = ТурбоКонф.ПолучитьВерсиюТурбоКонф();
	Если ТекущаяВерсияТурбоКонф < МинимальнаяВерсияТурбоКонф Тогда
		Сообщить("Несовместимая версия ТурбоКонф", СтатусСообщения.Внимание);
		ТекстСообщения = СтрШаблон("Обнаружена несовместимая версия TurboConf. Необходима версия %1 и выше", МинимальнаяВерсияТурбоКонф);
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ТекстСообщения, 5000); // Может заблокироваться модальным окном и будет мешаться
	КонецЕсли;
	ТурбоКонф.СохранитьЗначениеСеанса("СтрокаЗапускаОбновлениеКэшаМодулей", Неопределено);
	СтрокаСоединенияБезПароля = "";
	СтрокаСоединения = СтрокаСоединенияБазыИР(ПарольИлиСтрокаСоединения, СтрокаСоединенияБезПароля);
	УведомлениеЗапуска = ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Запускается приложение " + НазваниеПриложения() + ". Закрыть его можно командой ЗакрытьПриложениеИР.", 30000);
	Попытка
		Для НомерПопытки = 1 По 2 Цикл
			Попытка
				ПодключениеИР = Новый COMОбъект("V83.Application");
				УспехПодключения = ПодключениеИР.Connect(СтрокаСоединения);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				УспехПодключения = Ложь;
			КонецПопытки;
			Если УспехПодключения Тогда
				Прервать;
			Иначе
				ПодключениеИР = Неопределено;
				Если Ложь
					Или Найти(ОписаниеОшибки, "пароль") > 0
					Или Найти(ОписаниеОшибки, "password") > 0 
				Тогда
					Если ПарольИлиСтрокаСоединения = Неопределено Тогда
						ИмяОбработчика = "СброситьНастройкиИРБазы";
					Иначе
						ИмяОбработчика = "";
					КонецЕсли;
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Неверное имя или пароль." + СообщениеКакЗабытьВыбор() + Символы.ПС + ОписаниеОшибки,, ЭтотОбъект, ИмяОбработчика); // ВводПароля
					ЗавершитьОперациюПодключения(УведомлениеЗапуска);
					Возврат Неопределено;
				ИначеЕсли Ложь
					Или Найти(ОписаниеОшибки, "0x800706BE") > 0
				Тогда
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Ошибка подключения ИР: " + ОписаниеОшибки);
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Ошибка инициации приложения. Подробности в журнале регистрации.",, ЭтотОбъект, "ОткрытьЖурналРегистрации");
					ЗавершитьОперациюПодключения(УведомлениеЗапуска);
					Возврат Неопределено;
				КонецЕсли;
				Если НомерПопытки = 2 Тогда
					ФрагментыОшибки = СтрРазделитьЛкс(ОписаниеОшибки, "COMException):", Истина,,,, Истина);
					Если ФрагментыОшибки.Количество() > 1 Тогда
						ОписаниеОшибки = ФрагментыОшибки[1];
					КонецЕсли;
					ОписаниеОшибки = "Ошибка подключения приложения ИР " + СтрокаСоединенияБезПароля + " через COM V83.Application:
					|"+ ОписаниеОшибки; 
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки, 6000);
					Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
					Если Найти(ОписаниеОшибки, "Ошибка разделенного доступа к базе данных") = 0 Тогда
						ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), //"Не удалось подключиться к текущей инфобазе через COM интерфейс V83.Application."
								"Если ошибка связана с COM, откройте в базе ""Управление COM классами 1С"" из ""Инструменты разработчика"" и зарегистрируйте V83.Application текущей версии платформы 1С.");
					КонецЕсли;
					ЗавершитьОперациюПодключения(УведомлениеЗапуска);
					Возврат Неопределено;
				КонецЕсли;
				ИмяИсполняемогоФайла = ИмяИсполняемогоФайла();
				Сообщить("Файл конфигуратора = " + ИмяИсполняемогоФайла);
				Если ТекущаяВерсияТурбоКонф >= "6.0.8771.35683" Тогда 
					Сообщить("Разрядность конфигуратора = " + Конфигуратор.РазрядностьПроцесса);
					Если Конфигуратор.РазрядностьПроцесса = 32  Тогда
						Подветка = "";
						ТекущаяРазрядность = "32";
						УдаляемаяРазрядность = "64";
					Иначе 
						Подветка = "\WOW6432Node";
						ТекущаяРазрядность = "64";
						УдаляемаяРазрядность = "32";
					КонецЕсли;
					РеестрОС = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv");
					ВеткаРеестра = "SOFTWARE\Classes" + Подветка + "\CLSID\{e92b75e3-2ea1-4fec-b493-cef3ec59fca6}\LocalServer32";
					
					КорневаяВетка = "2147483650"; // HKLM, HKEY_LOCAL_MACHINE
					Попытка
						// TODO OneScript 1.7 пока не умеет читать выходные параметры из COM https://github.com/EvilBeaver/OneScript/issues/1324
						//РеестрОС.GetStringValue(КорневаяВетка, ВеткаРеестра,, ИмяФайлаКласса);  
						//
						ИмяФайлаЛокальнойМашины = ТурбоКонф.ПолучитьЗначениеИзРеестра("HKEY_LOCAL_MACHINE\" + ВеткаРеестра, "", "");
					Исключение
						// https://turboconf.ru/Tasks/9040#c69369430a1c4dc987f6e5d83f5b9467
						ИмяФайлаЛокальнойМашины = ""; 
					КонецПопытки;
					Сообщить(УдаляемаяРазрядность + "b класс V83.Application локальной машины = " + ИмяФайлаЛокальнойМашины);
					Если ЗначениеЗаполнено(ИмяФайлаЛокальнойМашины) Тогда
						Если РеестрОС.DeleteKey(КорневаяВетка, ВеткаРеестра) > 0 Тогда
							ТекстСообщения = "Запустите TurboConf от имени администратора, чтобы адаптер удалил " + УдаляемаяРазрядность + "b класс V83.Application. "
								+ "Или удалите его вручную через ""Управление COM классами 1С (ИР)"".";
							ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ТекстСообщения, 10000);
							Сообщить(ТекстСообщения);
							ЗавершитьОперациюПодключения(УведомлениеЗапуска);
							Возврат Неопределено;
						Иначе
							ТекстСообщения = "Удален " + УдаляемаяРазрядность + "b класс V83.Application из HKLM, чтобы ОС отдавала " + ТекущаяРазрядность + "b вместо него.";
							//ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ТекстСообщения, 4000);
							Сообщить(ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
					
					КорневаяВетка = "2147483649"; // HKCU, HKEY_CURRENT_USER
					Попытка
						ИмяФайлаТекущегоПользователя = ТурбоКонф.ПолучитьЗначениеИзРеестра("HKEY_CURRENT_USER\" + ВеткаРеестра, "", "");
					Исключение
						// https://turboconf.ru/Tasks/9040#c69369430a1c4dc987f6e5d83f5b9467
						ИмяФайлаТекущегоПользователя = ""; 
					КонецПопытки;
					Сообщить(УдаляемаяРазрядность + "b класс V83.Application текущего пользователя = " + ИмяФайлаТекущегоПользователя);
					Если ЗначениеЗаполнено(ИмяФайлаТекущегоПользователя) Тогда
						Если РеестрОС.DeleteKey(КорневаяВетка, ВеткаРеестра) > 0 Тогда
							ТекстСообщения = "Ошибка удаления " + УдаляемаяРазрядность + "b класс V83.Application из HKCU. Удалите его вручную через ""Управление COM классами 1С (ИР)"".";
							ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ТекстСообщения, 6000);
							Сообщить(ТекстСообщения);
							ЗавершитьОперациюПодключения(УведомлениеЗапуска);
							Возврат Неопределено;
						Иначе 
							ТекстСообщения = "Удален " + УдаляемаяРазрядность + "b класс V83.Application из HKCU, чтобы ОС отдавала " + ТекущаяРазрядность + "b вместо него.";
							//ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ТекстСообщения, 4000);
							Сообщить(ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
					ЗапуститьПриложение("""" + ИмяИсполняемогоФайла + """ /RegServer -CurrentUser",, Истина);
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Из-за ошибки подключения регистрируем класс V83.Application для текущей версии платформы 1С и текущего пользователя ОС", 3000);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЗаголовокПриложенияИР = НазваниеПриложения() + " - " + Лев(СтрокаСоединения, Найти(СтрокаСоединения, "Usr") - 1);
		Попытка
			ПодключениеИР.КлиентскоеПриложение.УстановитьЗаголовок(ЗаголовокПриложенияИР);
		Исключение
			// 8.3.9-
			ПодключениеИР.УстановитьЗаголовокСистемы(ЗаголовокПриложенияИР);
		КонецПопытки;
		ПодключениеИР.Visible = ВидимостьДляНовогоПодключения;
		ИспользуемоеИмяФайлаПортативногоИР = "";
		МодулиИР = МодулиИР(ПодключениеИР,, ИспользуемоеИмяФайлаПортативногоИР);
		Если МодулиИР = Неопределено Тогда
			выхПодключеноНоНетПодсистемы = Истина;
			ЗавершитьОперациюПодключения(УведомлениеЗапуска);
			Возврат Неопределено;
		КонецЕсли;
		СохранитьЗначениеБазы("ИспользуемоеИмяФайлаПортативногоИР", ИспользуемоеИмяФайлаПортативногоИР);
		Если МодулиИР <> Неопределено Тогда
			ИмяФайлаБуфера = ПолучитьИмяВременногоФайла();
			Попытка
				НомерВерсииПодсистемыИР = МодулиИР.ирКэш.НомерВерсииПодсистемыИРЛкс();
				МодулиИР.ирКлиент.ПодключитьСвязанныйКонфигураторЛкс(Конфигуратор.PID, ИмяФайлаБуфера); // ИР 7.03+
			Исключение
				НомерВерсииПодсистемыИР = 0;
			КонецПопытки;
			Если НомерВерсииПодсистемыИР < Число(СтрЗаменить(МинимальнаяВерсияИР, ".", "")) Тогда
				ПодключениеИР.Visible = Истина;
				Сообщить("Несовместимая версия подсистемы ИР: " + НомерВерсииПодсистемыИР);
				ТекстСообщения = СтрШаблон("Обнаружена несовместимая версия подсистемы """ + НазваниеПодсистемы() + """. Необходима версия %1 и выше", МинимальнаяВерсияИР);
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ТекстСообщения, 5000); // Может заблокироваться модальным окном и будет мешаться
				МодулиИР.ирОбщий.СообщитьЛкс(ТекстСообщения);
				МодулиИР.ирКлиент.ОткрытьСправкуПоПодсистемеЛкс();
			КонецЕсли;
			Попытка
				ПодключениеИР.СтандартныеПодсистемыКлиент.ПропуститьПредупреждениеПередЗавершениемРаботыСистемы(); // Для БСП
			Исключение
			КонецПопытки;
		КонецЕсли;
		ЗапрещенныеОбработчикиОжидания = Новый Массив;
		ЗапрещенныеОбработчикиОжидания.Добавить("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ"); //БСП 2.0
		Для Каждого ИмяОбработчика Из ЗапрещенныеОбработчикиОжидания Цикл
			ПодключениеИР.ОтключитьОбработчикОжидания(ИмяОбработчика);
		КонецЦикла;
		УстановитьРежимЗаменыШтатнойПодсказки(Истина);
		СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР", ПодключениеИР);
		СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИД", МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс());
		СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.Кэш", Новый Соответствие);
		СохранитьЗначениеСеансаКонфигуратора("ИмяФайлаБуфера", ИмяФайлаБуфера);
	Исключение
		ЗавершитьОперациюПодключения(УведомлениеЗапуска);
		ВызватьИсключение;
	КонецПопытки;
	ЗавершитьОперациюПодключения(УведомлениеЗапуска);
	// ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта); // Видимо позже еще раз берет фокус
	Возврат ПодключениеИР; 
КонецФункции

Функция ИмяИсполняемогоФайла()
	Результат = ТурбоКонф.ПолучитьПутьКИсполняемомуФайлу(Конфигуратор.ГлавноеОкно) + "\1cv8.exe";
	Возврат Результат;
КонецФункции

Процедура ЗавершитьОперациюПодключения(УведомлениеЗапуска)
	ТурбоКонф.СкрытьВсплывающееУведомление(УведомлениеЗапуска);
КонецПроцедуры

//&ВосстанавливатьБуферОбмена
Процедура НайтиПоследнееИзменениеМетода()
	ТипЭлементаИнтерфейса = ПолучитьТипТекущегоЭлемента();
	Если Не ЭтоДокумент(ТипЭлементаИнтерфейса) Тогда
		Возврат;
	КонецЕсли;
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МетодМодуля = ПолеТекстаПрограммы.мМетодМодуля;
	Если МетодМодуля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяМетода = МетодМодуля.Имя;
	ОпределениеРабочее = ПолеТекстаПрограммы.ТекстМетодаСОписанием(МетодМодуля);
	ТипМодуля = ПолеТекстаПрограммы.мМодульМетаданных.ТипМодуля;
	ТурбоКонф.КонтролКлавиша(Клавиши.T);
	ТурбоКонф.КонтролШифтКлавиша(Клавиши.F10);
	ТурбоКонф.КликнутьПоЭлементу("Выборочная история объекта", "элемент меню", 0, Ложь);
	ТурбоКонф.КликнутьПоЭлементу("Модуль", "элемент меню", 0, Ложь);
	ТурбоКонф.КликнутьПоЭлементу("Модуль объекта", "элемент меню", 0, Ложь);
	ТурбоКонф.КликнутьПоЭлементу("Форма", "элемент меню", 0, Ложь);
	ОкноФильтра = ТурбоКонф.ЖдатьОкно("Отбор выборочной истории объекта", 2000, Истина);
	Если ОкноФильтра = 0 Тогда
		Возврат;
	КонецЕсли;
	ТурбоКонф.Клавиша(Клавиши.Enter);
	ТурбоКонф.ЖдатьЗакрытияОкна(ОкноФильтра, "", 1000);
	ТекстСтрокиИсторииСтарый = "";
	ТурбоКонф.Ждать(500); // Было 300
	Пока Истина Цикл
		ТурбоКонф.КонтролШифтКлавиша(Клавиши.F10); 
		ТурбоКонф.КликнутьПоЭлементу("Сравнить выборочно с объектом конфигурации", "элемент меню", 0, Ложь);
		ТурбоКонф.КликнутьПоЭлементу("Модуль", "элемент меню", 0, Ложь);
		ТурбоКонф.КликнутьПоЭлементу("Модуль объекта", "элемент меню", 0, Ложь);
		ТурбоКонф.КликнутьПоЭлементу("Форма (Модуль)", "элемент меню", 0, Ложь);
		ТурбоКонф.Ждать(100);
		ЗаголовокОкна = ТурбоКонф.ПолучитьЗаголовокТекущегоОкна();
		Если ЗаголовокОкна = "Выборочное сравнение" Тогда
			// Версии идентичны. Нажимаем ОК
			ТурбоКонф.Клавиша(Клавиши.Enter);
		Иначе
			ТурбоКонф.Клавиша(Клавиши.Tab);
			РазобратьПозициюВТексте();
			ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь,, Ложь);
			СтрокаМетода = ПолеТекстаПрограммы.мМодульМетаданных.Методы.Найти(НРег(ИмяМетода), "НИмя");
			ОпределениеИзВерсии = "";
			Если СтрокаМетода <> Неопределено Тогда
				ОпределениеИзВерсии = ПолеТекстаПрограммы.ТекстМетодаСОписанием(СтрокаМетода);
			КонецЕсли;
			Если ОпределениеИзВерсии <> ОпределениеРабочее Тогда
				ТурбоКонф.КонтролКлавиша(Клавиши.F);
				ТурбоКонф.ЖдатьОкно("Поиск", 1000, Истина);
				ТурбоКонф.ВставитьТекст(СтрПолучитьСтроку(СокрЛ(ОпределениеРабочее), 1));
				ТурбоКонф.Клавиша(Клавиши.Enter); 
				ВосстановитьОкноПриложения(ПодключениеИР);
				МодулиИР.ирКлиент.Сравнить2ЗначенияВФормеЛкс(ОпределениеИзВерсии, ОпределениеРабочее,, "Старая", "Новая",,,,, "ВстроенныйЯзык", ИмяМетода);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ТурбоКонф.Клавиша(Клавиши.Escape);
		ТекстСтрокиИсторииНовый = ПолучитьВыделенныйТекст();
		Если ТекстСтрокиИсторииСтарый = ТекстСтрокиИсторииНовый Тогда
			Прервать;
		КонецЕсли;
		ТекстСтрокиИсторииСтарый = ТекстСтрокиИсторииНовый;
		ТурбоКонф.Клавиша(Клавиши.Up);
	КонецЦикла;

КонецПроцедуры

Процедура НажатьКлавишуЦикл(Клавиша, Количество)
	Для Счетчик = 1 По Количество Цикл
		ТурбоКонф.Клавиша(Клавиша);
	КонецЦикла;
КонецПроцедуры

Процедура РазобратьПозициюВТексте(ПолучатьТипЭлемента = Истина)
	Если ПолучатьТипЭлемента Тогда
		ТипЭлементаИнтерфейса = ПолучитьТипТекущегоЭлемента(); // 8мс
	КонецЕсли;
	Сообщить("Разобрана позиция в элементе интерфейса типа """ + ТипЭлементаИнтерфейса + """");
	ВыделенныйТекст = "";
	ПозицияВТексте = 0;
	НомерСтроки = 0;
	НомерКолонки = 0;
	ТекстМодуля = "";
	Если ЭтоДокумент(ТипЭлементаИнтерфейса) Тогда
		ТекстМодуля = ТурбоКонф.ПолучитьТекстСПозицией(ВыделенныйТекст, ПозицияВТексте, НомерКолонки, НомерСтроки);
	КонецЕсли;
КонецПроцедуры

Функция МодулиИР(Знач Приложение, Знач ЭтоПервоеПодключение = Ложь, выхИспользуемоеИмяФайлаПортативногоИР = "") Экспорт
	ИспользуемоеИмяФайла = "";
	Попытка
		ирПлатформа = Приложение.ирПортативный;
		//ФлагОбновления = Приложение.ирПлатформа; // Вызывает 200мс задержку в некоторых случаях
		ФлагОбновления = Приложение.ирПерехватКлавиатуры;
		Значение = Приложение;
	Исключение
		Если Не ЗначениеЗаполнено(ПапкаПортативногоИР) Тогда
			ПапкаПортативногоИР = ТекущийКаталог() + "\" + ТурбоКонф.ПолучитьКаталогСкрипта() + "\ИР";
			Файл = Новый Файл(ПапкаПортативногоИР);
			Сообщить("Каталог ИР = " + ПапкаПортативногоИР);
			Если Не Файл.Существует() Тогда
				СоздатьКаталог(ПапкаПортативногоИР);
				Файл = Новый Файл(ПапкаПортативногоИР + "\ИР.zip");
				Попытка
					ТурбоКонф.ЗагрузитьФайл("http://devtool1c.ucoz.ru/load/0-0-1-6-20", Файл.ПолноеИмя, ЭтотОбъект, "ПослеЗавершенияЗагрузкиФайла", Файл.ПолноеИмя);  
				Исключение
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "В базе нет подсистемы """ + НазваниеПодсистемы() + """ и в " + ПапкаПортативногоИР + " нет ее портативного варианта."
						+ " Ссылки для скачивания на случай недоступности сайта ИР:
						|Расширение - http://devtool1c.ucoz.ru/load/osnovnye/ustanovshhik_varianta_rasshirenie/1-1-0-21 
						|Портативный - http://devtool1c.ucoz.ru/load/osnovnye/portativnye_instrumenty_razrabotchika_dlja_1s_8_2/1-1-0-6", 6000);
				КонецПопытки;  
				ПапкаПортативногоИР = "";
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПапкаПортативногоИР) Тогда
			Попытка
				Значение = Приложение.ВнешниеОбработки.ПолучитьФорму(ПапкаПортативногоИР + "\ирПортативный.epf");
			Исключение
				// Платформа 1С не позволяет ловить такие исключения
			КонецПопытки;
			Если Значение <> Неопределено Тогда
				выхИспользуемоеИмяФайлаПортативногоИР = Значение.ИспользуемоеИмяФайла; 
				Если ЭтоПервоеПодключение Тогда
					Приложение.Visible = Истина; // Должно быть видимым на случай различных диалогов, например предупреждений безопасности
				КонецЕсли;
				Если Не Значение.Открыта() Тогда
					Значение.Открыть();
					Если Не Значение.Открыта() Тогда
						ФлагОбновления = "ВерсияИРОбновлена";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Для портативного """ + НазваниеПодсистемы() + """ нужно обычное клиентское приложение, а запущено управляемое."
					+ " Поэтому запускаем установщик расширения.", 10000);
				Приложение.ЗапуститьСистему("/Execute""" + ПапкаПортативногоИР + "\Модули\ирУстановщикРасширения.epf""");
				ЗакрытьПриложениеИР();
			КонецЕсли;
		КонецЕсли;
	КонецПопытки; 
	Если ФлагОбновления = "ВерсияИРОбновлена" Тогда
		//ЗакрытьПриложениеИР(, "закрыта базовая форма");
		//ЗакрытьПриложениеИР(, "обновлена версия ИР"); // https://turboconf.ru/Tasks/9188
		ИДПриложения = 0;
		ПодключениеИР = ПодключениеИРИзКэша(, ИДПриложения);
		Если ПодключениеИР <> Неопределено Тогда
			ПроцессОС = ПолучитьПроцессОС(ИДПриложения);
			Если ПроцессОС <> Неопределено Тогда
				УбитьПроцесс(ПроцессОС);
			КонецЕсли;
		КонецЕсли;
		ВызватьИсключение "Повторите команду";
	КонецЕсли;
	//! Значение = Приложение;
	Возврат Значение;
КонецФункции

Функция ПолучитьПроцессОС(Знач ИдентификаторПроцесса, ИмяИсполняемогоФайла = "1cv8.exe") Экспорт
	WMIЛокатор = ПолучитьCOMОбъектWMIЛкс();
	// ТекстОтбора = "1=1 AND"; Синтаксис WQL такого не допускает
	ТекстОтбора = "";
	// Если ЗначениеЗаполнено(ИдентификаторПроцесса) Тогда
		Если ТекстОтбора <> "" Тогда
			ТекстОтбора = ТекстОтбора + "AND ";
		КонецЕсли; 
		ТекстОтбора = ТекстОтбора + " ProcessID = " + XMLСтрока(ИдентификаторПроцесса);
	// КонецЕсли; 
	Если ЗначениеЗаполнено(ИмяИсполняемогоФайла) Тогда
		Если ТекстОтбора <> "" Тогда
			ТекстОтбора = ТекстОтбора + "AND ";
		КонецЕсли; 
		ТекстОтбора = ТекстОтбора + " Name = '" + ИмяИсполняемогоФайла + "'";
	КонецЕсли; 
	Значение = Неопределено; 
	ТекстЗапросаWQL = "Select * from Win32_Process Where " + ТекстОтбора;
	ВыборкаПроцессовОС = WMIЛокатор.ExecQuery(ТекстЗапросаWQL);
	Для Каждого ПроцессОС Из ВыборкаПроцессовОС Цикл
		Значение = ПроцессОС;
		Сообщить("Процесс ОС найден");
		Прервать;
	КонецЦикла;
	Возврат Значение;
КонецФункции

Процедура УбитьПроцесс(ПроцессОС, Причина = "") Экспорт
	Попытка
		ПроцессОС.Terminate();
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	ТурбоКонф.ПоказатьУведомление("Процесс приложения " + НазваниеПриложения() + " завершен " + Причина);
КонецПроцедуры

Функция ПолучитьCOMОбъектWMIЛкс() Экспорт
	//http://msdn.microsoft.com/en-us/library/windows/desktop/aa389763(v=vs.85).aspx
	Locator = Новый COMОбъект("WbemScripting.SWbemLocator");
	Значение = Locator.ConnectServer(".", "root\cimv2");
	Возврат Значение;
КонецФункции

// Внешний вызов
Процедура ПриПодключенииКонфигуратора(Параметры)
	ПроверитьРазрешениеИР();
КонецПроцедуры

Функция ВосстановитьЗначениеБазы(Ключ, Шифрование = Ложь)
	База = СтрокаСоединенияБазыКонфигуратора();
	Значение = ТурбоКонф.ВосстановитьЗначение(База + Ключ, Шифрование);
	Сообщить("ВосстановитьЗначениеБазы. База=" + База + ";" + Ключ + "=" + ?(Шифрование, "***", Значение));
	Возврат Значение;
КонецФункции

Функция СохранитьЗначениеБазы(Ключ, Значение, Шифрование = Ложь)
	База = СтрокаСоединенияБазыКонфигуратора();
	ТурбоКонф.СохранитьЗначение(База + Ключ, Значение, Шифрование);
	Сообщить("СохранитьЗначениеБазы. База=" + База + ";" + Ключ + "=" + ?(Шифрование, "***", Значение));
КонецФункции

Функция СообщениеКакЗабытьВыбор()
	Возврат " Команда ""ИР.СброситьНастройкиИРБазы"" позволяет настроить подключение заново.";
КонецФункции

Процедура СброситьНастройкиИРБазы(Знач Параметры = Неопределено)
	Если Не ЗакрытьПриложениеИР() Тогда
		Возврат;
	КонецЕсли;
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	УстановитьРежимЗаменыШтатнойПодсказки(Ложь);
	СохранитьЗначениеБазы("РазрешенИР", Неопределено);
	СохранитьЗначениеБазы("ПарольИлиСтрокаСоединения", Неопределено);
	ПроверитьРазрешениеИР(); 
КонецПроцедуры

Функция ПроверитьРазрешениеИР(Отказ = Ложь)
	РазрешенИР = ВосстановитьЗначениеБазы("РазрешенИР");
	Если РазрешенИР = Ложь Тогда
		Если ВосстановитьЗначениеСеансаКонфигуратора("УведомлениеОЗапретеОтображалось") <> Истина Тогда
			Параметры = Новый Структура("ОкноКонфигуратора", Конфигуратор.ГлавноеОкно);
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Вы запретили приложение " + НазваниеПриложения() + " для этой базы." + СообщениеКакЗабытьВыбор(), 10000,
				ЭтотОбъект, "ОбработчикУведомленияЗабытьВыбор", Параметры);
			СохранитьЗначениеСеансаКонфигуратора("УведомлениеОЗапретеОтображалось", Истина);
			Если ЛиДоступнаЧистаяПодсказка() Тогда
				//ТекущееЗначениеАвтоподсказки = ЛиАвтоПодсказкаКонфигуратора();
				//Если ТекущееЗначениеАвтоподсказки <> Истина Тогда
					//УстановитьАвтоподсказкуКонфигуратора(Истина); //  Много побочных эффектов, которые у себя пока не смог воспроизвести https://turboconf.ru/Tasks/9400
					ПредложитьУстановитьАвтоподсказку(Истина);
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли
	ИначеЕсли РазрешенИР = Неопределено Тогда
		Отказ = Истина;
		ВопросПользователю = НовыйВопросПользователю();
		ВопросПользователю.Заголовок = "TurboConf";
		ВопросПользователю.Текст = "Разрешить приложение " + НазваниеПриложения() + " для этой базы? 
		|Это необходимо для работы команд ИР." + СообщениеКакЗабытьВыбор();
		ВопросПользователю.УстановитьОбработчик(ЭтотОбъект, "ОбработчикОтветаРазрешитьИР");
		ВопросПользователю.Показать();  
	Иначе  
		// ПодключениеИР();
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

//.
// Возвращаемое значение:
//    ВопросПользователю - 
Функция НовыйВопросПользователю() Экспорт
	// https://github.com/EvilBeaver/OneScript/issues/1399
	Если ТурбоКонф.ПолучитьВерсиюТурбоКонф() >= "6.1.8847.27150" Тогда
		// Вариант для ОСкрипт 1.9 
		Параметры = Новый Массив;
		Параметры.Добавить(РежимДиалогаВопрос.ДаНетОтмена);
		ВопросПользователю = Новый ("ВопросПользователю", Параметры);
	Иначе
		// Вариант для ОСкрипт 1.7 
		ВопросПользователю = Новый ("ВопросПользователю", РежимДиалогаВопрос.ДаНетОтмена); 
	КонецЕсли;
	Возврат ВопросПользователю;
КонецФункции

Процедура УстановитьРежимЗаменыШтатнойПодсказки(Знач НовоеЗначение) Экспорт
	ТурбоКонф.СохранитьЗначениеСеанса(Строка(Конфигуратор.ГлавноеОкно)+"_"+"T9AlwaysShowOnCtrlSpace", НовоеЗначение);
КонецПроцедуры

Процедура ОбработчикУведомленияЗабытьВыбор(Параметры)
	СброситьНастройкиИРБазы();
КонецПроцедуры

Процедура ОбработчикОтветаРазрешитьИР(Значение, Параметры) Экспорт
	Если Значение = КодВозвратаДиалога.Да Тогда
		ВводПароля();
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		СохранитьЗначениеБазы("РазрешенИР", Ложь);
		ПроверитьРазрешениеИР();
	КонецЕсли;
КонецПроцедуры

Процедура ВводПароля()
	ИнфоПроцесса = ИнфоПроцесса();
	ПримерСтрокиСоединения = "File=""C:\БД"";Usr=""1"";Pwd=""2""";
	Форма = Новый ("ФормаВводаЗначения");
	Форма.УстановитьОбработчик(ЭтотОбъект, "ОбработчикВводаПароля");
	Форма.Значение = "";
	Форма.Заголовок = "Введите параметры подключения " + НазваниеПриложения();
	Форма.Текст = "Введите пароль пользователя """ + ИнфоПроцесса.Пользователь + """, чтобы приложение " + НазваниеПриложения() + " подключалось к этой базе.
	|Либо введите строку соединения базы с такой же конфигурацией в виде " + ПримерСтрокиСоединения + " для подключения к ней. Для аутентификации ОС укажите строку без имени и пароля.";
	//Форма.МногострочныйРежим = Истина;
	Форма.РежимВводаПароля = Истина;
	Форма.Показать();
	Сообщить("Пример строки соединения " + НазваниеПриложения() + ": " + ПримерСтрокиСоединения);
КонецПроцедуры

Процедура ОбработчикВводаПароля(Значение, Отказ, Параметры) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	ПодключеноНоНетПодсистемы = Ложь;
	ПодключениеИР = ПодключениеИР(Значение,, Ложь,, ПодключеноНоНетПодсистемы);
	Если ПодключениеИР <> Неопределено Тогда
		СохранитьЗначениеБазы("РазрешенИР", Истина);
		СохранитьЗначениеБазы("ПарольИлиСтрокаСоединения", Значение, Истина);
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Подключено приложение " + НазваниеПриложения());
		МодулиИР = МодулиИР(ПодключениеИР, Истина);
		Если Не ЗначениеЗаполнено(МодулиИР.ирОбщий.ДатаОбновленияКэшаМодулейЛкс()) Тогда 
			ОбновитьКэшМодулей(ПодсказкаОбновленияКэшаМодулей());
		КонецЕсли;
	ИначеЕсли ПодключеноНоНетПодсистемы Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Сначала установите совместимую версию ИР. Затем вызовите в конфигураторе любую команду ИР для повтора подключения.", 5000);
	Иначе
		ПроверитьРазрешениеИР();
	КонецЕсли;
КонецПроцедуры

Функция ПодсказкаОбновленияКэшаМодулей()
	Результат = " Обновить его можно командой ОбновитьКэшМодулей";
	Возврат Результат;
КонецФункции

Процедура ОбновитьКэшМодулей(ДобавкаТекста = "")
	Если Не ПроверитьРазрешениеИР() Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Сначала нужно разрешить " + НазваниеПриложения() + " для этой базы!", 5000, ЭтотОбъект, "СброситьНастройкиИРБазы");
		Возврат;
	КонецЕсли;
	ВопросПользователю = НовыйВопросПользователю();
	ВопросПользователю.Заголовок = "TurboConf";
	ВопросПользователю.Текст = "Заполнить кэш модулей " + НазваниеПриложения() + " с закрытием конфигуратора? 
	|Ответ ""Нет"" потребует автономный сервер.
	|Кэш модулей необходим командам ИР для видения остальных модулей, кроме текущего, который обновляется при вызове любой команды.
	|" + ДобавкаТекста;
	ВопросПользователю.УстановитьОбработчик(ЭтотОбъект, "ОбработчикОтветаЗаполнитьКэшМодулей");
	ВопросПользователю.Показать();  	
КонецПроцедуры

Процедура ОбработчикОтветаЗаполнитьКэшМодулей(Значение, Параметры) Экспорт
	Если Значение = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ИмяИсполняемогоФайла = ИмяИсполняемогоФайла();
	ИДКонфигуратора = Конфигуратор.PID;
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	СтрокаКоманды = ЗапуститьТолстыйКлиент(Ложь, Ложь, "/CОбновитьКэшМодулейИР;" + (Не Булево("" + Значение)), ИмяИсполняемогоФайла, Значение = КодВозвратаДиалога.Да, Ложь);
	ТурбоКонф.СохранитьЗначениеСеанса("СтрокаЗапускаОбновлениеКэшаМодулей", СтрокаКоманды);
	Если Значение = КодВозвратаДиалога.Да Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Закройте этот конфигуратор, если он не закроется сам, чтобы запустилась выгрузка модулей", 5000);
		ТурбоКонф.Ждать(50);
		ТурбоКонф.АльтКлавиша(Клавиши.F4);
	КонецЕсли; 
КонецПроцедуры

// Внешний вызов    
Процедура ПриЗакрытииКонфигуратора(Параметры)
	СтрокаЗапуска = ТурбоКонф.ВосстановитьЗначениеСеанса("СтрокаЗапускаОбновлениеКэшаМодулей");
	Сообщить("СтрокаЗапускаОбновлениеКэшаМодулей=" + СтрокаЗапуска);
	// TODO сделать проброс ИДКонфигуратора
	//ПодключениеИР = ПодключениеИРИзКэша(Параметры.PID);
	//Если ПодключениеИР <> Неопределено Тогда
	//	ПередатьИзмененияМодулей(ПодключениеИР);
	//КонецЕсли;
	ЗакрытьПриложениеИР(Параметры.PID, " после закрытия конфигуратора"); // При обновлении кэша раньше закрывали без сохранения настроек, чтобы не потерялись настройки конфигуратора https://turboconf.ru/Tasks/8425
	Если ЗначениеЗаполнено(СтрокаЗапуска) Тогда
		ЗапуститьПриложение(СтрокаЗапуска);
	КонецЕсли;
	ТурбоКонф.СохранитьЗначениеСеанса("СтрокаЗапускаОбновлениеКэшаМодулей", Неопределено);
КонецПроцедуры

// Внешний вызов
Процедура ПриЗавершенииРаботыПрограммы()
	ПодлюченныеКонфигураторы = ПодлюченныеКонфигураторы();
	Для каждого КлючИЗначение Из ПодлюченныеКонфигураторы Цикл
		ЗакрытьПриложениеИР(КлючИЗначение.Ключ, "после завершения ТурбоConf");
	КонецЦикла;
КонецПроцедуры

Процедура ОткрытьЖурналРегистрации(Параметры = Неопределено)
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	ТурбоКонф.ОткрытьМеню("Администрирование", "Журнал регистрации");
КонецПроцедуры

// ИмяИсполняемогоФайла передаем когда процесс нет активного конфигуратора
//
// Параметры:
//  ПодключитьОтладчик	 - 	 - 
//  СПользователем		 - 	 - 
//  ДопПараметры		 - 	 - 
//  ИмяИсполняемогоФайла - 	 - 
//  ТолькоВернутьСтроку	 - 	 - 
//  ЛиВБазеКонфигуратора - Булево - если база приложения ИР не совпадает с базой конфигуратора, то брать строку параметры запуска от базы конфигуратора
// 
// Возвращаемое значение:
//   - 
//
Функция ЗапуститьТолстыйКлиент(Знач ПодключитьОтладчик = Истина, Знач СПользователем = Истина, Знач ДопПараметры = "", Знач ИмяИсполняемогоФайла = "", Знач ТолькоВернутьСтроку = Ложь, Знач ЛиВБазеКонфигуратора = Истина)
	ДобавкаПортативныйИР = "";
	ИспользуемоеИмяФайлаИР = ВосстановитьЗначениеБазы("ИспользуемоеИмяФайлаПортативногоИР");
	Если ИспользуемоеИмяФайлаИР = Неопределено Тогда
		ПодключениеИР();
		ИспользуемоеИмяФайлаИР = ВосстановитьЗначениеБазы("ИспользуемоеИмяФайлаПортативногоИР");
	КонецЕсли;
	Если ЗначениеЗаполнено(ИспользуемоеИмяФайлаИР) Тогда
		ДобавкаПортативныйИР = "/Execute""" + ИспользуемоеИмяФайлаИР + """";
	КонецЕсли;
	ДобавкаАдресОтладчика = "";
	Если ПодключитьОтладчик Тогда
		АдресОтладчика = ВосстановитьЗначениеСеансаКонфигуратора("АдресОтладчика");
		Если АдресОтладчика = Неопределено Тогда
			Если Не ТурбоКонф.НайтиЭлементПоИмени("Отладка", "кнопка") Тогда
				Возврат "";
			КонецЕсли;
			ТурбоКонф.КликнутьПоЭлементу("Отладка", "кнопка", 0, Ложь);
			ТурбоКонф.КликнутьПоЭлементу("Подключение...", "кнопка", 0, Ложь); // Мультиметка777238164
			Окно = ТурбоКонф.ЖдатьОкно("Предметы отладки", 2000, Ложь);
			Если Окно <> 0 Тогда
				ТурбоКонф.Ждать(50);
				ЗаголовокКнопки = "Настройкa..."; // Посленяя "a" - буква английского алфавита!
				ТурбоКонф.КликнутьПоЭлементу(ЗаголовокКнопки, "кнопка", 0, Ложь);
				Окно = ТурбоКонф.ЖдатьОкно("Настройки отладчика", 1000, Ложь);
				Если Окно = 0 Тогда
					ТурбоКонф.Клавиша(Клавиши.Escape);
					Возврат "";
				КонецЕсли;
			КонецЕсли;
			Если Окно <> 0 Тогда
				ТурбоКонф.ШифтКлавиша(Клавиши.Tab);
				СтароеЗначениеБуфера = ТурбоКонф.ПолучитьБуферОбмена();
				АдресОтладчика = ПолучитьВыделенныйТекст();
				Если ЗначениеЗаполнено(АдресОтладчика) И СтароеЗначениеБуфера <> АдресОтладчика Тогда
					СохранитьЗначениеСеансаКонфигуратора("АдресОтладчика", АдресОтладчика);
				КонецЕсли;
				ТурбоКонф.Клавиша(Клавиши.Escape);
				ТурбоКонф.Клавиша(Клавиши.Escape);
			КонецЕсли
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресОтладчика) Тогда
			ДобавкаАдресОтладчика = " /DEBUGGERURL""" + АдресОтладчика + """";
		КонецЕсли;
	КонецЕсли;
	Возврат ЗапуститьПриложение1С("/DEBUG" + ДобавкаАдресОтладчика + " " + ДобавкаПортативныйИР + " " + ДопПараметры, СПользователем, ИмяИсполняемогоФайла, ТолькоВернутьСтроку, ЛиВБазеКонфигуратора);
КонецФункции

// ИмяИсполняемогоФайла передаем когда нет активного конфигуратора
Функция ЗапуститьПриложение1С(Знач ДопПараметры, Знач СПользователем = Истина, Знач ИмяИсполняемогоФайла = "", Знач ТолькоВернутьСтроку = Ложь, Знач ЛиВБазеКонфигуратора = Истина)
	Если ПустаяСтрока(ИмяИсполняемогоФайла) Тогда
		ИмяИсполняемогоФайла = ИмяИсполняемогоФайла();
	КонецЕсли;
	Если ЛиВБазеКонфигуратора Тогда
		СтрокаСоединения = СтрокаСоединенияБазыКонфигуратора(СПользователем);
	Иначе 
		СтрокаСоединенияБазыИР(, СтрокаСоединения, СПользователем);
	КонецЕсли;
	СтрокаСоединения = """" + СтрЗаменить(СтрокаСоединения, """", """""") + """";
	Результат = """" + ИмяИсполняемогоФайла + """ ENTERPRISE /IBConnectionString" + СтрокаСоединения + " " + ДопПараметры;
	Если ТолькоВернутьСтроку Тогда
		Возврат Результат;
	Иначе 
		ЗапуститьПриложение(Результат);
	КонецЕсли;
КонецФункции

// Внешний вызов
Процедура ПриАктивизацииСтрокиT9(Параметры, Отказ, СтандартнаяОбработка)
	Если Не ПроверитьРазрешениеИР(Отказ) Тогда
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецЕсли;
	ПолеТекстаПрограммы = ВосстановитьЗначениеСеансаКонфигуратора("ПолеТекстаПрограммы"); // ОбработкаОбъект.ирКлсПолеТекстаПрограммы
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	МоментНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ОписаниеКом = ПолеТекстаПрограммы.ОписаниеТекущегоСловаАвтодополнения(Параметры.Значение, Параметры.ЭтоМетод, Параметры.КлючСловаря);
	Если ОписаниеКом = Неопределено Тогда
		// Противодействие вредному поведению Турбоконфа https://turboconf.ru/Tasks/9105
		Сообщение = "Отключите в настройках флажок ""Подсказывать имена колонок""";
		//ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), , 10000); // Не выводится на экран, т.к. поток не интерфейсный
		Описание = Новый Структура;
		Описание.Вставить("Тип", Сообщение);
		Описание.Вставить("Описание");
		Описание.Вставить("ЕстьПараметры");
	Иначе
		ТипСлова = ОписаниеКом.Тип;
		//Если ЗначениеЗаполнено(ОписаниеКом.ЧислоРасширений) Тогда
		//	ТипСлова = "" + ОписаниеКом.ЧислоРасширений + ", " + ТипСлова;
		//КонецЕсли;
		Описание = Новый Структура;
		Описание.Вставить("Тип", ТипСлова);
		Описание.Вставить("Описание", ОписаниеКом.Описание);
		Описание.Вставить("ЕстьПараметры", ОписаниеКом.ЕстьПараметры);
		//Описание.Вставить("ЧислоРасширений", ОписаниеКом.ЧислоРасширений);
	КонецЕсли;
	Параметры.Описание = Описание;
	Сообщить("Расчет типа элемента списка - " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментНачала) + "мс");
КонецПроцедуры

Процедура ПослеЗавершенияЗагрузкиФайла(ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Если Файл.Имя = "ИР.zip" Тогда
		ЧтениеАрхива = Новый ЧтениеZipФайла(ИмяФайла);
		ЧтениеАрхива.ИзвлечьВсе(Файл.Путь);
		ЧтениеАрхива.Закрыть();
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
			// ScriptEngine.Machine.ExternalSystemException: ... (System.IO.IOException): Процесс не может получить доступ к файлу "C:\turboconf\user_scripts\ИР\ИР.zip", так как этот файл используется другим процессом.
		КонецПопытки;
		ВводПароля();
	КонецЕсли;
КонецПроцедуры

// Функция разбивает строку разделителем.
// Старые имена - РазбитьСтрокуРазделителем, ПолучитьМассивИзСтрокиСРазделителем
// 
// Параметры:
//  Стр      - Строка - которую разбиваем;
//  Разделитель - Строка, "." - символ-разделитель;
//  ОбрезатьНепечатныеСимволы - Булево, *Ложь - делать СокрЛП.
//  ОставлятьПустуюСтроку - Булево, *Истина - если передана пустая строка, то добавлять ее в массив
//
// Возвращаемое значение:
//  Массив - фрагментов.
//
Функция СтрРазделитьЛкс(Знач Стр, Знач Разделитель = ".", Знач ОбрезатьНепечатныеСимволы = Ложь, Знач ОставлятьПустуюСтроку = Истина, Знач _УчитыватьКавычки = Ложь, Знач _ПропускатьПустые = Ложь,
	Знач ТолькоПервыйРазделитель = Ложь) Экспорт
	
	МассивСтрок = Новый Массив;
	Если Истина
		И Не ОставлятьПустуюСтроку 
		И ПустаяСтрока(Стр)
	Тогда
		Возврат МассивСтрок;
	КонецЕсли;   
	ОбрезатьНепечатныеСимволыСразу = ОбрезатьНепечатныеСимволы;
	ДлинаРазделителя = СтрДлина(Разделитель);
	Пока 1=1 Цикл
		Поз = Найти(Стр, Разделитель);
		Если Поз=0 Тогда
			Фрагмент = Стр;
			Если ОбрезатьНепечатныеСимволыСразу Тогда
				Фрагмент = СокрЛП(Фрагмент);
			КонецЕсли;
			МассивСтрок.Добавить(Фрагмент);
			Прервать;
		КонецЕсли;
		Фрагмент = Лев(Стр, Поз-1);
		Если ОбрезатьНепечатныеСимволыСразу Тогда
			Фрагмент = СокрЛП(Фрагмент);
		КонецЕсли;
		МассивСтрок.Добавить(Фрагмент);
		Стр = Сред(Стр, Поз+ДлинаРазделителя);
		Если ТолькоПервыйРазделитель Тогда
			МассивСтрок.Добавить(Стр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивСтрок; 
		
КонецФункции

//&ТолькоТекстовыеДокументы
Процедура СохранитьМодульВФайл()
	ТурбоКонф.КонтролКлавиша(Клавиши.S);
	Если Истина
		И ТурбоКонф.ПолучитьВерсиюAPI() >= 6 
		И Не ТурбоКонф.ЭтоСкрипт 
	Тогда
		Возврат;
	КонецЕсли;
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекстМодуля) Или Не ЭтоДокумент() Тогда
		Возврат;    
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	Маркер = "//#Дублировать" + " в файл "; // Разделено для не обнаружения себя же
	ИмяФайла = СокрЛП(МодулиИР.ирОбщий.ТекстМеждуМаркерамиЛкс(ТекстМодуля, Маркер, Символы.ПС, Ложь));
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(ТекстМодуля);
		Текст.Записать(ИмяФайла);   
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), СтрШаблон("Текст модуля сохранен в файл %1", ИмяФайла), 2000);
	Иначе 
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Модуль не связан с файлом. В тексте модуля должна быть строка 
		|" + Маркер + "<Полное имя файла>", 4000);
	КонецЕсли;
КонецПроцедуры

// Получает идентификатор из любой строки.
//  "3-я Дебиторка По контрагентам с интервалами СНГ (для  Руководства)" => "_3_яДебиторкаПоКонтрагентамСИнтерваламиСНГ_дляРуководства_".
//
// Параметры:
//  Представление			 - 	 - Строка.
//  ЗаменаПустойСтроки		 - 	 - 
//  ДопРазрешенныеСимволы	 - 	 - 
//  ЗаменаСпецСимвола		 - Строка - если пустая, то следующий символ приводится к верхнему регистру
// 
// Возвращаемое значение:
//  Строка - .
//
Функция ИдентификаторИзПредставленияЛкс(Знач Представление = Неопределено, Знач ЗаменаПустойСтроки = "_", ДопРазрешенныеСимволы = "", Знач ЗаменаСпецСимвола = "_") Экспорт

	Если ПустаяСтрока(Представление) Тогда
		Представление = ЗаменаПустойСтроки;
	КонецЕсли;
	Если Истина
		И СокрЛП(Представление) = Представление 
		И Найти(Представление, ",") = 0
	Тогда
		Попытка
			Пустышка = Новый Структура(Представление);
			Возврат Представление;
		Исключение КонецПопытки;
	КонецЕсли; 
	НовоеПредставление = Представление;
	ПервыйСимвол = Сред(Представление, 1, 1);
	Если ЛиЦифраЛкс(ПервыйСимвол) Тогда
		// Первый символ - цифра
		НовоеПредставление = "_" + НовоеПредставление;
	КонецЕсли;
	ПредыдущийСимвол = " ";
	ТекущаяСтрока = "";
	ШаблонСимволаИдентификатора = ШаблонСимволаИдентификатораЛкс(ДопРазрешенныеСимволы);
	Для Счетчик = 1 По СтрДлина(НовоеПредставление) Цикл
		ТекущийСимвол = Сред(НовоеПредставление, Счетчик, 1);
		Если ПустаяСтрока(ПредыдущийСимвол) Тогда
			// Предыдущий символ - непечатаемый или спецсимвол
			ТекущийСимвол = ВРег(ТекущийСимвол);
		КонецЕсли;
		Если Найти(ШаблонСимволаИдентификатора, НРег(ТекущийСимвол)) > 0 Тогда
			// Предыдущий символ - непечатаемый
			ТекущаяСтрока = ТекущаяСтрока + ТекущийСимвол;
		Иначе
			Если Не ПустаяСтрока(ТекущийСимвол) Тогда
				ТекущаяСтрока = ТекущаяСтрока + ЗаменаСпецСимвола;
				Если ЗаменаСпецСимвола = "" Тогда
					ТекущийСимвол = " ";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПредыдущийСимвол = ТекущийСимвол;
	КонецЦикла;
	Результат = ТекущаяСтрока;
	Возврат ТекущаяСтрока;

КонецФункции

Функция ШаблонСимволаИдентификатораЛкс(Знач ДопРазрешенныеСимволы = "") Экспорт 
	
	РусскиеБуквы = РусскиеБуквыЛкс();
	ШаблонСимволаИдентификатора = НРег("_0123456789" + РусскиеБуквы + "abcdefghijklmnopqrstuvwxyz" + ДопРазрешенныеСимволы); // Русский и Ангийский
	Возврат ШаблонСимволаИдентификатора;

КонецФункции

Функция РусскиеБуквыЛкс() Экспорт 
	
	РусскиеБуквы = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	Возврат РусскиеБуквы;

КонецФункции  

Функция ЛиЦифраЛкс(Символ) Экспорт 
	Результат = Символ <> "" И Найти("0123456789", Символ) > 0;
	Возврат Результат;
КонецФункции

// Внешний вызов     
//&ВосстанавливатьБуферОбмена
Процедура ПриОткрытииОкна(Параметры)
	ЗаголовокОкна = Параметры.Заголовок;
	//Сообщить("Активировано окно - " + ЗаголовокОкна);
	Если Конфигуратор = Неопределено Тогда
		// Недоработка Турбоконфа в диалогах выбора файла https://turboconf.ru/Tasks/9001
		Возврат;
	КонецЕсли;
	Если ЗаголовокОкна = "Конфигуратор" Тогда
		ПарольИлиСтрокаСоединения = ВосстановитьЗначениеБазы("ПарольИлиСтрокаСоединения", Истина);
		ЕстьПанельБлокировкиБазы = Ложь;
		ЕстьНеверноеИмя = Ложь;
		Элементы = ТурбоКонф.НайтиЭлементыПоТипу("панель");
		Для каждого Элемент Из Элементы Цикл
			ЕстьПанельБлокировкиБазы = СтрНачинаетсяС(Элемент, "Ошибка исключительной блокировки");
			ЕстьНеверноеИмя = СтрНачинаетсяС(Элемент, "Неверное имя!");
		КонецЦикла;
		Если Истина
			И ЕстьПанельБлокировкиБазы
			И ПодключениеИРИзКэша() <> Неопределено 
			И Не ЛиСтрокаСоединения(ПарольИлиСтрокаСоединения)
		Тогда 
			ТекстОбновитьДинамически = "Обновить динамически";
			ЕстьКнопкаОбновитьДинамически = ТурбоКонф.НайтиЭлементПоИмени(ТекстОбновитьДинамически, "кнопка");
			Если ЕстьКнопкаОбновитьДинамически Тогда 
				//ТурбоКонф.КликнутьПоЭлементу(ТекстОбновитьДинамически, "кнопка", 0, Ложь); // Метод признан ненадежным https://turboconf.ru/Tasks/8611
				УспехУстановкиФокуса = ТурбоКонф.УстановитьФокусНаЭлемент(ТекстОбновитьДинамически, "кнопка");
				Если УспехУстановкиФокуса Тогда
					ТурбоКонф.Клавиша(Клавиши.Enter);
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Конфигурация БД обновлена динамически из-за подключенного приложения ИР", 3000);
				КонецЕсли;
			Иначе 
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Приложение ИР блокирует обновление базы. Кликни, чтобы закрыть приложение.", 4000, ЭтотОбъект, "ЗакрытьПриложениеИР");
			КонецЕсли;
		КонецЕсли;                                  
		Если ЕстьНеверноеИмя Тогда
			ТурбоКонф.Клавиша(Клавиши.Enter);
			Тип = ПолучитьТипТекущегоЭлемента();
			Если Тип = ТипЭлемента.Поле Тогда
				СтарыйТекст = ТурбоКонф.ПолучитьЗначение();
				НовыйТекст = ИдентификаторИзПредставленияЛкс(СокрЛП(СтарыйТекст));
				//ТурбоКонф.УстановитьЗначение(НовыйТекст); // В палитре свойств не взводится модифицированность 
				ТурбоКонф.УстановитьЗначение(""); 
				ТурбоКонф.ВставитьТекст(НовыйТекст); // В палитре свойств взводится модифицированность 
				ТурбоКонф.Клавиша(Клавиши.End);
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Значение имени преобразовано из """ + СтарыйТекст + """", 3000);
			КонецЕсли;
		КонецЕсли;                                  
	КонецЕсли;
	Если ВосстановитьЗначениеБазы("РазрешенИР") = Истина Тогда 
		Если ЗаголовокОкна = "Редактирование типа данных" Тогда
			// Ставим фокус в поле фильтра
			ТурбоКонф.КонтролАльтКлавиша(Клавиши.M); 
		КонецЕсли;
		Если Ложь
			Или ЗаголовокОкна = "Выберите файл конфигурации" 
			Или ЗаголовокОкна = "Получение объектов из хранилища конфигурации" 
			Или (Истина
				И ЗаголовокОкна = "Глобальный поиск по текстам" 
				И ТурбоКонф.НайтиЭлементПоИмени("Заменить все", "кнопка")
				И ТурбоКонф.ПолучитьДоступностьЭлемента("Заменить все", "кнопка"))
		Тогда
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "После массовых изменений модулей рекомендуется выполнить команду ОбновитьКэшМодулей", 4000, ЭтотОбъект);
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Внешний вызов   
Процедура ПриОбновленииКэша(Отказ, СтандартнаяОбработка)
	Если Не ПроверитьРазрешениеИР(Отказ) Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст); 
	ПолеТекстаПрограммы.мПлатформа.ОчиститьКэшАнализатораЯзыка();
	ПолеТекстаПрограммы.мМодульМетаданных = Неопределено;
	ПолеТекстаПрограммы.мМетодМодуля = Неопределено;
	ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), 
			"Памятный кэш анализатора кода очищен. 
			|Метаданные в приложении ИР обновляются при его перезапуске командой ЗакрытьПриложениеИР после обновления конфигурации БД. 
			|Модули в кэше приложения ИР обновляются автоматически при измении в окне модуля. Команда ОбновитьКэшМодулей обновляет их все.", 
			10000);
	Если ПолеТекстаПрограммы.ДатаОбновленияСтруктурыФормыМодуля() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбновитьСтруктуруФормы(ПолеТекстаПрограммы);
	ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Кэш активной управляемой формы обновлен. Он обновляется автоматически при вызове подсказки после точки от нового элемента", 6000);
КонецПроцедуры

ТурбоКонф = Новый ("ТурбоКонф");
// Служебная секция. Для контекстной подсказки
#Если Сервер И Не Сервер Тогда
	ТурбоКонф = Обработки.ТурбоКонф.Создать();
#КонецЕсли

// настройки
ПапкаПортативногоИР = ""; // Сюда можно вручную прописать путь, если нужен портативный вариант ИР из конкретной папки. По умолчанию он ищется в папке ".\user_scripts\ИР"
АвтоМаксимизацияОконМодулей = Ложь;

МинимальнаяВерсияИР = "7.14";
МинимальнаяВерсияТурбоКонф = "5.18.8668.31421";
ВерсияАдаптера = "1.52";
