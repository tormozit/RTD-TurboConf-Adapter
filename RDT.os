//@script_version 1
//@script_name ИРАдаптер
//@script_display_name ИРАдаптер
//@script_description Адаптер для подсистемы "Инструменты разработчика Tormozit"
//@script_author Tormozit
//@script_developer_url http://devtool1c.ucoz.ru/
//@script_section Редактирование
//@script_hotkey Control+Alt+U   АвтодополнениеМодальное ИР Автодополнение модальное
//@script_hotkey Control+M       ВыделитьМетод ИР Выделить метод
//@script_hotkey Alt+Shift+F9    ВычислитьВыражение ИР Вычислить выражение с контекстом
//@script_hotkey Control+Shift+Q ЗакрытьСлужебноеПриложение ИР Закрыть служебное приложение
//@script_hotkey Control+Alt+F12 НайтиСсылкиНаМетод ИР Найти ссылки на метод
//@script_hotkey Control+Shift+D ОтладитьОбъект ИР Отладить объект
//@script_hotkey Control+F12     ПерейтиКОпределению ИР Перейти к определению
//@script_hotkey Control+F11     ПолучитьСсылкуСтрокиМодуля ИР Получить ссылку строки модуля
//@script_hotkey Control+Alt+Space ПоказатьПараметрыМетода ИР Показать параметры метода
//@script_hotkey Control+Shift+E РедактироватьТекст ИР Редактировать текст
//@script_hotkey Alt+F1          СинтаксПомощник ИР Синтакс-помощник по слову
//@script_hotkey None            ДобавитьТочкиОстановаИзРезультатовПоиска ИР Добавить точки останова из результатов поиска
//@script_hotkey None            ВычислитьОписатьПараметрыМетода ИР Вычислить описать параметры метода
//@script_hotkey None            ЗапуститьТолстыйКлиент ИР Запустить толстый клиент
//@script_hotkey None            КопироватьВсеСтрокиВБуфер ИР Копировать все строки в буфер обмена
//@script_hotkey None            НайтиПоследнееИзменениеМетода ИР Найти последнее изменение метода
//@script_hotkey None            ОбновитьКэшМодулей ИР Обновить кэш модулей
//@script_hotkey None            РедактироватьКомпоновку ИР Редактировать компоновку
//@script_hotkey None            СброситьНастройкиБазы ИР Сбросить настройки базы
//@script_hotkey None            СписокОбщихМетодов ИР Список общих методов
//@script_hotkey None            СписокМетодовМодуля ИР Список методов модуля
//@retain_clipboard 0
//@enterprise_mode 0
//@hide_actions 0
//@min_api_version 5
//@turbomenu 1 // Отображать команды скрипта в подменю "Скрипты" основного меню ТурбоКонфа
//@AccessIBInfo 1 // ТурбоКонф сам подготовит параметры базы заранее, а не в момент выполнения скрипта
//@RequestDocInfo 0 // ТурбоКонф сам подготовит параметры документа перед каждым вызовом скрипта

// Настройки
Перем ПапкаПортативногоИР;
Перем АвтоМаксимизацияОконМодулей;

Перем ТурбоКонф;
Перем МинимальнаяВерсияИР;
Перем МинимальнаяВерсияТурбоКонф;
Перем ВерсияАдаптера;
Перем ЗаголовокОкна;
Перем ЗаголовокКонфигуратора;
Перем ВыделенныйТекст;
Перем ПозицияВТексте;
Перем НомерСтроки;
Перем НомерКолонки;
Перем ТекстМодуля;
Перем ЯзыкПрограммы;
Перем ТипПоляОкна;
Перем ЗаголовокПриложенияИР;

Функция НазваниеСкрипта()
	Возврат "ИР адаптер " + ВерсияАдаптера;
КонецФункции

Функция НазваниеПриложения()
	Возврат "ИР";
КонецФункции

Функция НазваниеПодсистемы()
	Возврат "Инструменты разработчика Tormozit";
КонецФункции

Процедура ОповеститьПользователяОПриостановке()
	ТурбоКонф.ПоказатьУведомление("Работа TurboConf ПРИОСТАНОВЛЕНА на время диалога с приложением """ + НазваниеПриложения() + """", 3000);
КонецПроцедуры

Процедура ОповеститьПользователяОВозобновлении()
	ТурбоКонф.ПоказатьУведомление("Работа TurboConf ВОЗОБНОВЛЕНА после диалога с приложением """ + НазваниеПриложения() + """", 3000);
КонецПроцедуры

Процедура РедактироватьТекст()
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекстМодуля) Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);

	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст);
	ЯзыкПрограммы = ПолеТекстаПрограммы.ЯзыкПрограммы;
	ОповеститьПользователяОПриостановке();
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх("^Текст.*", 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс());
	// ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх(".*", 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс());
	Значение = Ложь;
	ПодключениеИР.Visible = Истина;
	Попытка
		Если ЯзыкПрограммы = 0 Тогда
			ПолеТекстаПрограммы.КончитьОбработкуКоманды();
			ПолеТекстаПрограммы.РазобратьТекущийКонтекст();
			Значение = ПолеТекстаПрограммы.ОткрытьРедакторСтроковогоЛитерала();
		Иначе
			Значение = МодулиИР.ирКлиент.ОткрытьТекстЛкс(ТекстМодуля, "", "", Ложь, Неопределено, Неопределено, Ложь, Истина, ПолеТекстаПрограммы.ПолеТекста.ВыделениеДвумерное());
			ПолеТекстаПрограммы.УстановитьТекст(Значение);
			Значение = Значение <> Неопределено И ТекстМодуля <> Значение;
		КонецЕсли;
		ОповеститьПользователяОВозобновлении();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
		Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
	КонецПопытки;
	ТурбоКонф.ЗавершитьВызовВнешнегоОкнаАсинх(Конфигуратор.ОкноВызоваСкрипта);
	ПодключениеИР.Visible = Ложь;
	Если Значение Тогда
		Пустышка = 0;
		ТурбоКонф.Ждать(100); // Иначе при закрытии по CTRL+ENTER ПолучитьТекстМодуля() возвращает пусто
		ТурбоКонф.ОтжатьМодификаторы();
		НовыйТекстМодуляИзКонфигуратора = ТурбоКонф.ПолучитьТекстМодуля(ВыделенныйТекст, Пустышка);
		Если НовыйТекстМодуляИзКонфигуратора <> ТекстМодуля Тогда
			// Сообщить(ТекстМодуля);
			// Сообщить(НовыйТекстМодуляИзКонфигуратора);
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Текст в окне конфигуратора был изменен с начала редактирования. Вставка не выполнена. Фрагмент помещен в буфер обмена", 4000);
			Если ЯзыкПрограммы = 0 Тогда
				ТекстЛитерала = ПолеТекстаПрограммы.ВыделитьТекстовыйЛитерал();
			Иначе
				ТекстЛитерала = ПолеТекстаПрограммы.ПолеТекста.ПолучитьТекст();
			КонецЕсли;
			ТурбоКонф.УстановитьБуферОбмена(ТекстЛитерала);
		Иначе
			Если ЯзыкПрограммы = 0 И ПолеТекстаПрограммы.мМетодМодуля <> Неопределено Тогда
				// Заменяем только текущий метод
				ПолеТекстаПрограммы.РазобратьТекущийКонтекст();
				ТекстВставки = ПолеТекстаПрограммы.ОпределениеМетодаБезОписания();
				НачальнаяКолонкаМетода = 1 + СтрДлина(ТекстВставки) - СтрДлина(СокрЛ(ТекстВставки));
				ТекстВставки = СокрЛ(ТекстВставки);
				НомерСтрокиОпределенияМетода = СтрЧислоСтрок(Лев(ТекстМодуля, ПолеТекстаПрограммы.мМетодМодуля.ПозицияОпределения) + "й");
				ТурбоКонф.ПерейтиВПозицию(НачальнаяКолонкаМетода, НомерСтрокиОпределенияМетода); 
				ТурбоКонф.КонтролШифтКлавиша(Клавиши.OemCloseBrackets);
			Иначе
				// Заменяем весь модуль и теряем свертки
				ТекстВставки = ПолеТекстаПрограммы.ПолеТекста.ПолучитьТекст();
				ТурбоКонф.КонтролКлавиша(Клавиши.A);
				ТурбоКонф.Ждать(200);
			КонецЕсли;
			ТурбоКонф.ВставитьТекст(ТекстВставки, Истина);
			ВыделениеДвумерное = ПолеТекстаПрограммы.ПолеТекста.ВыделениеДвумерное();
			НомерСтроки = ВыделениеДвумерное.НачальнаяСтрока;
			НомерКолонки = ВыделениеДвумерное.НачальнаяКолонка;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовыйТекстМодуляИзКонфигуратора) Тогда
			ТурбоКонф.ПерейтиВПозицию(НомерКолонки, НомерСтроки);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ВыделитьМетод()
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗаголовокОкна = "Запрос" Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОповеститьПользователяОПриостановке();
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх("^Выделение метода.*", 5000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс());
	Значение = Ложь;
	// ПодключениеИР.Visible = Истина;
	Попытка
		Значение = ПолеТекстаПрограммы.ВыделитьМетод();
		ОповеститьПользователяОВозобновлении();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
		Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
	КонецПопытки;
	ТурбоКонф.ЗавершитьВызовВнешнегоОкнаАсинх(Конфигуратор.ОкноВызоваСкрипта);
	ТурбоКонф.ОтжатьМодификаторы();
	ПодключениеИР.Visible = Ложь;
	Если Значение = Ложь Тогда
		Возврат;
	ИначеЕсли Значение = "Ошибка" Тогда
		ВосстановитьОкноПриложения(ПодключениеИР);
	Иначе
		Пустышка = 0;
		НовыйТекстМодуляИзКонфигуратора = ТурбоКонф.ПолучитьТекстМодуля(ВыделенныйТекст, Пустышка);
		Если НовыйТекстМодуляИзКонфигуратора <> ТекстМодуля Тогда
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Текст в окне конфигуратора был изменен с начала редактирования. Вставка не выполнена. Фрагмент помещен в буфер обмена", 4000);
			ТекстЛитерала = ПолеТекстаПрограммы.ВыделитьТекстовыйЛитерал();
			ТурбоКонф.УстановитьБуферОбмена(ТекстЛитерала);
		Иначе
			Если ПолеТекстаПрограммы.мМетодМодуля <> Неопределено Тогда
				// Заменяем только текущий метод
				ПолеТекстаПрограммы.РазобратьТекущийКонтекст();
				ТекстВставки = ПолеТекстаПрограммы.ОпределениеМетодаБезОписания() + Символы.ПС + Символы.ПС + Значение;
				НачальнаяКолонкаМетода = 1 + СтрДлина(ТекстВставки) - СтрДлина(СокрЛ(ТекстВставки));
				ТекстВставки = СокрЛ(ТекстВставки);
				НомерСтрокиОпределенияМетода = СтрЧислоСтрок(Лев(ТекстМодуля, ПолеТекстаПрограммы.мМетодМодуля.ПозицияОпределения) + "й");
				ТурбоКонф.ПерейтиВПозицию(НачальнаяКолонкаМетода, НомерСтрокиОпределенияМетода); 
				ТурбоКонф.КонтролШифтКлавиша(Клавиши.OemCloseBrackets);
			Иначе
				// Заменяем весь модуль и теряем свертки
				ТекстВставки = ПолеТекстаПрограммы.ПолеТекста.ПолучитьТекст();
				ТурбоКонф.КонтролКлавиша(Клавиши.A);
				ТурбоКонф.Ждать(200);
			КонецЕсли;
			ТурбоКонф.ВставитьТекст(ТекстВставки, Истина);
			ВыделениеДвумерное = ПолеТекстаПрограммы.ПолеТекста.ВыделениеДвумерное();
			НомерСтроки = ВыделениеДвумерное.НачальнаяСтрока;
			НомерКолонки = ВыделениеДвумерное.НачальнаяКолонка;
		КонецЕсли;
		Если ЗначениеЗаполнено(НовыйТекстМодуляИзКонфигуратора) Тогда
			ТурбоКонф.ПерейтиВПозицию(НомерКолонки, НомерСтроки);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ВосстановитьОкноПриложения(ПодключениеИР)
	// ПодключениеИР нельзя из кэша брать, т.к. там активное окно конфигуратора заново получается
	ПодключениеИР.Visible = Истина; 
	МодулиИР = МодулиИР(ПодключениеИР);
	ИдентификаторПроцесса = МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс();
	// В 8.3.9- заголовок окна будет с добавкой слева
	Если Не ЗначениеЗаполнено(Конфигуратор) Тогда
		ОкноКонфигуратора = 1;
	Иначе
		ОкноКонфигуратора = Конфигуратор.ГлавноеОкно;
	КонецЕсли;
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх(МодулиИР.ирОбщий.ПодготовитьТекстДляРегВыраженияЛкс(ЗаголовокПриложенияИР), 2000, ОкноКонфигуратора, РежимОткрытияВнешнегоОкна.ГлавноеОкно,
		Истина, ИдентификаторПроцесса);
	ТурбоКонф.ЗавершитьВызовВнешнегоОкнаАсинх();
	ПодключениеИР.Visible = Истина;
КонецПроцедуры

Процедура ПолучитьСсылкуСтрокиМодуля()
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь,,, Истина);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПолеТекстаПрограммы.мИмяМодуля) Тогда
		// ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Поддерживается копирование ссылок только в развернутых модулях");
		Возврат;
	КонецЕсли;
	Ссылка = ПолеТекстаПрограммы.СсылкаСтрокиМодуля();
	ТурбоКонф.УстановитьБуферОбмена(Ссылка);
	ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Скопирована ссылка " + Ссылка);
КонецПроцедуры

// 8мс, 20мс при открытом окне "Служебные сообщения"
Функция ПолучитьТипТекущегоЭлемента()
	Возврат ТурбоКонф.ПолучитьТипТекущегоЭлемента(); // Вероятно ошибка OScript https://turboconf.ru/Tasks/8430
	// Возврат ТурбоКонф.ПолучитьНазваниеТипаТекущегоЭлемента(); 

КонецФункции

Функция ЭтоДокумент(Знач ТипПоля = "")
	Если Не ЗначениеЗаполнено(ТипПоля) Тогда
		ТипПоля = ПолучитьТипТекущегоЭлемента();
	КонецЕсли;
	Возврат ТипПоля = ТипЭлемента.Документ;
	// Возврат ТипПоля = "документ";
КонецФункции

Функция ЭтоПоле(Знач ТипПоля = "")
	Если Не ЗначениеЗаполнено(ТипПоля) Тогда
		ТипПоля = ПолучитьТипТекущегоЭлемента();
	КонецЕсли;
	Возврат ТипПоля = ТипЭлемента.Поле;
	// Возврат ТипПоля = "поле";
КонецФункции

Функция ЭтоПолеСоСписком(Знач ТипПоля = "")
	Если Не ЗначениеЗаполнено(ТипПоля) Тогда
		ТипПоля = ПолучитьТипТекущегоЭлемента();
	КонецЕсли;
	Возврат ТипПоля = ТипЭлемента.ПолеСоСписком;
	// Возврат ТипПоля = "поле со списком";
КонецФункции

Процедура ПерейтиКОпределению()
	СтароеЗначениеБуфераОбмена = ТурбоКонф.ПолучитьБуферОбмена();
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	Если Не ЭтоДокумент(ТипПоляОкна) Тогда
		Если Ложь
			Или ЭтоПоле(ТипПоляОкна)
			Или ЭтоПолеСоСписком(ТипПоляОкна) 
		Тогда
			ТурбоКонф.КонтролКлавиша(Клавиши.A);
		КонецЕсли;
		ТекстМодуля = ПолучитьВыделенныйТекст();
		Сообщить("Текст поля = " + ТекстМодуля);
	КонецЕсли;
	Значение = "";
	Если НомерСтроки > 0 Тогда
		ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст,,,, Истина);
		Если ПолеТекстаПрограммы = Неопределено Тогда
			// Окно сообщений
			ТурбоКонф.Клавиша(Клавиши.Home);
			ТурбоКонф.ШифтКлавиша(Клавиши.End);
			Значение = ПолучитьВыделенныйТекст();
		Иначе
			Значение = ПолеТекстаПрограммы.ПерейтиКОпределению(,, Ложь);
		КонецЕсли;
	Иначе
		// В реквизитах управляемой формы иногда текст обрамлен скобками
		Значение = СтрЗаменить(ТекстМодуля, "(", "");
		Значение = СтрЗаменить(Значение, ")", "");
		Значение = МодулиИР.ирОбщий.ИменаМетаданныхИзОписанияТиповЛкс(Значение);
		Если Значение.Количество() = 0 Тогда
			// Текст параметризуемой команды
			Фрагменты = СтрРазделить(ТекстМодуля, " ", Ложь);
			Если Фрагменты.Количество() < 20 Тогда
				Для каждого Фрагмент Из Фрагменты Цикл
					Если ПодключениеИР.Метаданные.НайтиПоПолномуИмени(Фрагмент) <> Неопределено Тогда
						Значение.Добавить(Фрагмент);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Если Значение.Количество() = 0 Тогда
			Значение = ТекстМодуля;
		КонецЕсли;
	КонецЕсли;
	ПродолжатьОбработку = Истина;
	Представление = "";
	Если ТипЗнч(Значение) = Тип("COMОбъект") Тогда
		Если Значение.Количество() = 0 Тогда
			Значение = Неопределено;
		Иначе
			Если Значение.Количество() = 1 Тогда
				НоваяЦельПерехода = Значение.Получить(0);
			Иначе
				ПодключениеИР.Visible = Истина;
				ОповеститьПользователяОПриостановке();
				НоваяЦельПерехода = Неопределено;
				Попытка
					// Если Значение.Количество() < 10 Тогда
						ЗаголовокФормыВыбора = "Выберите переход";
						ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх(ЗаголовокФормыВыбора, 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс());
						НоваяЦельПерехода = МодулиИР.ирКлиент.ВыбратьЭлементСпискаЗначенийЛкс(Значение,, Истина, ЗаголовокФормыВыбора, Ложь, Истина);
					// Иначе
					// 	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх("Выбор объекта метаданных", 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс());
					// 	Значение = МодулиИР.ирКлиент.ВыбратьОбъектМетаданныхЛкс(Значение);
					// КонецЕсли;
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
					Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
				КонецПопытки;
				ТурбоКонф.ЗавершитьВызовВнешнегоОкнаАсинх(Конфигуратор.ОкноВызоваСкрипта);
				ТурбоКонф.ОтжатьМодификаторы();
				ОповеститьПользователяОВозобновлении();
				ПодключениеИР.Visible = Ложь;
			КонецЕсли;
			Если НоваяЦельПерехода = Неопределено Тогда
				ПродолжатьОбработку = Ложь;
			Иначе
				Если Истина
					И ПолеТекстаПрограммы <> Неопределено
					И ПолеТекстаПрограммы.ПерейтиПоСсылкеСтрокиМодуля(НоваяЦельПерехода.Значение) 
				Тогда
					Значение = Истина;
				Иначе
					Значение = НоваяЦельПерехода.Значение;
					Представление = НоваяЦельПерехода.Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПродолжатьОбработку Тогда
		// ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
		Сообщить("Ссылка из текущей позиции = " + Значение);
		Если Значение = Истина Тогда
			// ИР совершил переход в своем поле модуля
			ВыделениеДвумерное = ПолеТекстаПрограммы.ПолеТекста.ВыделениеДвумерное();
			ТурбоКонф.ПерейтиВПозицию(ВыделениеДвумерное.НачальнаяКолонка, ВыделениеДвумерное.НачальнаяСтрока);
			РазвернутьБлокМодуля();
			ТурбоКонф.ШифтКлавиша(Клавиши.End); // Выделяем текст до конца строки
		// ИначеЕсли Значение = "Справка" Тогда // Мертвая ветка
		// 	ВосстановитьОкноПриложения(ПодключениеИР);
		// 	ПродолжатьОбработку = Ложь;
		ИначеЕсли Представление = "Метод прямой" Тогда
			ТурбоКонф.Клавиша(Клавиши.F12);
			Окно = ТурбоКонф.ЖдатьОкно("Объект перехода", 500, Ложь);
			Если Окно > 0 Тогда
				ТурбоКонф.Клавиша(Клавиши.Enter);
				Возврат;
			КонецЕсли
		Иначе
			ПродолжатьОбработку = Истина;
			Если Истина
				И МодулиИР.ирОбщий.СтруктураСсылкиСтрокиМодуляЛкс(Значение) = Неопределено
				И Не ЭтоПолноеИмяМД(МодулиИР, Значение)  
			Тогда
				Значение = СтароеЗначениеБуфераОбмена;
				Сообщить("Ссылка из буфера = " + Значение);
				Если Истина
					И МодулиИР.ирОбщий.СтруктураСсылкиСтрокиМодуляЛкс(Значение) = Неопределено
					И Не ЭтоПолноеИмяМД(МодулиИР, Значение) 
				Тогда
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(),
						"Не найдено ссылки для перехода из текущей позиции и в буфере обмена. Пример ссылки: {Обработка.ирКонсольКода.Форма.Форма.Форма(25)}. Получить ссылку можно командой ""ИР.ПолучитьСсылку"".");
					ПродолжатьОбработку = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ПродолжатьОбработку И Не ПерейтиПоСсылкеСтрокиМодуля(Значение) Тогда
				ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта);
				ТурбоКонф.Клавиша(Клавиши.F12);
			КонецЕсли;
			ТурбоКонф.ОтжатьМодификаторы();
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтароеЗначениеБуфераОбмена) Тогда // Защита от странной ошибки - Внешнее исключение (System.ArgumentNullException): Значение не может быть неопределенным. Имя параметра: text}    
		// ТурбоКонф.УстановитьБуферОбмена(СтароеЗначениеБуфераОбмена); // Почему то после этого перестает работать чтение из буфера обмена. Проверено на реквизитах управляемой формы. Похоже на баг Турбоконфа
	КонецЕсли;
КонецПроцедуры

Функция ЭтоПолноеИмяМД(МодулиИР, Значение)
	Возврат МодулиИР.ирОбщий.МножественноеИмяМДЛкс(СтрРазделить(Значение, ".")[0]) <> Неопределено;
	// Возврат Истина
	// 	И Найти(Значение, "(") = 0 
	// 	И Найти(Значение, " ") = 0
	// 	И Найти(Значение, """") = 0
	// 	И Найти(Значение, ".") > 0; 
КонецФункции

Функция ЭтоСсылкаСтрокиМодуля(Значение)
	Возврат Лев(Значение, 1) = "{"; 
КонецФункции

// Портит буфер обмена
Функция ПерейтиПоСсылкеСтрокиМодуля(Знач Значение = "")
	// СтароеЗначениеБуфераОбмена = ТурбоКонф.ПолучитьБуферОбмена();
	ПодключениеИР = ПодключениеИР(,, Ложь);
	// Если Не ЗначениеЗаполнено(Значение) Тогда
	// 	Значение = СтароеЗначениеБуфераОбмена;
	// КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	Если ЭтоПолноеИмяМД(МодулиИР, Значение) Тогда
		Попытка
			ТурбоКонф.Перейти(Значение);
			Успех = Истина;
		Исключение
			Сообщить("Ошибка перехода к объекту метаданных """ + Значение + """: " + ОписаниеОшибки());
			Успех = Ложь;
		КонецПопытки;
		// ТурбоКонф.УстановитьБуферОбмена(СтароеЗначениеБуфераОбмена);
		Если Успех и Найти(Значение, ".Форма.") > 0 Тогда
			ТурбоКонф.Клавиша(Клавиши.Enter);
		КонецЕсли;
		Возврат Успех; 
	КонецЕсли;
	СтруктураСсылки = МодулиИР.ирОбщий.СтруктураСсылкиСтрокиМодуляЛкс(Значение);
	Если СтруктураСсылки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Модуль открытвает только если точка останова уже была в списке до вызова команды. Иначе открывает модуль последней точки останова.
	// Не возращает успешность. Не поддерживает модули расширений и внешних обработок.
	// ТурбоКонф.ОткрытьМодуль(Значение, ИмяФайлаВнешнейОбработки); 
	// Возврат Истина;

	ИмяВременногоФайла = СохранитьТочкиОстановаВФайл();
	Если Не ЗначениеЗаполнено(ИмяВременногоФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	Успех = Ложь;
	СтруктураСсылки = МодулиИР.ирКлиент.ДобавитьВФайлТочекОстановаЛкс(ИмяВременногоФайла, Значение);
	Если Не ЗагрузитьТочкиОстановаИзФайлаВОткрытомОкнеТочекОстанова(ИмяВременногоФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	НачМомент = ТекущаяДата();
	ПредСтрока = Неопределено;
	Пока ТекущаяДата() - НачМомент < 2 Цикл
		ТурбоКонф.Клавиша(Клавиши.Home);
		ТурбоКонф.Ждать(30); // Файл загружается асинхронно. Менее чем за 100мс он обычно не успевает загрузиться	
		Пока Истина Цикл
			ТекстыПолей = ТурбоКонф.ПолучитьЭлементыСписка(); // 200мс!
			Если ТекстыПолей.Количество() >= 3 Тогда
				ТекстПоследнейСтроки = ТекстыПолей[ТекстыПолей.Количество() - 3] + ТекстыПолей[ТекстыПолей.Количество() - 2] + ТекстыПолей[ТекстыПолей.Количество() - 1];
			Иначе
				ТекстПоследнейСтроки = Неопределено;
			КонецЕсли;
			Если ПредСтрока = ТекстПоследнейСтроки Тогда
				// Дошли до конца таблицы
				Прервать;
			КонецЕсли;
			ПредСтрока = ТекстПоследнейСтроки;
			// МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
			Если ТурбоКонф.КликнутьПоЭлементу(СтруктураСсылки.УсловиеОстанова + " Условие", Неопределено, 0, Ложь) Тогда // Было 1000мс. Исправлено
				// Сообщить("Время клика " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска));
				ТурбоКонф.Клавиша(Клавиши.Escape);
				Успех = Истина;
				Прервать;
			Иначе
				ТурбоКонф.Клавиша(Клавиши.PageDown);
				ТурбоКонф.Ждать(30);
			КонецЕсли;
		КонецЦикла;
		Если Успех Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не Успех Тогда
		// ТурбоКонф.Клавиша(Клавиши.Escape);
	Иначе
		ТурбоКонф.Клавиша(Клавиши.Return); // В 8.3.20- не работает TODO переделать на КликПоЭлементу
		НачМомент = ТекущаяДата();
		Пока ТекущаяДата() - НачМомент < 2 И Не ЭтоДокумент() Цикл
			ТурбоКонф.Ждать(20);
		КонецЦикла;
		// Если Не ОставлятьТочкуОстановаПослеПерехода Тогда
			ТурбоКонф.Клавиша(Клавиши.F9);
			ТурбоКонф.Ждать(20);
		// КонецЕсли;
		// Сообщить("СтруктураСсылки.НомерСтроки:" + СтруктураСсылки.НомерСтроки);
		Если СтруктураСсылки.НомерСтроки > 1 Тогда
			ТурбоКонф.ШифтКлавиша(Клавиши.End);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураСсылки.Метод) Тогда
			ИмяМетода = СтруктураСсылки.Метод;
			Если Истина
				И СтруктураСсылки.НомерСтроки > 1 
				И СтруктураСсылки.СмещениеСтрокиМетода = 0
			Тогда
				ВыделенныйТекст = "";
				ВремПозиция = 0;
				// ВыделенныйТекст = ПолучитьВыделенныйТекст(); // Так часто возникает ошибка чтения буфера
				ТурбоКонф.ПолучитьТекстМодуля(ВыделенныйТекст, ВремПозиция);
			КонецЕсли;
			Если Ложь
				Или СтруктураСсылки.СмещениеСтрокиМетода <> 0
				Или Найти(НРег(ВыделенныйТекст), НРег(" " + ИмяМетода + "(")) = 0 
			Тогда
				Попытка
					ТекстМодуля = ТурбоКонф.ПолучитьТекстТекущегоЭлемента();
				Исключение
					// Старая версия Турбоконф
					РазобратьПозициюВТексте(); 
				КонецПопытки;
				// Сообщить("ИмяМетода=" + ИмяМетода);
				// Сообщить("ТекстМодуля=" + ТекстМодуля);
				ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст); // Позиция тут не играет роли
				ОписаниеМетода = ПолеТекстаПрограммы.мМодульМетаданных.Методы.Найти(НРег(ИмяМетода), "НИмя");
				Если ОписаниеМетода <> Неопределено Тогда
					НомерСтроки = ПолеТекстаПрограммы.НомерСтрокиИзПозиции(ОписаниеМетода.ПозицияОпределения);
					ТурбоКонф.ПерейтиВПозицию(1, НомерСтроки + СтруктураСсылки.СмещениеСтрокиМетода);
					ТурбоКонф.Ждать(20);
					ТурбоКонф.ШифтКлавиша(Клавиши.End);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		РазвернутьБлокМодуля();
	КонецЕсли;
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат Успех;

КонецФункции

Функция СохранитьТочкиОстановаВФайл()
	ТурбоКонф.АльтКлавиша(Клавиши.F9);
	Окно = ТурбоКонф.ЖдатьОкно("Точки останова", 2000, Истина);
	Если Окно = 0 Тогда
		Возврат "";
	КонецЕсли;
	ТурбоКонф.КонтролКлавиша(Клавиши.s);
	Окно = ТурбоКонф.ЖдатьОкно("Сохранить точки останова в файл", 2000, Истина);
	Если Окно = 0 Тогда
		Возврат "";
	КонецЕсли;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	// ТурбоКонф.ВставитьТекст(ИмяВременногоФайла); // Через буфер обмена
	ТурбоКонф.УстановитьЗначение(ИмяВременногоФайла);
	ТурбоКонф.Клавиша(Клавиши.Enter);
	НачМомент = ТекущаяДата();
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	Пока ТекущаяДата() - НачМомент < 2 Цикл
		Попытка
			ТекстовыйДокумент.Прочитать(ИмяВременногоФайла);
			Прервать;
		Исключение
		КонецПопытки;
		ТурбоКонф.Ждать(20);
	КонецЦикла;
	Если ПустаяСтрока(ТекстовыйДокумент.ПолучитьТекст()) Тогда
		УдалитьФайлы(ИмяВременногоФайла);
		Возврат "";
	КонецЕсли;
	Возврат ИмяВременногоФайла; 
КонецФункции

Функция ЗагрузитьТочкиОстановаИзФайлаВОткрытомОкнеТочекОстанова(ИмяФайла)
	ТурбоКонф.КонтролКлавиша(Клавиши.o);
	Окно = ТурбоКонф.ЖдатьОкно("Загрузить точки останова из файла", 2000, Истина);
	Если Окно = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	// ТурбоКонф.ВставитьТекст(ИмяФайла); // Через буфер обмена
	ТурбоКонф.УстановитьЗначение(ИмяФайла);
	ТурбоКонф.Клавиша(Клавиши.Enter);
	Окно = ТурбоКонф.ЖдатьОкно("Точки останова", 2000, Истина);
	Если Окно = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура ДобавитьТочкиОстановаИзРезультатовПоиска()
	Текст = ПолучитьВыделенныйТекст();
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	ИмяФайла = СохранитьТочкиОстановаВФайл();
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	ПодключениеИР = ПодключениеИР(, Ложь, Ложь); 
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	МодулиИР.ирКлиент.ДобавитьВФайлТочекОстановаРезультатыПоискаКонфигуратораЛкс(ИмяФайла, Текст);
	ЗагрузитьТочкиОстановаИзФайлаВОткрытомОкнеТочекОстанова(ИмяФайла);
КонецПроцедуры

Процедура РазвернутьБлокМодуля()
	ТурбоКонф.КонтролКлавиша(Клавиши.Add);
КонецПроцедуры

Функция ОткрытьОкноВыражения(выхПолеТекстаПрограммы = Неопределено, выхВыражение = "")
	Если Не ЭтоДокумент() Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	выхПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь); // Для сохранения контекста в кэше 
	Если выхПолеТекстаПрограммы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	// ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта); // Так почему то не всегда затем получается заголовок модального окна
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	ТурбоКонф.ШифтКлавиша(Клавиши.F9);
	ЦелевойЗаголовок = "Выражение";
	Попытка
		ТурбоКонф.ЖдатьОкно(ЦелевойЗаголовок, 1000, Истина);
	Исключение
		Возврат Неопределено; 
	КонецПопытки;
	выхВыражение = выхПолеТекстаПрограммы.мКонтекст;
	Если Прав(выхВыражение, 1) = "(" Тогда
		выхВыражение = выхВыражение + ")";
	КонецЕсли;
	// Окно сначала появляется, а затем берет фокус, даже не смотря на то, что оно модальное
	МоментНачала = ТекущаяДата();
	Пока ТекущаяДата() - МоментНачала = 0 Цикл
		Успех = Истина;
		Если ТурбоКонф.ПолучитьЗаголовокТекущегоОкна() = ЦелевойЗаголовок Тогда
			Прервать;
		КонецЕсли;
		Успех = Ложь;
		ТурбоКонф.Ждать(100);
	КонецЦикла;
	Возврат ПодключениеИР;
КонецФункции

Процедура ВычислитьВыражение()
	ТекстПоля = "";
	ПолеТекстаПрограммы = Неопределено;
	ПодключениеИР = ОткрытьОкноВыражения(ПолеТекстаПрограммы, ТекстПоля); 
	Если ПодключениеИР = Неопределено Тогда
		ИмяМетода = "<Инициация>";
		Если ПолеТекстаПрограммы.мМетодМодуля <> Неопределено Тогда
			ИмяМетода = ПолеТекстаПрограммы.мМетодМодуля.Имя;
		КонецЕсли;
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Загружен контекст метода """ + ИмяМетода + """ для автодополнения в модальных окнах");
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	БазоваяФормаИР = МодулиИР.ирКлиент.ПолучитьФормуЛкс("Обработка.ирПортативный.Форма.Форма");
	ШаблонВызова = БазоваяФормаИР.ПолучитьВычисляемыйКонтекстОтладчика();
	ТекстВызова = СтрЗаменить(СтрРазделить(ШаблонВызова, "(")[0], "*", "Стк");
	Если ПустаяСтрока(ТекстПоля) Тогда
		ТекстПоля = ТурбоКонф.ПолучитьЗначение();
	КонецЕсли;
	Если Не СтрНачинаетсяС(ТекстПоля, ТекстВызова) Тогда
		Выражение = ТекстВызова + "(Новый Структура(""Я"", " + ТекстПоля + "))";
		ТурбоКонф.ВставитьТекст(Выражение);
		ТурбоКонф.Ждать(50);
		ТурбоКонф.Клавиша(Клавиши.Enter);
		ТурбоКонф.ШифтКлавиша(Клавиши.Tab);
		ТурбоКонф.Ждать(50);
		ТурбоКонф.Клавиша(Клавиши.Add);
		ТурбоКонф.Ждать(50);
		ТурбоКонф.Клавиша(Клавиши.Down);
	КонецЕсли;
	ТурбоКонф.ШифтКлавиша(Клавиши.Tab);
	Если ЗначениеЗаполнено(ТекстПоля) Тогда
		ТурбоКонф.ВставитьТекст(ТекстПоля);
	КонецЕсли;
КонецПроцедуры

Процедура ВычислитьОписатьПараметрыМетода()
	ПолеТекстаПрограммы = Неопределено;
	ПодключениеИР = ОткрытьОкноВыражения(ПолеТекстаПрограммы); 
	Если ПодключениеИР = Неопределено Или ПолеТекстаПрограммы.мМетодМодуля = Неопределено Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Команда применима только в редакторе модуля во время остановки отладки");
		Возврат;
	КонецЕсли;
	СтароеЗначениеБуфераОбмена = ТурбоКонф.ПолучитьБуферОбмена();
	МодулиИР = МодулиИР(ПодключениеИР);
	БазоваяФормаИР = МодулиИР.ирКлиент.ПолучитьФормуЛкс("Обработка.ирПортативный.Форма.Форма");
	ШаблонВызова = БазоваяФормаИР.ПолучитьВычисляемыйКонтекстОтладчика();
	ТекстВызова = СтрЗаменить(СтрРазделить(ШаблонВызова, "(")[0], "*", "ДокПар");
	ИменаПараметров = ПолеТекстаПрограммы.СтрокаИменПараметровМетода();
	Выражение = "Вычислить(" + ТекстВызова + "(""" + ИменаПараметров + """))";
	ТурбоКонф.ВставитьТекст(Выражение);
	ТурбоКонф.Ждать(50);
	ТурбоКонф.Клавиша(Клавиши.Enter);
	ТурбоКонф.ШифтКлавиша(Клавиши.Tab);
КонецПроцедуры

Процедура КопироватьВсеСтрокиВБуфер()
	ТипПоляОкна = ПолучитьТипТекущегоЭлемента();
	Сообщить("ТипПоляОкна = " + ТипПоляОкна);
	Если ЗначениеЗаполнено(ТипПоляОкна) И ТипПоляОкна <> ТипЭлемента.Неизвестный Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Команда доступна только для таблиц");
		Возврат;
	КонецЕсли;
	ТурбоКонф.КонтролКлавиша(Клавиши.Home);
	ТекстПредСтроки = "";
	МаксСтрок = 50;
	Счетчик = 0;
	ВесьТекст = Новый Массив;
	Пока Истина Цикл
		Счетчик = Счетчик + 1;
		ТекстСтроки = ПолучитьВыделенныйТекст();
		Если ТекстПредСтроки = ТекстСтроки Тогда
			Прервать;
		КонецЕсли;
		ВесьТекст.Добавить(ТекстСтроки);
		Если Счетчик = МаксСтрок Тогда
			Прервать;
		КонецЕсли;
		ТекстПредСтроки = ТекстСтроки;
		ТурбоКонф.Клавиша(Клавиши.Down);
	КонецЦикла;
	ТурбоКонф.УстановитьБуферОбмена(СтрСоединить(ВесьТекст, Символы.ПС));
КонецПроцедуры

Функция ПолучитьВыделенныйТекст(ЧерезБуферОбмена = Истина)
	Если Истина
		// И (Ложь
		// Или ПолучитьТипТекущегоЭлемента() = ТипЭлемента.ЭлементСписка 
		// Или ПолучитьТипТекущегоЭлемента() = ТипЭлемента.ЭлементМеню) 
		И Не ЧерезБуферОбмена
	Тогда
		Текст = ТурбоКонф.ПолучитьИмяЭлемента(); // Если в строке таблицы, то получается только ячейка текущей колонки, даже если режим выделения "Строка"
		// Сообщить("Текст элемента списка = " + Текст);
	ИначеЕсли Не ЧерезБуферОбмена Тогда
		Текст = ТурбоКонф.ПолучитьЗначение();
	Иначе
		// ТурбоКонф.Копировать(); Так дальше может возникать ошибка "Сбой при выполнении запрошенной операции с буфером обмена" 
		ТурбоКонф.КонтролКлавиша(Клавиши.C);
		ТурбоКонф.Ждать(70); // 50мс не хватает для первого в жизни окна вызова, например в ячейку журнала регистрации	
		Текст = ТурбоКонф.ПолучитьБуферОбмена();
	КонецЕсли;
	Возврат Текст;
КонецФункции

Процедура ОтладитьОбъект()
	ТребоватьОтложеннуюОтладку = "Ложь";
	ПодключениеИР = ПодключениеИР(, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЦелевойЗаголовок = "Выражение";
	ТекстПоля = "";
	Если ТурбоКонф.ПолучитьЗаголовокТекущегоОкна() <> ЦелевойЗаголовок Тогда
		Если ОткрытьОкноВыражения(, ТекстПоля) = Неопределено Тогда
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), СтрШаблон("Команда применима только в редакторе модуля во время остановки отладки и в окне ""%1""", ЦелевойЗаголовок));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтароеЗначениеБуфераОбмена = ТурбоКонф.ПолучитьБуферОбмена();
	МодулиИР = МодулиИР(ПодключениеИР);
	БазоваяФормаИР = МодулиИР.ирКлиент.ПолучитьФормуЛкс("Обработка.ирПортативный.Форма.Форма");
	ШаблонВызова = БазоваяФормаИР.ПолучитьВычисляемыйКонтекстОтладчика();
	ТекстВызова = СтрЗаменить(ШаблонВызова, "*()", "От");
	// ТекстыЯчеек = ТурбоКонф.ПолучитьЭлементыСписка(); // Нельзя тут вызывать, т.к. оно снимает выделение в поле ввода
	Если ПустаяСтрока(ТекстПоля) Тогда
		ТекстПоля = ТурбоКонф.ПолучитьЗначение();
	КонецЕсли;
	Если Не СтрНачинаетсяС(ТекстПоля, ТекстВызова) Тогда
		Выражение = ТекстВызова + "(" + ТекстПоля + ",,, " + ТребоватьОтложеннуюОтладку + ")";
		ТурбоКонф.ВставитьТекст(Выражение);
		ТурбоКонф.Ждать(100);
		ТурбоКонф.Клавиша(Клавиши.Enter);
		ТурбоКонф.ШифтКлавиша(Клавиши.Tab);
	КонецЕсли;
	Успех = Ложь;
	МаксЖдать = 1;
	текущаяДата = текущаяДата();
	Пока текущаяДата() - текущаяДата <= МаксЖдать Цикл
		// ЦельВычисления = ПолучитьВыделенныйТекст(Ложь);
		// ТекстыЯчеек = ТурбоКонф.ПолучитьЭлементыСписка();
		ТурбоКонф.Клавиша(Клавиши.Add);
		Попытка
			ТекстыЯчеек = ТурбоКонф.ПолучитьТекстТаблицы();
		Исключение
			ТекстыЯчеек = Неопределено;
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
		КонецПопытки;
		Если ТипЗнч(ТекстыЯчеек) = Тип("Массив") Тогда
			// Старый вариант
			ЦельВычисления = СтрСоединить(ТекстыЯчеек, Символы.Таб);
		Иначе
			ЦельВычисления = "" + ТекстыЯчеек;
			ТекстыЯчеек = СтрРазделить(ЦельВычисления, Символы.Таб);
		КонецЕсли;
		Сообщить("ЦельВычисления = " + ЦельВычисления);
		Если ТекстыЯчеек.Количество() = 3 Тогда
			СнимокОбъекта = ТекстыЯчеек[1];
			Сообщить("Снимок объекта = " + СнимокОбъекта);
			Если Найти(НРег(СнимокОбъекта), "открыть объект для отладки") > 0 Тогда
				МодулиИР.ирКлиент.ОтладитьОтложенныйОбъектЛкс(СнимокОбъекта);
				ВосстановитьОкноПриложения(ПодключениеИР);
				Успех = Истина;
			КонецЕсли;
			Прервать;
		КонецЕсли;
		ТурбоКонф.Ждать(200);
	КонецЦикла;
	Если Не Успех Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Не дождались снимка объекта. Либо повторите команду после его появления, либо активируйте окно отлаживаемого приложения.", 3000);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтароеЗначениеБуфераОбмена) Тогда // Защита от странной ошибки - Внешнее исключение (System.ArgumentNullException): Значение не может быть неопределенным. Имя параметра: text} 
		// ТурбоКонф.УстановитьБуферОбмена(СтароеЗначениеБуфераОбмена); // Почему то после этого перестает работать чтение из буфера обмена
	КонецЕсли;
КонецПроцедуры

Функция ЗакрытьСлужебноеПриложение(Знач ИДКонфигуратора = 0, Знач Причина = "по запросу пользователя", Знач БезСохраненияНастроек = Ложь)
	Если ЗначениеЗаполнено(Конфигуратор) Тогда
		ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	КонецЕсли;
	ИДПриложения = 0;
	ПодключениеИР = ПодключениеИРИзКэша(ИДКонфигуратора, ИДПриложения);
	Сообщить("ПодключениеИР=" + ПодключениеИР);
	Если ПодключениеИР = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	// Делаем окно видимым, чтобы приложение штатно завершилось и сохранились настройки, включая положения окон
	ВосстановитьОкноПриложения(ПодключениеИР);
	
	// Вопросы не отображаются https://www.hostedredmine.com/issues/967021
	// Почему то не отправляет формам команду закрытия
	// ПодключениеИР.ЗавершитьРаботуСистемы(); 

	Попытка
		ВсеФормыЗакрыты = МодулиИР.ирКлиент.ЗакрытьВсеФормыЛкс();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
		ВсеФормыЗакрыты = Истина;
	КонецПопытки;
	Если Не ВсеФормыЗакрыты Тогда
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Закройте все окна в приложении """ + НазваниеПриложения() + """ и повторите команду");
		МодулиИР.ирОбщий.СообщитьЛкс("Закройте все окна");
		Возврат Ложь;
	КонецЕсли;
	МодулиИР = Неопределено;
	СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР", Неопределено);
	СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИД", Неопределено);
	СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.Кэш", Неопределено);
	СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИмяКонфигурации", Неопределено);
	СохранитьЗначениеСеансаКонфигуратора("ПолеТекстаПрограммы", Неопределено);
	ПодключениеИР.ЗавершитьРаботуСистемы(Ложь);
	ПроцессОС = ПолучитьПроцессОС(ИДПриложения);
	Если ПроцессОС <> Неопределено Тогда
		Если БезСохраненияНастроек Тогда
			УбитьПроцесс(ПроцессОС, Причина);
		Иначе
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Приложение """ + НазваниеПриложения() + """ завершено " + Причина + ". На его отключение от базы уйдет несколько секунд.", 4000);
		КонецЕсли;
	Иначе
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Приложение """ + НазваниеПриложения() + """ завершено " + Причина, 3000);
	 КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура ПередПолучениемДанныхТ9(Параметры, Отказ, СтандартнаяОбработка)
	Если ПроверитьРазрешениеИР(Отказ) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;  
КонецПроцедуры

Процедура ПриПолученииДанныхТ9(Параметры)
	// Сообщить("ОкноКонфигуратора = " + Строка(Параметры.ОкноКонфигуратора));
	// Сообщить("АктивноеОкно = " + Строка(Параметры.АктивноеОкно));  
	// Сообщить("СтрокаВвода = " + Строка(Параметры.СтрокаВвода));
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	РазрешитьОткрытиеОкон = Ложь;
	НомерСтроки = 0;
	НомерКолонки = 0;
	ТекстМодуля = Параметры.ТекстМодуля;
	ПозицияВТексте = Параметры.Позиция;
	//Элементы = Параметры.ЭлементыСписка; //Если нужны
	ЭтоДокумент = Параметры.ЭтоДокумент;
	Попытка
		ИдентификаторПоля = Параметры.DocumentRuntimeId;
	Исключение
	КонецПопытки;
	Попытка
		ИмяКонфигурации = Параметры.ИмяКонфигурации;
		Сообщить("ИмяКонфигурации=" + ИмяКонфигурации);
	Исключение
	КонецПопытки;
	ПодключениеИР = ПодключениеИР(, Ложь, Ложь, ЭтоДокумент);
	Сообщить("Время обновления подключения ИР " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	// ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта); // 55мс нужно в случае запуска приложения ИР
	// Сообщить("Время подготовки01 " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	// МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если Не ЭтоДокумент Тогда
		// например в окне "Вычислить" или "Условие точки останова"
		Сообщить("текст поля = " + ТекстМодуля);
		ТекстМодуля = СокрП(ТекстМодуля);
		ПолеТекстаПрограммы = ВосстановитьЗначениеСеансаКонфигуратора("ПолеТекстаПрограммы");
		Если ПолеТекстаПрограммы <> Неопределено Тогда
			Попытка
				Пустышка = ПолеТекстаПрограммы.мМетодМодуля;
			Исключение
				ПолеТекстаПрограммы = Неопределено;
			КонецПопытки;
			Если ПолеТекстаПрограммы <> Неопределено Тогда
				АктивноеОкно = ТурбоКонф.ПолучитьАктивноеОкно();
				КлючХранения = "УвемодлениеКонтекста." + АктивноеОкно;
				УжеУведомляли = ВосстановитьЗначениеСеансаКонфигуратора(КлючХранения);
				Если УжеУведомляли = Неопределено Тогда
					ИмяТекущегоМетода = ВывестиКонтекстЯзыка(ПолеТекстаПрограммы);
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Автодополнение в контексте метода """ + ИмяТекущегоМетода + """. Используйте команду ""ИР.ВычислитьВыражение"" для передачи контекста");
					СохранитьЗначениеСеансаКонфигуратора(КлючХранения, 1);
				КонецЕсли;
				// ПолеТекстаПрограммы.КончитьОбработкуКоманды();
				ПолеТекстаПрограммы.ПрочитатьНачалоИКонецТекущейСтроки(ТекстМодуля, ПозицияВТексте + 1);
				ПолеТекстаПрограммы.РазобратьКонтекстСтроки(Ложь, Ложь);
				ПолеТекстаПрограммы.мПредшествующийТекст = ПолеТекстаПрограммы.мТекстДляПоискаОпределения + " " + ПолеТекстаПрограммы.мТекущаяСтрокаНачало;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Фокус вообще не должен теряться
		// Если ТурбоКонф.ПолучитьАктивноеОкно() <> Конфигуратор.ОкноВызоваСкрипта Тогда
		// 	ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта);
		// КонецЕсли;
	КонецЕсли;
	// Сообщить("Время подготовки1 " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	// МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если ПолеТекстаПрограммы = Неопределено Тогда
		ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте,,,, ЭтоДокумент,, Истина, ИдентификаторПоля, ИмяКонфигурации);
		Если ПолеТекстаПрограммы = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		Сообщить("Время обновления поля текста программы " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
		МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	ТаблицаТипов = ПолеТекстаПрограммы.ТаблицаТиповТекущегоВыражения();
	КоличествоТипов = ТаблицаТипов.Количество();
	ТипКонтекста = ПолеТекстаПрограммы.ИмяТипаКонтекста(ТаблицаТипов);
	Если Найти(ТипКонтекста, "+") > 0 Тогда
		ИменаТипов = МодулиИР.ирКэш.Получить().ПредставлениеМассиваСтруктурТипов(ТаблицаТипов);
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Рекомендуется присвоить выражение переменной с указанием в комментарии одного из типов: " + ИменаТипов + Символы.ПС
			+ "https://www.hostedredmine.com/issues/967806", 4000);
	КонецЕсли;
	ПолеТекстаПрограммы.ЗаполнитьТаблицуСлов(ТаблицаТипов,,, РазрешитьОткрытиеОкон, Ложь, Истина, Истина);
	Сообщить("Время расчета типов " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КэшНаборовСлов = ВосстановитьЗначениеСеансаКонфигуратора("ПодключениеИР.Кэш");
	Если КэшНаборовСлов = Неопределено Тогда
		КэшНаборовСлов = Новый Соответствие();
	КонецЕсли;
	ПереданоСлов = 0;
	ВыведеноСлов = 0;
	Словари = Новый Массив;
	Для каждого КлючИЗначение Из ПолеТекстаПрограммы.мНаборыСлов Цикл
		ИмяНабораСлов = КлючИЗначение.Ключ;
		Если КэшНаборовСлов[ИмяНабораСлов] = Неопределено Тогда
			ТаблицаСлов = ПолучитьНаборСловИзИР(ПолеТекстаПрограммы, ИмяНабораСлов);
			ТурбоКонф.УстановитьСловарьT9(ИмяНабораСлов, ТаблицаСлов);
			КэшНаборовСлов[ИмяНабораСлов] = ТаблицаСлов.Количество();
			ПереданоСлов = ПереданоСлов + КэшНаборовСлов[ИмяНабораСлов];
		КонецЕсли;
		ВыведеноСлов = ВыведеноСлов + КэшНаборовСлов[ИмяНабораСлов];
		Словари.Добавить(ИмяНабораСлов);
	КонецЦикла;
	СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.Кэш", КэшНаборовСлов);
	ТаблицаСлов = ПолучитьНаборСловИзИР(ПолеТекстаПрограммы);
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Элементы", ТаблицаСлов);
	ПараметрыЗаполнения.Вставить("ДобавляемыеСловари", Словари);
	ПараметрыЗаполнения.Вставить("ТипКонтекста", ТипКонтекста);
	Попытка
		ПараметрыЗаполнения.Вставить("ЭтоКонтекстМодуля", ПолеТекстаПрограммы.мЭтоЛокальныйКонтекстТаблицыСлов);
	Исключение
		// Старая версия ИР
		ПараметрыЗаполнения.Вставить("ЭтоКонтекстМодуля", ТипКонтекста = "Локальный");
	КонецПопытки;
	Попытка
		Параметры.ДобавитьШаблоны = ЯзыкПрограммы = 0 И ПараметрыЗаполнения.ЭтоКонтекстМодуля;
	Исключение
		// Старая версия Турбоконф
	КонецПопытки;
	ТурбоКонф.УстановитьДанныеT9(ПараметрыЗаполнения);
	КоличествоСловВТаблице = ТаблицаСлов.Количество();
	ПереданоСлов = ПереданоСлов + КоличествоСловВТаблице;
	ВыведеноСлов = ВыведеноСлов + КоличествоСловВТаблице;
	Сообщить("Время передачи " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	Сообщить("Выражение = " + ПолеТекстаПрограммы.мКонтекст + ". Найдено типов " + КоличествоТипов + ". Слов передано " + ПереданоСлов + ", выведено " + ВыведеноСлов + ". Основной тип = " + ТипКонтекста);
	КлючХранения = "" + МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс() + ".ДатаОбновленияКэшаМодулейОтображалась";
	Если ТурбоКонф.ВосстановитьЗначениеСеанса(КлючХранения) = Неопределено Тогда
		ДатаОбновленияКэшаМодулей = МодулиИР.ирОбщий.ДатаОбновленияКэшаМодулейЛкс();
		ДобавкаТекста = "";
		ИмяОбработчика = "";
		Если Не ЗначениеЗаполнено(ДатаОбновленияКэшаМодулей) Тогда
			ДобавкаТекста = ПодсказкаОбновленияКэшаМодулей();
			ИмяОбработчика = "ОбновитьКэшМодулей";
		КонецЕсли;
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Актуальность кэша модулей """ + НазваниеПриложения() + """ - " + ДатаОбновленияКэшаМодулей + "." + ДобавкаТекста, 4000,
			ЭтотОбъект, ИмяОбработчика);
		ТурбоКонф.СохранитьЗначениеСеанса(КлючХранения, 1);
		ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьНаборСловИзИР(ПолеТекстаПрограммы, ИмяНабораСлов = "")
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ТекстСлов = ПолеТекстаПрограммы.ТаблицаСловВJSON(ИмяНабораСлов);
	Чтение = Новый ЧтениеJSON();
	Чтение.УстановитьСтроку(ТекстСлов);
	ТаблицаСлов = ПрочитатьJSON(Чтение);
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Результат = Новый Массив;
	Для Каждого СтрокаСлова Из ТаблицаСлов Цикл
		ЭлементСписка = Новый Соответствие();
		ЭлементСписка.Вставить("Представление", СтрокаСлова.Слово);
		ЭлементСписка.Вставить("Фильтр", СтрокаСлова.Слово);
		ЭлементСписка.Вставить("ЭтоМетод", СтрокаСлова.ЛиМетод);
		// ЭлементСписка.Вставить("ЕстьПараметры", СтрокаСлова.ЛиПар);
		ЭлементСписка.Вставить("ЕстьПараметры", Истина);
		ЭлементСписка.Вставить("ВозвращаетЗначение", СтрокаСлова.ЛиРез);
		ЭлементСписка.Вставить("ИзКонтекста", Истина);
		Попытка
			ЭлементСписка.Вставить("Тип", СтрокаСлова.Тип);
		Исключение
			// 6.95-
		КонецПопытки;
		Попытка
			ЛиТочный = СтрокаСлова.ЛиТочный;
		Исключение
			ЛиТочный = Истина;
			// 6.94-
		КонецПопытки;
		ЭлементСписка.Вставить("ПредполагаемоеЗначение", Не ЛиТочный);
		ЭлементСписка.Вставить("Приоритет", 0);
		ЭлементСписка.Вставить("АвтоперемещениеКурсораОтключено", Ложь);
		ЭлементСписка.Вставить("АвтоТочкаСЗапятойОтключена", Не СтрокаСлова.ЛиМетод);
		Результат.Добавить(ЭлементСписка);
	КонецЦикла;
	Сообщить("Время передачи набора слов """ + ИмяНабораСлов + """ = " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	Возврат Результат; 
КонецФункции

Функция ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст = "", ПереходитьВоВложенныйКонтекст = Истина, Знач КакВызовМетода = Неопределено,
	Знач ЭтоДокумент = Истина, Знач СИменемКонфигурации = Ложь, Знач ЭтоАвтодополнение = Ложь, Знач ИдентификаторПоля = Неопределено, Знач ИмяКонфигурации = "")

	Если ЭтоДокумент Тогда
		Попытка
			ТекущийДокумент = Конфигуратор.ТекущийДокумент;
		Исключение
		КонецПопытки;
		Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
			ЗаголовокОкна = ТекущийДокумент.Заголовок;
			ИмяКонфигурации = ТекущийДокумент.ИмяКонфигурации;
			ИдентификаторПоля = ТекущийДокумент.DocumentRuntimeId;
		//   Сообщить(ТекущийДокумент.ConfRuntimeId);  
		КонецЕсли;
	КонецЕсли;
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПолноеИмяМодуля = "";
	ЭтоМодульВнешнегоОбъекта = Ложь;
	КлючКэша = "ПолеТекстаПрограммы";
	ПолеТекстаПрограммы = ВосстановитьЗначениеСеансаКонфигуратора(КлючКэша);
	Попытка
		Пустышка = ПолеТекстаПрограммы.мИмяМодуля;
	Исключение
		ПолеТекстаПрограммы = Неопределено;
	КонецПопытки;
	Если ПолеТекстаПрограммы = Неопределено Тогда
		МодулиИР = МодулиИР(ПодключениеИР);
		ПолеТекстаПрограммы = МодулиИР.ирКэш.ПолеТекстаПрограммы(ЯзыкПрограммы);
		СохранитьЗначениеСеансаКонфигуратора(КлючКэша, ПолеТекстаПрограммы);
		// Сообщить("ПолеТекстаПрограммы0 " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
		// МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	Если ПустаяСтрока(ЗаголовокОкна) Тогда
		ЗаголовокОкна = ТурбоКонф.ПолучитьЗаголовокТекущегоОкна();
	КонецЕсли;
	Сообщить("ЗаголовокОкна=" + ЗаголовокОкна);
	Если Ложь
		Или ЗаголовокОкна = "Запрос" 
		Или ЗаголовокОкна = "Произвольное выражение" 
		Или ЗаголовокОкна = "Динамический список" 
		Или ЗаголовокОкна = "Ограничение доступа"
		Или ПолеТекстаПрограммы.ЛиТекстЯзыкаЗапросовЛкс(Лев(ТекстМодуля, 1000)) 
	Тогда
		ЯзыкПрограммы = 1;
	Иначе
		ЯзыкПрограммы = 0;
	КонецЕсли;	
	Если Истина
		И ЯзыкПрограммы = 0
		И ЭтоДокумент 
	Тогда
		ПороговаяДлина = 30000; // для 4х Найти() - 2мс
		НачалоМодуля = Прав(ТекстМодуля, ПороговаяДлина);
		Если Истина
			И Найти(ТекстМодуля, Символы.ПС + "КонецФункции") = 0
			И Найти(ТекстМодуля, Символы.ПС + "КонецПроцедуры") = 0
			И Найти(ТекстМодуля, Символы.ПС + "EndFunction") = 0
			И Найти(ТекстМодуля, Символы.ПС + "EndProcedure") = 0
			// И Найти(ТекстМодуля, "|ВЫБРАТЬ") = 0
			// И Найти(ТекстМодуля, "|SELECT") = 0
		Тогда
			Если СтрДлина(НачалоМодуля) = ПороговаяДлина Тогда
				// Это текст НЕ на встроенном языке
				ЯзыкПрограммы = Неопределено;
			ИначеЕсли Не ЭтоАвтодополнение Тогда
				// Проверка на окно сообщений
				ПозицияКаретки1 = ТурбоКонф.ПолучитьПозициюКаретки();
				ТурбоКонф.ControlAltKey(Keys.O);
				ТурбоКонф.Ждать(20);
				ПозицияКаретки2 = ТурбоКонф.ПолучитьПозициюКаретки();
				Если ПозицияКаретки1.X = ПозицияКаретки2.X И ПозицияКаретки1.Y = ПозицияКаретки2.Y Тогда
					// Теперь точно узнали что это окно сообщений
					ЯзыкПрограммы = Неопределено;
					// ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Чтобы анализ модуля мог определить его тип, добавьте метод");
				Иначе
					ТурбоКонф.Клавиша(Keys.Escape);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЯзыкПрограммы = Неопределено Тогда
			Возврат Неопределено; 
		КонецЕсли;
		ЗаголовокКонфигуратора = ТурбоКонф.ПолучитьЗаголовокКонфигуратора(Конфигуратор.ГлавноеОкно);
		// Сообщить("Заголовок конфигуратора = " + ЗаголовокКонфигуратора);
		ЧистыйЗаголовокДочернегоОкна = ЧистыйЗаголовокДочернегоОкна(ЗаголовокКонфигуратора);
		//// Если ЧистыйЗаголовокДочернегоОкна = "Конфигуратор" Тогда
		// Если ПустаяСтрока(ЧистыйЗаголовокДочернегоОкна) Тогда
		// 	Если Истина
		// 		И Не ЭтоАвтодополнение
		// 		И АвтоМаксимизацияОконМодулей
		// 	Тогда
		// 		ТурбоКонф.MaximizeWindowIfNeeded(); // Много глюков возникает если звать из Т9!
		// 		ТурбоКонф.Ждать(100);
		// 		ЗаголовокКонфигуратора = ТурбоКонф.ПолучитьЗаголовокКонфигуратора(Конфигуратор.ГлавноеОкно);
		// 		ЧистыйЗаголовокДочернегоОкна = ЧистыйЗаголовокДочернегоОкна(ЗаголовокКонфигуратора);
		// 		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Окно модуля было развернуто, чтобы анализ модуля мог определить его имя", 2000);
		// 	Иначе
		// 	 	ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Разверните окно модуля, чтобы анализ модуля мог определить его имя", 3000);
		// 	КонецЕсли;
		// КонецЕсли;
		Сообщить("Заголовок конфигуратора = " + ЧистыйЗаголовокДочернегоОкна);
		МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ПолноеИмяМодуля = ЧистыйЗаголовокДочернегоОкна;
		Если ПолноеИмяМодуля = "Конфигуратор" Тогда
			// ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Чтобы анализ модуля мог определить его имя, нужно развернуть его окно");
			ПолноеИмяМодуля = "";
		Иначе
			Если СтрНачинаетсяС(ПолноеИмяМодуля, "Конфигурация ") Тогда
				ПервыйФрагмент = СтрРазделить(ПолноеИмяМодуля, ":")[0];
				ПолноеИмяМодуля = СтрЗаменить(ПолноеИмяМодуля, ПервыйФрагмент + ":", "Общая форма") + ":";						
			КонецЕсли;
			ФрагментыДвоеточия = СтрРазделить(ПолноеИмяМодуля, ":");
			Если ФрагментыДвоеточия[0] = "Внешняя обработка" Или ФрагментыДвоеточия[0] = "Внешний отчет" Тогда
				ФрагментыДвоеточия[0] = ФрагментыДвоеточия[0] + " Незаписанное";
				ЭтоМодульВнешнегоОбъекта = Истина;
			КонецЕсли;
			ФрагментыСборки = Новый Массив;
			Если Найти(ПолноеИмяМодуля, "\") > 0 Тогда
				Если Найти(ФрагментыДвоеточия[2], " ") > 0 Тогда
					ТипМодуля = ТРег(СтрЗаменить(ФрагментыДвоеточия[2], " ", ""));
				Иначе
					ТипМодуля = ФрагментыДвоеточия[2];
				КонецЕсли;
				ПолноеИмяМодуля = "Ф::" + ФрагментыДвоеточия[0] + ":" + ФрагментыДвоеточия[1] + "::" + ТипМодуля;
				ЭтоМодульВнешнегоОбъекта = Истина;
			Иначе
				ФрагментыПробела = СтрРазделить(ПолноеИмяМодуля, " ");
				Если Прав(ФрагментыПробела[0], 1) = ":" Тогда
					ПолноеИмяМодуля = СтрЗаменить(ПолноеИмяМодуля, ФрагментыПробела[0], ""); // удаляем имя конфигурации из представления модуля конфигурации
					ФрагментыДвоеточия = СтрРазделить(ПолноеИмяМодуля, ":");
				КонецЕсли;
				Если ФрагментыДвоеточия.Количество() > 1 Тогда
					ФрагментыОбъекта = СтрРазделить(СокрЛП(ФрагментыДвоеточия[0]), " ");
					ФрагментыДвоеточия.Удалить(0);
					ИмяОбъекта = ФрагментыОбъекта[ФрагментыОбъекта.ВГраница()];
					ФрагментыОбъекта.Удалить(ФрагментыОбъекта.ВГраница());
					Если ФрагментыОбъекта.Количество() > 0 Тогда
						ТипОбъекта = СтрЗаменить(ТРег(СтрСоединить(ФрагментыОбъекта, " ")), " ", "");
						ФрагментыСборки.Добавить(ТипОбъекта);
					КонецЕсли;
					ФрагментыСборки.Добавить(ИмяОбъекта);
				КонецЕсли;
				ТипМодуля = СокрЛП(ФрагментыДвоеточия[0]);
				Если ЗначениеЗаполнено(ТипМодуля) Тогда
					Если Найти(ТипМодуля, " ") > 0 Тогда
						ТипМодуля = СтрЗаменить(ТРег(ТипМодуля), " ", "");						
					КонецЕсли;
					ФрагментыСборки.Добавить(ТипМодуля);
				КонецЕсли;
				ПолноеИмяМодуля = СтрСоединить(ФрагментыСборки, ".");
			КонецЕсли;
			МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ИмяОсновнойКонфигурации = ВосстановитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИмяКонфигурации");
			Если ИмяОсновнойКонфигурации = Неопределено Тогда
				ИмяОсновнойКонфигурации = ПодключениеИР.Метаданные.Имя; // 3мс
				СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИмяКонфигурации", ИмяОсновнойКонфигурации);
			КонецЕсли;
			// Если Истина
			// 	И ПустаяСтрока(ИмяКонфигурации) 
			// 	И Не ЭтоМодульВнешнегоОбъекта 
			// Тогда
			// 	КлючКэшаИмениКонфигурации = КлючКэшаИмениКонфигурацииДляПоля(0, ИдентификаторПоля);
			// 	ИмяКонфигурации = ВосстановитьЗначениеСеансаКонфигуратора(КлючКэшаИмениКонфигурации);
			// 	Если ПустаяСтрока(ИмяКонфигурации) Тогда
			// 		ИмяКонфигурации = ИмяКонфигурации();
			// 		Если ИмяКонфигурации = Неопределено Тогда
			// 			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Зажата клавиша SHIFT. Повторите команду с отжатой клавишей SHIFT, чтобы анализ модуля мог получить имя расширения конфигурации.");
			// 			Возврат Неопределено; 
			// 		КонецЕсли;
			// 		СохранитьЗначениеСеансаКонфигуратора(КлючКэшаИмениКонфигурации, ИмяКонфигурации);
			// 	КонецЕсли;
			// 	Сообщить("ИмяКонфигурации = " + ИмяКонфигурации);
			// КонецЕсли;
			Если ПустаяСтрока(ИмяКонфигурации) Тогда
				ИмяКонфигурации = ИмяОсновнойКонфигурации;
			КонецЕсли;
			Если ИмяКонфигурации <> ИмяОсновнойКонфигурации Тогда
				ПолноеИмяМодуля = ИмяКонфигурации + " " + ПолноеИмяМодуля;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Сообщить("СжатоеИмяМодуля = "+ ПолноеИмяМодуля);
	Сообщить("Время определения имени модуля " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ПолеТекстаПрограммы.ЯзыкПрограммы = ЯзыкПрограммы;
	ДатаОбновленияСтруктурыФормы = ПолеТекстаПрограммы.УстановитьТекст(ТекстМодуля, Ложь,, Ложь, ПолноеИмяМодуля,, ПозицияВТексте + 1, ПозицияВТексте + 1 + СтрДлина(ВыделенныйТекст));
	Сообщить("ДатаОбновленияСтруктурыФормы=" + ДатаОбновленияСтруктурыФормы);
	ПолеТекстаПрограммы.КончитьОбработкуКоманды();
	Если Истина
		И ТипЗнч(ДатаОбновленияСтруктурыФормы) = Тип("Дата") 
		И ТекущаяДата() - ДатаОбновленияСтруктурыФормы > 300 // автообновление не чаще раза в 300 секнуд
	Тогда
		ТекстСтруктурыФормы = "";
		ТурбоКонф.КонтролКлавиша(Клавиши.T);
		ТурбоКонф.КонтролКлавиша(Клавиши.C);
		МоментНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Пока ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментНачала < 200 Цикл
			ТурбоКонф.Ждать(50);
			ОписаниеФормы = ТурбоКонф.ПолучитьБуферОбмена("1C:MD8 Data");
			Если ПолеТекстаПрограммы.ПроверитьОписаниеФормыИзБуфераОбмена(ОписаниеФормы) Тогда
				ТекстСтруктурыФормы = ТурбоКонф.ПолучитьБуферОбмена("1C:MD8 External Data");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТурбоКонф.КонтролКлавиша(Клавиши.OemMinus);
		Сообщить("СтруктураФормы=" + Лев(ТекстСтруктурыФормы, 1000));
		Попытка
			ПолеТекстаПрограммы.УстановитьСлужебныеДанныеФормы(ТекстСтруктурыФормы);
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		КонецПопытки;
		Если Не ЗначениеЗаполнено(ТекстСтруктурыФормы) Тогда
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Сделайте форму видимой в дереве конфигурации, чтобы анализ модуля мог получить ее новую структуру", 4000);
		КонецЕсли;
	КонецЕсли;
	ПолеТекстаПрограммы.РазобратьТекущийКонтекст(Ложь, Ложь, КакВызовМетода, 0, 0, ПереходитьВоВложенныйКонтекст);
	Сообщить("Время разбора контекста языка " + (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментЗапуска) + " мс");
	МоментЗапуска = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВывестиКонтекстЯзыка(ПолеТекстаПрограммы);
	Возврат ПолеТекстаПрограммы;
КонецФункции

Функция КлючКэшаИмениКонфигурацииДляПоля(Знач НомерРодителяПоля = 0, Знач ИдентификаторПоляСырой = Неопределено)
	Если НомерРодителяПоля = 0 Тогда
		Если ИдентификаторПоляСырой = Неопределено Тогда
			ИдентификаторПоля = ТурбоКонф.ПолучитьRuntimeId(); // 9мс
			// ИдентификаторПоля = ТурбоКонф.ПолучитьRuntimeIdСтрокой();
			ИдентификаторПоля = СтрСоединить(ИдентификаторПоля, "-");
		Иначе
			ИдентификаторПоля = СтрЗаменить(ИдентификаторПоляСырой, " ", "-");
		КонецЕсли;
	Иначе
		ИдентификаторПоля = ТурбоКонф.ПолучитьRuntimeIdСИерархией(НомерРодителяПоля)[1]; // 9мс
		// ИдентификаторПоля = ТурбоКонф.ПолучитьRuntimeIdСИерархиейСтроками();
		ИдентификаторПоля = СтрСоединить(ИдентификаторПоля, "-");
	КонецЕсли;
	Сообщить("ИдентификаторПоля=" + ИдентификаторПоля);
	КлючКэша = "ИмяКонфигурации." + XMLСтрока(ИдентификаторПоля);
	Возврат КлючКэша;
КонецФункции

Функция ИмяКонфигурации()
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	ТурбоКонф.КонтролКлавиша(Клавиши.T);
	КлючКэшаИмениКонфигурации = КлючКэшаИмениКонфигурацииДляПоля(2);
	ИмяКонфигурации = ВосстановитьЗначениеСеансаКонфигуратора(КлючКэшаИмениКонфигурации);
	Если ПустаяСтрока(ИмяКонфигурации) Тогда
		СохранитьЗначениеСеансаКонфигуратора(КлючКэшаИмениКонфигурации, ИмяКонфигурации);
		ТурбоКонф.Клавиша(Клавиши.Home);
		ТурбоКонф.Ждать(100);
		ИмяКонфигурации = ПолучитьВыделенныйТекст(Ложь);
		Если ИмяКонфигурации = "Мои шаблоны" Тогда
			// Залипла клавиша SHIFT при нажтии CTRL+T
			Возврат Неопределено;
		Иначе
			СохранитьЗначениеСеансаКонфигуратора(КлючКэшаИмениКонфигурации, ИмяКонфигурации);
		КонецЕсли;
		ТурбоКонф.КонтролКлавиша(Клавиши.OemMinus);
		ТурбоКонф.КонтролКлавиша(Клавиши.T);
	КонецЕсли;
	Сообщить("ИмяКонфигурации = " + ИмяКонфигурации);
	ТурбоКонф.КонтролКлавиша(Клавиши.OemMinus);
	Возврат ИмяКонфигурации;
КонецФункции

Функция ЧистыйЗаголовокДочернегоОкна(ЗаголовокОкнаКонфигуратора)
	ПолноеИмяМодуля = ЗаголовокОкнаКонфигуратора;
	ПозицияТире = Найти(ПолноеИмяМодуля, " - Конфигуратор");
	ПолноеИмяМодуля = СокрЛП(Лев(ПолноеИмяМодуля, ПозицияТире));
	// ПолноеИмяМодуля = СтрЗаменить(ПолноеИмяМодуля, "-", " ");
	Возврат ПолноеИмяМодуля;
КонецФункции

Функция ВывестиКонтекстЯзыка(ПолеТекстаПрограммы)
	Если ПолеТекстаПрограммы.мМетодМодуля = Неопределено Тогда
		ИмяМетода = "<Инициация>";
	Иначе
		ИмяМетода = ПолеТекстаПрограммы.мМетодМодуля.Имя;
	КонецЕсли;
	Сообщить("Язык: " + ЯзыкПрограммы + ", Модуль: " + ПолеТекстаПрограммы.мИмяМодуля + ", Метод: " + ИмяМетода  + ", Позиция: " + ПозицияВТексте + ", Выражение: " + ПолеТекстаПрограммы.мКонтекст);
	Возврат ИмяМетода;
КонецФункции

Процедура ПоказатьПараметрыМетода()
	ПозицияКаретки = ТурбоКонф.ПолучитьПозициюКаретки();
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта);
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст,, Истина);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Сообщить("Имя вызываемого метода = " + ПолеТекстаПрограммы.мИмяМетодаВызова);
	ФормаВызова = ПолеТекстаПрограммы.ФормаВызовМетода();
	ПодключениеИР.Visible = Истина;
	ОповеститьПользователяОПриостановке();
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх("^Метод.*", 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс(), ПозицияКаретки);
	Попытка
		// ФормаВызова.Открыть();
		ФормаВызова.ОткрытьМодально();
		ОповеститьПользователяОВозобновлении();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
		Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
	КонецПопытки;
	ТурбоКонф.ЗавершитьВызовВнешнегоОкнаАсинх(Конфигуратор.ОкноВызоваСкрипта);
	ТурбоКонф.ОтжатьМодификаторы();
	ПодключениеИР.Visible = Ложь;
КонецПроцедуры

Процедура АвтодополнениеМодальное()
	ПозицияКаретки = ТурбоКонф.ПолучитьПозициюКаретки();
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта);
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст,, Истина);
	ПодключениеИР.Visible = Истина;
	ОповеститьПользователяОПриостановке();
	ТурбоКонф.НачатьВызовВнешнегоОкнаАсинх("^Тип:.*", 2000, Конфигуратор.ГлавноеОкно, РежимОткрытияВнешнегоОкна.Диалог, Истина, МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс(), ПозицияКаретки);
	Попытка
		ПолеТекстаПрограммы.ОткрытьАвтодополнение(, Истина);
		ОповеститьПользователяОВозобновлении();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
		Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
	КонецПопытки;
	ТурбоКонф.ЗавершитьВызовВнешнегоОкнаАсинх(Конфигуратор.ОкноВызоваСкрипта);
	ТурбоКонф.ОтжатьМодификаторы();
	ПодключениеИР.Visible = Ложь;
КонецПроцедуры

Процедура СинтаксПомощник()
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВосстановитьОкноПриложения(ПодключениеИР);
	ПолеТекстаПрограммы.ОткрытьКонтекстнуюСправку();
КонецПроцедуры

Процедура НайтиСсылкиНаМетод()
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь, Ложь);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВосстановитьОкноПриложения(ПодключениеИР);
	ПолеТекстаПрограммы.ОткрытьПоискВызововМетода(,, Ложь);
	ТурбоКонф.КонтролКлавиша(Клавиши.Enter); // Так пользователь сможет прерывать
КонецПроцедуры

Процедура СписокОбщихМетодов()
	ОткрытьСписокМетодов();
КонецПроцедуры

Процедура СписокМетодовМодуля()
	ОткрытьСписокМетодов(Истина);
КонецПроцедуры

Процедура ОткрытьСписокМетодов(ТолькоЭтогоМодуля = Ложь)
	ПодключениеИР = ПодключениеИР();
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь, Ложь);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВосстановитьОкноПриложения(ПодключениеИР);
	ПолеТекстаПрограммы.ОткрытьСписокМетодов(ВыделенныйТекст, ТолькоЭтогоМодуля);
КонецПроцедуры

Процедура РедактироватьКомпоновку()
	ПодключениеИР = ПодключениеИР(, Ложь, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Заголовок = "Сохранить схему в файл";
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ТурбоКонф.КликнутьПоЭлементу(Заголовок, "кнопка", 0, Ложь);
	ТурбоКонф.ЖдатьОкно(Заголовок, 2000, Ложь);
	ТурбоКонф.ВставитьТекст(ИмяФайла);
	ТурбоКонф.Клавиша(Клавиши.Enter);
	ТурбоКонф.Ждать(100);
	МодулиИР = МодулиИР(ПодключениеИР);
	ВосстановитьОкноПриложения(ПодключениеИР);
	МодулиИР.ирКлиент.РедактироватьСхемуКомпоновкиИзФайлаЛкс(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
КонецПроцедуры

Функция ВосстановитьЗначениеСеансаКонфигуратора(Ключ, ИДКонфигуратора = Неопределено)
	Если Не ЗначениеЗаполнено(ИДКонфигуратора) Тогда
		ИДКонфигуратора = Конфигуратор.PID;
	КонецЕсли;
	СеансБазы = "" + ИДКонфигуратора;
	Значение = ТурбоКонф.ВосстановитьЗначениеСеанса(СеансБазы + Ключ);
	Сообщить("ВосстановитьЗначениеСеансаКонфигуратора. СеансБазы=" + СеансБазы + ";" + Ключ + "=" + Значение);
	Возврат Значение;
КонецФункции

Процедура СохранитьЗначениеСеансаКонфигуратора(Ключ, Значение)
	Если Не ЗначениеЗаполнено(Конфигуратор) Тогда
		Возврат;
	КонецЕсли;
	ИДКонфигуратора = Конфигуратор.PID;
	ПодлюченныеКонфигураторы = ТурбоКонф.ВосстановитьЗначениеСеанса("ИР.ПодлюченныеКонфигураторы");
	Если ПодлюченныеКонфигураторы = Неопределено Тогда
		ПодлюченныеКонфигураторы = Новый Соответствие();
	КонецЕсли;
	ПодлюченныеКонфигураторы[ИДКонфигуратора] = 1;
	ТурбоКонф.СохранитьЗначениеСеанса("ИР.ПодлюченныеКонфигураторы", ПодлюченныеКонфигураторы);
	СеансБазы = "" + ИДКонфигуратора;
	ТурбоКонф.СохранитьЗначениеСеанса(СеансБазы + Ключ, Значение);
	Сообщить("СохранитьЗначениеСеансаКонфигуратора. СеансБазы=" + СеансБазы + ";" + Ключ + "=" + Значение);
КонецПроцедуры

Функция ПодлюченныеКонфигураторы()
	ПодлюченныеКонфигураторы = ТурбоКонф.ВосстановитьЗначениеСеанса("ИР.ПодлюченныеКонфигураторы");
	Если ПодлюченныеКонфигураторы = Неопределено Тогда
		ПодлюченныеКонфигураторы = Новый Соответствие();
	КонецЕсли;	
	Возврат ПодлюченныеКонфигураторы;
КонецФункции

// Возвращает либо здоровое подключение, либо Неопределено
Функция ПодключениеИРИзКэша(Знач ИДКонфигуратора = Неопределено, ИДПриложения = Неопределено)
	ПодключениеИР = ВосстановитьЗначениеСеансаКонфигуратора("ПодключениеИР", ИДКонфигуратора);
	Если ПодключениеИР <> Неопределено Тогда
		ИДПриложения = ВосстановитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИД", ИДКонфигуратора);
		Попытка
			Пустышка = ПодключениеИР.Visible;
		Исключение
			ПроцессОС = ПолучитьПроцессОС(ИДПриложения);
			Если ПроцессОС <> Неопределено Тогда
				УбитьПроцесс(ПроцессОС, "из-за порчи");
			КонецЕсли;
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
			ПодключениеИР = Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат ПодключениеИР;
КонецФункции

Функция СтрокаСоединенияБазыИР(Знач ПарольИлиСтрокаСоединения = Неопределено)
	Если ПарольИлиСтрокаСоединения = Неопределено Тогда
		ПарольИлиСтрокаСоединения = ВосстановитьЗначениеБазы("ПарольИлиСтрокаСоединения", Истина);
	КонецЕсли;
	Если Истина
		И Найти(ПарольИлиСтрокаСоединения, "=") > 0 
		И Найти(ПарольИлиСтрокаСоединения, ";") > 0
		И (Ложь
			Или Найти(НРег(ПарольИлиСтрокаСоединения), "file") > 0
			Или Найти(НРег(ПарольИлиСтрокаСоединения), "srvr") > 0)
	Тогда
		СтрокаСоединения = ПарольИлиСтрокаСоединения;
		СтрокаСоединенияБезПароля = СтрокаСоединения;
		Если Найти(НРег(СтрокаСоединенияБезПароля), "pwd=") > 0 Тогда
			СтрокаСоединенияБезПароля = Лев(СтрокаСоединенияБезПароля, Найти(НРег(СтрокаСоединения), "pwd="));
		КонецЕсли;
	Иначе
		СтрокаСоединенияБезПароля = СтрокаСоединенияБазыКонфигуратора();
		СтрокаСоединения = СтрокаСоединенияБезПароля + СтрШаблон("Pwd=""%1"";", ПарольИлиСтрокаСоединения);
	КонецЕсли;
	Сообщить("Строка соединения базы """ + НазваниеПриложения() + """ без пароля = " + СтрокаСоединенияБезПароля);
	Возврат СтрокаСоединения;
КонецФункции

Функция СтрокаСоединенияБазыКонфигуратора(Знач СПользователем = Истина)
	ИнфоПроцесса = ИнфоПроцесса();
	Если ИнфоПроцесса.Режим = "Серверный" Тогда
		СтрокаСоединения = СтрШаблон("Srvr=""%1"";Ref=""%2"";", ИнфоПроцесса.Сервер, ИнфоПроцесса.БазаДанных);
	Иначе
		СтрокаСоединения = СтрШаблон("File=""%1"";", ИнфоПроцесса.Каталог);
	КонецЕсли;
	Если СПользователем Тогда
		СтрокаСоединения = СтрокаСоединения + СтрШаблон("Usr=""%1"";", ИнфоПроцесса.Пользователь);
	КонецЕсли;
	Сообщить("Строка соединения базы конфигуратора = " + СтрокаСоединения);
	Возврат СтрокаСоединения;
КонецФункции

Функция ИнфоПроцесса()
	ИнфоПроцесса = Конфигуратор.ПараметрыИнформационнойБазы;
	Возврат ИнфоПроцесса;
КонецФункции

Функция ПодключениеИР(ПарольИлиСтрокаСоединения = Неопределено, РазобратьПозициюВТексте = Истина, Знач ВидимостьДляНовогоПодключения = Ложь, Знач ЭтоДокумент = Неопределено) Экспорт
	ТипПоляОкна = Неопределено;
	Если ЭтоДокумент = Неопределено Тогда
		ТипПоляОкна = ПолучитьТипТекущегоЭлемента(); // 9/20мс
		ЭтоДокумент = ЭтоДокумент(ТипПоляОкна);
	КонецЕсли;
	Сообщить("ЭтоДокумент = " + ЭтоДокумент);
	Если РазобратьПозициюВТексте Тогда
		РазобратьПозициюВТексте(Ложь);
	КонецЕсли;
	ПодключениеИР = ПодключениеИРИзКэша();
	Если ПодключениеИР <> Неопределено Тогда
		Возврат ПодключениеИР;
	КонецЕсли;
	Если ПарольИлиСтрокаСоединения = Неопределено И Не ПроверитьРазрешениеИР() Тогда
		Возврат Неопределено; 
	КонецЕсли;
	Попытка
		ТекущаяВерсияТурбоКонф = ТурбоКонф.ПолучитьВерсиюТурбоКонф();
	Исключение
		ТекущаяВерсияТурбоКонф = "";
	КонецПопытки;
	Если ТекущаяВерсияТурбоКонф < МинимальнаяВерсияТурбоКонф Тогда
		Сообщить("Несовместимая версия ТурбоКонф", СтатусСообщения.Внимание);
		ТекстСообщения = СтрШаблон("Обнаружена несовместимая версия TurboConf. Необходима версия %1 и выше", МинимальнаяВерсияТурбоКонф);
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ТекстСообщения, 5000); // Может заблокироваться модальным окном и будет мешаться
	КонецЕсли;
	УведомлениеЗапуска = ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Запускается приложение """ + НазваниеПриложения() + """. Закрыть его можно командой ИР.ЗакрытьСлужебноеПриложение.", 30000);
	Попытка
		СтрокаСоединения = СтрокаСоединенияБазыИР(ПарольИлиСтрокаСоединения);
		Попытка
			ПодключениеИР = Новый COMОбъект("V83.Application");
			УспехПодключения = ПодключениеИР.Connect(СтрокаСоединения);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
			УспехПодключения = Ложь;
		КонецПопытки;
		Если Не УспехПодключения Тогда
			Если Ложь
				Или Найти(ОписаниеОшибки, "пароль") > 0
				Или Найти(ОписаниеОшибки, "password") > 0 
			Тогда
				ЗавершитьОперациюПодключения(УведомлениеЗапуска);
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Неверное имя или пароль." + СообщениеКакЗабытьВыбор() + Символы.ПС + ОписаниеОшибки,, ЭтотОбъект, "СброситьНастройкиБазы"); // ВводПароля
				Возврат Неопределено;
			ИначеЕсли Ложь
				Или Найти(ОписаниеОшибки, "0x800706BE") > 0
			Тогда
				ЗавершитьОперациюПодключения(УведомлениеЗапуска);
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Ошибка подключения ИР: " + ОписаниеОшибки);
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Ошибка инициации приложения. Подробности в журнале регистрации.",, ЭтотОбъект, "ОткрытьЖурналРегистрации");
				Возврат Неопределено;
			Иначе
				ИмяИсполняемогоФайла = ИмяИсполняемогоФайла();
				Сообщить("ИмяИсполняемогоФайла = " + ИмяИсполняемогоФайла);
				Если Найти(ИмяИсполняемогоФайла, "(x86)") > 0 Тогда
					// Это 32-разрядный конфигуратор
					РеестрОС = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv");
					ИмяФайлаКласса = ""; 
					// OneScript пока не умеет читать выходные параметры из COM https://github.com/EvilBeaver/OneScript/issues/1324
					РеестрОС.GetStringValue("2147483650", "SOFTWARE\Classes\CLSID\{e92b75e3-2ea1-4fec-b493-cef3ec59fca6}\LocalServer32",, ИмяФайлаКласса); // 2147483650 = HKEY_LOCAL_MACHINE
					Сообщить("ИмяФайлаКласса = " + ИмяФайлаКласса);
					Если ЗначениеЗаполнено(ИмяФайлаКласса) Тогда
						Если Не РеестрОС.DeleteKey("2147483650", "SOFTWARE\Classes\CLSID\{e92b75e3-2ea1-4fec-b493-cef3ec59fca6}\LocalServer32") Тогда
							ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Удалите 64-разрядный класс V83.Application, чтобы ОС отдавала 32-разрядный вместо него. Или запустите Турбоконф от имени администратора.");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ЗапуститьПриложение("""" + ИмяИсполняемогоФайла + """ /RegServer -CurrentUser",, Истина);
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Из-за ошибки подключения регистрируем класс V83.Application для текущей версии платформы 1С и текущего пользователя ОС", 3000);

				ПодключениеИР = Неопределено;
				ПодключениеИР = Новый COMОбъект("V83.Application");
				Попытка
					УспехПодключения = ПодключениеИР.Connect(СтрокаСоединения);
				Исключение
					ОписаниеОшибки = "Ошибка подключения к текущей инфобазе через COM интерфейс V83.Application:
					|"+ ОписаниеОшибки();
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ОписаниеОшибки);
					Сообщить(ОписаниеОшибки, СтатусСообщения.Важное);
					УспехПодключения = Ложь;
					ПодключениеИР = Неопределено;
				КонецПопытки;
				Если Не УспехПодключения Тогда
					ЗавершитьОперациюПодключения(УведомлениеЗапуска);
					ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), //"Не удалось подключиться к текущей инфобазе через COM интерфейс V83.Application."
						"Откройте в базе ""Управление COM классами 1С"" из ""Инструменты разработчика"" и зарегистрируйте V83.Application текущей версии платформы 1С.");
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗаголовокПриложенияИР = НазваниеПриложения() + " - " + Лев(СтрокаСоединения, Найти(СтрокаСоединения, "Usr") - 1);
		Попытка
			ПодключениеИР.КлиентскоеПриложение.УстановитьЗаголовок(ЗаголовокПриложенияИР);
		Исключение
			// 8.3.9-
			ПодключениеИР.УстановитьЗаголовокСистемы(ЗаголовокПриложенияИР);
		КонецПопытки;
		ПодключениеИР.Visible = ВидимостьДляНовогоПодключения;
		МодулиИР = МодулиИР(ПодключениеИР);
		Если МодулиИР = Неопределено Тогда
			ЗавершитьОперациюПодключения(УведомлениеЗапуска);
			Возврат Неопределено;
		КонецЕсли;
		Если МодулиИР <> Неопределено Тогда
			Попытка
				НомерВерсииПодсистемыИР = МодулиИР.ирКэш.НомерВерсииПодсистемыИРЛкс();
			Исключение
				НомерВерсииПодсистемыИР = 0;
			КонецПопытки;
			Если НомерВерсииПодсистемыИР < Число(СтрЗаменить(МинимальнаяВерсияИР, ".", "")) Тогда
				ПодключениеИР.Visible = Истина;
				Сообщить("Несовместимая версия подсистемы ИР: " + НомерВерсииПодсистемыИР);
				ТекстСообщения = СтрШаблон("Обнаружена несовместимая версия подсистемы """ + НазваниеПодсистемы() + """. Необходима версия %1 и выше", МинимальнаяВерсияИР);
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), ТекстСообщения, 5000); // Может заблокироваться модальным окном и будет мешаться
				МодулиИР.ирОбщий.СообщитьЛкс(ТекстСообщения);
				МодулиИР.ирКлиент.ОткрытьСправкуПоПодсистемеЛкс();
			КонецЕсли;
		КонецЕсли;	
		ЗапрещенныеОбработчикиОжидания = Новый Массив;
		ЗапрещенныеОбработчикиОжидания.Добавить("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ"); //БСП 2.0
		Для Каждого ИмяОбработчика Из ЗапрещенныеОбработчикиОжидания Цикл
			ПодключениеИР.ОтключитьОбработчикОжидания(ИмяОбработчика);
		КонецЦикла;		
		СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР", ПодключениеИР);
		СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.ИД", МодулиИР.ирКэш.ИдентификаторПроцессаОСЛкс());
		СохранитьЗначениеСеансаКонфигуратора("ПодключениеИР.Кэш", Новый Соответствие);
	Исключение
		ЗавершитьОперациюПодключения(УведомлениеЗапуска);
		ВызватьИсключение;
	КонецПопытки;
	ЗавершитьОперациюПодключения(УведомлениеЗапуска);
	// ТурбоКонф.АктивироватьОкно(Конфигуратор.ОкноВызоваСкрипта); // Видимо позже еще раз берет фокус
	Возврат ПодключениеИР; 
КонецФункции

Функция ИмяИсполняемогоФайла()
	Результат = ТурбоКонф.ПолучитьПутьКИсполняемомуФайлу(Конфигуратор.ГлавноеОкно) + "\1cv8.exe";
	Возврат Результат;
КонецФункции

Процедура ЗавершитьОперациюПодключения(УведомлениеЗапуска)
	ТурбоКонф.СкрытьВсплывающееУведомление(УведомлениеЗапуска);
КонецПроцедуры

Процедура НайтиПоследнееИзменениеМетода()
	ТипПоляОкна = ПолучитьТипТекущегоЭлемента();
	Если Не ЭтоДокумент(ТипПоляОкна) Тогда
		Возврат;
	КонецЕсли;
	ПодключениеИР = ПодключениеИР(,, Ложь);
	Если ПодключениеИР = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МодулиИР = МодулиИР(ПодключениеИР);
	ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте);
	Если ПолеТекстаПрограммы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МетодМодуля = ПолеТекстаПрограммы.мМетодМодуля;
	Если МетодМодуля = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяМетода = МетодМодуля.Имя;
	ОпределениеРабочее = ПолеТекстаПрограммы.ТекстМетодаСОписанием(МетодМодуля);
	ТипМодуля = ПолеТекстаПрограммы.мМодульМетаданных.ТипМодуля;
	Если ТипМодуля = "Форма" Тогда
		НомерПунктаМеню1 = 10;
		НомерПунктаМеню2 = 1;
	Иначе
		НомерПунктаМеню1 = 11;
		Если ТипМодуля = "МодульОбъекта" Тогда
			НомерПунктаМеню2 = 2;
		Иначе
			НомерПунктаМеню2 = 3;
		КонецЕсли;
	КонецЕсли;
	ТурбоКонф.КонтролКлавиша(Клавиши.T);
	ТурбоКонф.ШифтКлавиша(Клавиши.F10);
	ТурбоКонф.КликнутьПоЭлементу("Выборочная история объекта", "элемент меню", 0, Ложь);
	ТурбоКонф.КликнутьПоЭлементу("Модуль объекта", "элемент меню", 0, Ложь);
	ТурбоКонф.КликнутьПоЭлементу("Форма", "элемент меню", 0, Ложь);
	ОкноФильтра = ТурбоКонф.ЖдатьОкно("Отбор выборочной истории объекта", 1000, Истина);
	Если ОкноФильтра = 0 Тогда
		Возврат;
	КонецЕсли;
	ТурбоКонф.Клавиша(Клавиши.Enter);
	ТурбоКонф.ЖдатьЗакрытияОкна(ОкноФильтра, "", 1000);
	ТекстСтрокиИсторииСтарый = "";
	ТурбоКонф.Ждать(200);
	Пока Истина Цикл
		ТурбоКонф.ШифтКлавиша(Клавиши.F10);
		ТурбоКонф.КликнутьПоЭлементу("Сравнить выборочно с объектом конфигурации", "элемент меню", 0, Ложь);
		ТурбоКонф.КликнутьПоЭлементу("Модуль объекта", "элемент меню", 0, Ложь);
		ТурбоКонф.КликнутьПоЭлементу("Форма (Модуль)", "элемент меню", 0, Ложь);
		ЗаголовокОкна = ТурбоКонф.ПолучитьЗаголовокТекущегоОкна();
		Если ЗаголовокОкна = "Выборочное сравнение" Тогда
			// Версии идентичны
			ТурбоКонф.Клавиша(Клавиши.Enter);
		Иначе
			ТурбоКонф.Клавиша(Клавиши.Tab);
			РазобратьПозициюВТексте();
			ПолеТекстаПрограммы = ПолеТекстаПрограммыИР(ПодключениеИР, ТекстМодуля, ПозицияВТексте, ВыделенныйТекст, Ложь,, Ложь);
			СтрокаМетода = ПолеТекстаПрограммы.мМодульМетаданных.Методы.Найти(НРег(ИмяМетода), "НИмя");
			ОпределениеИзВерсии = "";
			Если СтрокаМетода <> Неопределено Тогда
				ОпределениеИзВерсии = ПолеТекстаПрограммы.ТекстМетодаСОписанием(СтрокаМетода);
			КонецЕсли;
			Если ОпределениеИзВерсии <> ОпределениеРабочее Тогда
				ТурбоКонф.КонтролКлавиша(Клавиши.F);
				ТурбоКонф.ЖдатьОкно("Поиск", 1000, Истина);
				ТурбоКонф.ВставитьТекст(СтрПолучитьСтроку(СокрЛ(ОпределениеРабочее), 1));
				ТурбоКонф.Клавиша(Клавиши.Enter);
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		ТекстСтрокиИсторииНовый = ПолучитьВыделенныйТекст();
		Если ТекстСтрокиИсторииСтарый = ТекстСтрокиИсторииНовый Тогда
			Прервать;
		КонецЕсли;
		ТекстСтрокиИсторииСтарый = ТекстСтрокиИсторииНовый;
		ТурбоКонф.Клавиша(Клавиши.Escape);
		ТурбоКонф.Клавиша(Клавиши.Up);
	КонецЦикла;

КонецПроцедуры

Процедура НажатьКлавишуЦикл(Клавиша, Количество)
	Для Счетчик = 1 По Количество Цикл
		ТурбоКонф.Клавиша(Клавиша);
	КонецЦикла;
КонецПроцедуры

Процедура РазобратьПозициюВТексте(ПолучатьТипПоля = Истина)
	Если ПолучатьТипПоля Тогда
		ТипПоляОкна = ПолучитьТипТекущегоЭлемента(); // 8мс
	КонецЕсли;
	Сообщить("Разобрана позиция в поле типа """ + ТипПоляОкна + """");
	ВыделенныйТекст = "";
	ПозицияВТексте = 0;
	НомерСтроки = 0;
	НомерКолонки = 0;
	ТекстМодуля = "";
	Если ЭтоДокумент(ТипПоляОкна) Тогда
		ТекстМодуля = ТурбоКонф.ПолучитьТекстСПозицией(ВыделенныйТекст, ПозицияВТексте, НомерКолонки, НомерСтроки);
	КонецЕсли;
КонецПроцедуры

Функция МодулиИР(Знач Приложение, Знач ЭтоПервоеПодключение = Ложь) Экспорт
	Попытка
		Пустышка = Приложение.ирКэш;
		Значение = Приложение;
	Исключение
		Если Не ЗначениеЗаполнено(ПапкаПортативногоИР) Тогда
			ПапкаПортативногоИР = ТекущийКаталог() + "\" + ТурбоКонф.ПолучитьКаталогСкрипта() + "\ИР";
			Файл = Новый Файл(ПапкаПортативногоИР);
			Сообщить("Каталог ИР = " + ПапкаПортативногоИР);
			Если Не Файл.Существует() Тогда
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "В базе нет подсистемы """ + НазваниеПодсистемы() + """ и в " + ПапкаПортативногоИР + " нет ее портативного варианта", 4000);
				ПапкаПортативногоИР = "";
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПапкаПортативногоИР) Тогда
			Значение = Приложение.ВнешниеОбработки.ПолучитьФорму(ПапкаПортативногоИР + "\ирПортативный.epf");
			Если Значение <> Неопределено Тогда
				Если ЭтоПервоеПодключение Тогда
					Приложение.Visible = Истина; // Должно быть видимым на случай различных диалогов, например предупреждений безопасности
				КонецЕсли;
				Если Не Значение.Открыта() Тогда
					// Сообщить("Портативная форма = " + Значение);
					Значение.Открыть();
				КонецЕсли;
			Иначе
				ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Для портативного варианта """ + НазваниеПодсистемы() + """ нужно обычное клиентское приложение, а запущено управляемое", 4000);
				Приложение.ЗапуститьСистему("/Execute""" + ПапкаПортативногоИР + "\Модули\ирУстановщикРасширения.epf""");
				ЗакрытьСлужебноеПриложение();
			КонецЕсли;
		КонецЕсли;
	КонецПопытки;
	Возврат Значение;
КонецФункции

Функция ПолучитьПроцессОС(Знач ИдентификаторПроцесса, ИмяИсполняемогоФайла = "1cv8.exe") Экспорт
	WMIЛокатор = ПолучитьCOMОбъектWMIЛкс();
	// ТекстОтбора = "1=1 AND"; Синтаксис WQL такого не допускает
	ТекстОтбора = "";
	// Если ЗначениеЗаполнено(ИдентификаторПроцесса) Тогда
		Если ТекстОтбора <> "" Тогда
			ТекстОтбора = ТекстОтбора + "AND ";
		КонецЕсли; 
		ТекстОтбора = ТекстОтбора + " ProcessID = " + XMLСтрока(ИдентификаторПроцесса);
	// КонецЕсли; 
	Если ЗначениеЗаполнено(ИмяИсполняемогоФайла) Тогда
		Если ТекстОтбора <> "" Тогда
			ТекстОтбора = ТекстОтбора + "AND ";
		КонецЕсли; 
		ТекстОтбора = ТекстОтбора + " Name = '" + ИмяИсполняемогоФайла + "'";
	КонецЕсли; 
	Значение = Неопределено; 
	ТекстЗапросаWQL = "Select * from Win32_Process Where " + ТекстОтбора;
	ВыборкаПроцессовОС = WMIЛокатор.ExecQuery(ТекстЗапросаWQL);
	Для Каждого ПроцессОС Из ВыборкаПроцессовОС Цикл
		Значение = ПроцессОС;
		Сообщить("Процесс ОС найден");
		Прервать;
	КонецЦикла;
	Возврат Значение;
КонецФункции

Процедура УбитьПроцесс(ПроцессОС, Причина = "") Экспорт
	Попытка
		ПроцессОС.Terminate();
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	ТурбоКонф.ПоказатьУведомление("Процесс приложения """ + НазваниеПриложения() + """ завершен " + Причина);
КонецПроцедуры

Функция ПолучитьCOMОбъектWMIЛкс() Экспорт
	//http://msdn.microsoft.com/en-us/library/windows/desktop/aa389763(v=vs.85).aspx
	Locator = Новый COMОбъект("WbemScripting.SWbemLocator");
	Значение = Locator.ConnectServer(".", "root\cimv2");
	Возврат Значение;
КонецФункции

Процедура ПриПодключенииКонфигуратора(Параметры)
	ПроверитьРазрешениеИР();
КонецПроцедуры

Функция ВосстановитьЗначениеБазы(Ключ, Шифрование = Ложь)
	База = СтрокаСоединенияБазыКонфигуратора();
	Значение = ТурбоКонф.ВосстановитьЗначение(База + Ключ, Шифрование);
	Сообщить("ВосстановитьЗначениеБазы. База=" + База + ";" + Ключ + "=" + ?(Шифрование, "***", Значение));
	Возврат Значение;
КонецФункции

Функция СохранитьЗначениеБазы(Ключ, Значение, Шифрование = Ложь)
	База = СтрокаСоединенияБазыКонфигуратора();
	ТурбоКонф.СохранитьЗначение(База + Ключ, Значение, Шифрование);
	Сообщить("СохранитьЗначениеБазы. База=" + База + ";" + Ключ + "=" + ?(Шифрование, "***", Значение));
КонецФункции

Функция СообщениеКакЗабытьВыбор()
	Возврат " Команда ""ИР.СброситьНастройкиБазы"" позволяет настроить подключение заново.";
КонецФункции

Процедура СброситьНастройкиБазы()
	Если Не ЗакрытьСлужебноеПриложение() Тогда
		Возврат;
	КонецЕсли;
	ИнфоПроцесса = ИнфоПроцесса();
	СохранитьЗначениеБазы("РазрешенИР", Неопределено);
	СохранитьЗначениеБазы("ПарольИлиСтрокаСоединения", Неопределено);
	ПроверитьРазрешениеИР();
КонецПроцедуры

Функция ПроверитьРазрешениеИР(Отказ = Ложь)
	РазрешенИР = ВосстановитьЗначениеБазы("РазрешенИР");
	Если РазрешенИР = Ложь Тогда
		Если ВосстановитьЗначениеСеансаКонфигуратора("УведомлениеОЗапретеОтображалось") <> Истина Тогда
			Параметры = Новый Структура("ОкноКонфигуратора", Конфигуратор.ГлавноеОкно);
			ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Вы запретили приложение """ + НазваниеПриложения() + """ для этой базы." + СообщениеКакЗабытьВыбор(), 5000,
				ЭтотОбъект, "ОбработчикУведомленияЗабытьВыбор", Параметры);
			СохранитьЗначениеСеансаКонфигуратора("УведомлениеОЗапретеОтображалось", Истина);
		КонецЕсли
	ИначеЕсли РазрешенИР = Неопределено Тогда
		Отказ = Истина;
		ВопросПользователю = Новый ВопросПользователю(РежимДиалогаВопрос.ДаНетОтмена);
		ВопросПользователю.Заголовок = "TurboConf";
		ВопросПользователю.Текст = "Разрешить приложение """ + НазваниеПриложения() + """ для этой базы? 
		|Это необходимо для работы команд ИР." + СообщениеКакЗабытьВыбор();
		ВопросПользователю.УстановитьОбработчик(ЭтотОбъект, "ОбработчикОтветаРазрешитьИР");
		ВопросПользователю.Показать();  
	Иначе  
		// ПодключениеИР();
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура ОбработчикУведомленияЗабытьВыбор(Параметры)
	СброситьНастройкиБазы();
КонецПроцедуры

Процедура ОбработчикОтветаРазрешитьИР(Значение, Параметры) Экспорт
	Если Значение = КодВозвратаДиалога.Да Тогда
		ВводПароля();
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		СохранитьЗначениеБазы("РазрешенИР", Ложь);
	КонецЕсли;
КонецПроцедуры

Процедура ВводПароля()
	ИнфоПроцесса = ИнфоПроцесса();
	ПримерСтрокиСоединения = "File=""C:\БД"";Usr=""1"";Pwd=""2""";
	Форма = Новый ФормаВводаЗначения();
	Форма.УстановитьОбработчик(ЭтотОбъект, "ОбработчикВводаПароля");
	Форма.Значение = "";
	Форма.Заголовок = "Введите параметры подключения """ + НазваниеПриложения() + """";
	Форма.Текст = "Введите пароль пользователя "+ ИнфоПроцесса.Пользователь + ", чтобы приложение """ + НазваниеПриложения() + """ подключалось к этой базе.
	|Либо введите строку соединения базы с такой же конфигурацией в виде " + ПримерСтрокиСоединения + " для подключения к ней.";
	//Форма.МногострочныйРежим = Истина;
	Форма.РежимВводаПароля = Истина;
	Форма.Показать();
	Сообщить("Пример строки соединения """ + НазваниеПриложения() + """: " + ПримерСтрокиСоединения);
КонецПроцедуры

Процедура ОбработчикВводаПароля(Значение, Отказ, Параметры) Экспорт
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	ПодключениеИР = ПодключениеИР(Значение,, Ложь);
	Если ПодключениеИР <> Неопределено Тогда
		СохранитьЗначениеБазы("РазрешенИР", Истина);
		СохранитьЗначениеБазы("ПарольИлиСтрокаСоединения", Значение, Истина);
		ТурбоКонф.ПоказатьВсплывающееУведомление(НазваниеСкрипта(), "Подключено приложение """ + НазваниеПриложения() + """");
		МодулиИР = МодулиИР(ПодключениеИР, Истина);
		Если Не ЗначениеЗаполнено(МодулиИР.ирОбщий.ДатаОбновленияКэшаМодулейЛкс()) Тогда
			ОбновитьКэшМодулей(ПодсказкаОбновленияКэшаМодулей());
		КонецЕсли;
	Иначе
		ПроверитьРазрешениеИР();
	КонецЕсли;
КонецПроцедуры

Функция ПодсказкаОбновленияКэшаМодулей()
	Результат = " Обновить его можно командой ИР.ОбновитьКэшМодулей";
	Возврат Результат;
КонецФункции

Процедура ОбновитьКэшМодулей(ДобавкаТекста = "")
	ПодключениеИР = ПодключениеИР(, Ложь, Ложь);
	ПодключениеИР.Visible = Ложь;
	ВопросПользователю = Новый ВопросПользователю(РежимДиалогаВопрос.ДаНет);
	ВопросПользователю.Заголовок = "TurboConf";
	ВопросПользователю.Текст = "Заполнить кэш модулей """ + НазваниеПриложения() + """? 
	|Для этого изменения в конфигураторе будут сохранены, затем он будет ЗАКРЫТ и перезапущен.
	|Кэш модулей необходим командам ИР для видения остальных модулей, кроме текущего, который обновляется при вызове любой команды.
	|" + ДобавкаТекста;
	ВопросПользователю.УстановитьОбработчик(ЭтотОбъект, "ОбработчикОтветаЗаполнитьКэшМодулей");
	ВопросПользователю.Показать();  	
КонецПроцедуры

Процедура ОбработчикОтветаЗаполнитьКэшМодулей(Значение, Параметры) Экспорт
	Если Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ИмяИсполняемогоФайла = ИмяИсполняемогоФайла();
	ИДКонфигуратора = Конфигуратор.PID;
	ТурбоКонф.СохранитьЗначениеСеанса("БлокироватьЗакрытиеСлужебногоПриложения", Истина);
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	ТурбоКонф.Ждать(50);
	ТурбоКонф.КонтролКлавиша(Клавиши.S);
	ТурбоКонф.АльтКлавиша(Клавиши.F4);  // Очищает настройки конфигуратора https://turboconf.ru/Tasks/8425
	МаксСчетчик = 5;
	Для Счетчик = 1 По МаксСчетчик Цикл
		ТурбоКонф.Ждать(10000/МаксСчетчик); // максимум 10 сек
		ПроцессОС = ПолучитьПроцессОС(ИДКонфигуратора);
		Если ПроцессОС = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПроцессОС = Неопределено Тогда
		ЗапуститьТолстыйКлиент(Ложь, Ложь, "/CОбновитьКэшМодулейИР", ИмяИсполняемогоФайла);
		ЗакрытьСлужебноеПриложение(ИДКонфигуратора,, Истина); // Закрываем без сохранения настроек, чтобы не потерялись настройки конфигуратора https://turboconf.ru/Tasks/8425
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытииКонфигуратора(Параметры)
	БлокироватьЗакрытиеСлужебногоПриложения = ТурбоКонф.ВосстановитьЗначениеСеанса("БлокироватьЗакрытиеСлужебногоПриложения");
	Сообщить("БлокироватьЗакрытиеСлужебногоПриложения=" + БлокироватьЗакрытиеСлужебногоПриложения);
	Если БлокироватьЗакрытиеСлужебногоПриложения <> Истина Тогда
		ЗакрытьСлужебноеПриложение(Параметры.PID, " после закрытия конфигуратора");
	КонецЕсли;
	ТурбоКонф.СохранитьЗначениеСеанса("БлокироватьЗакрытиеСлужебногоПриложения", Ложь);
КонецПроцедуры
  
Процедура ПриЗавершенииРаботыПрограммы()
	ПодлюченныеКонфигураторы = ПодлюченныеКонфигураторы();
	Для каждого КлючИЗначение Из ПодлюченныеКонфигураторы Цикл
		ЗакрытьСлужебноеПриложение(КлючИЗначение.Ключ, "после завершения ТурбоConf");
	КонецЦикла;
КонецПроцедуры

Процедура ОткрытьЖурналРегистрации()
	ТурбоКонф.АктивироватьОкно(Конфигуратор.ГлавноеОкно);
	ТурбоКонф.ОткрытьМеню("Администрирование", "Журнал регистрации");
КонецПроцедуры

// ИмяИсполняемогоФайла передаем когда процесс нет активного конфигуратора
Процедура ЗапуститьТолстыйКлиент(Знач ПодключитьОтладчик = Истина, Знач СПользователем = Истина, Знач ДопПараметры = "", Знач ИмяИсполняемогоФайла = "")
	ДобавкаПортативныйИР = "";
	ПодключениеИР = ПодключениеИР(, Ложь);
	Если ПодключениеИР <> Неопределено Тогда
		МодулиИР = МодулиИР(ПодключениеИР);
		Попытка
			ИспользуемоеИмяФайла = МодулиИР.ИспользуемоеИмяФайла;
			ДобавкаПортативныйИР = "/Execute""" + ИспользуемоеИмяФайла + """";
		Исключение
		КонецПопытки;
	КонецЕсли;
	ДобавкаАдресОтладчика = "";
	Если ПодключитьОтладчик Тогда
		АдресОтладчика = ВосстановитьЗначениеСеансаКонфигуратора("АдресОтладчика");
		Если АдресОтладчика = Неопределено Тогда
			ТурбоКонф.КликнутьПоЭлементу("Отладка", "кнопка", 0, Ложь);
			ТурбоКонф.КликнутьПоЭлементу("Подключение...", "кнопка", 0, Ложь);
			Окно = ТурбоКонф.ЖдатьОкно("Предметы отладки", 2000, Ложь);
			Если Окно <> 0 Тогда
				ТурбоКонф.Ждать(50);
				ЗаголовокКнопки = "Настройкa..."; // Посленяя "a" - буква английского алфавита!
				ТурбоКонф.КликнутьПоЭлементу(ЗаголовокКнопки, "кнопка", 0, Ложь);
				Окно = ТурбоКонф.ЖдатьОкно("Настройки отладчика", 1000, Ложь);
				Если Окно = 0 Тогда
					ТурбоКонф.Клавиша(Клавиши.Escape);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Если Окно <> 0 Тогда
				ТурбоКонф.ШифтКлавиша(Клавиши.Tab);
				СтароеЗначениеБуфера = ТурбоКонф.ПолучитьБуферОбмена();
				АдресОтладчика = ПолучитьВыделенныйТекст();
				Если ЗначениеЗаполнено(АдресОтладчика) И СтароеЗначениеБуфера <> АдресОтладчика Тогда
					СохранитьЗначениеСеансаКонфигуратора("АдресОтладчика", АдресОтладчика);
				КонецЕсли;
				ТурбоКонф.Клавиша(Клавиши.Escape);
				ТурбоКонф.Клавиша(Клавиши.Escape);
			КонецЕсли
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресОтладчика) Тогда
			ДобавкаАдресОтладчика = " /DEBUGGERURL""" + АдресОтладчика + """";
		КонецЕсли;
	КонецЕсли;
	ЗапуститьПриложение1С("/DEBUG" + ДобавкаАдресОтладчика + " " + ДобавкаПортативныйИР + " " + ДопПараметры, СПользователем, ИмяИсполняемогоФайла);
КонецПроцедуры

// ИмяИсполняемогоФайла передаем когда процесс нет активного конфигуратора
Процедура ЗапуститьПриложение1С(Знач ДопПараметры, Знач СПользователем = Истина, Знач ИмяИсполняемогоФайла = "")
	Если ПустаяСтрока(ИмяИсполняемогоФайла) Тогда
		ИмяИсполняемогоФайла = ИмяИсполняемогоФайла();
	КонецЕсли;
	СтрокаСоединения = """" + СтрЗаменить(СтрокаСоединенияБазыКонфигуратора(СПользователем), """", """""") + """";
	ЗапуститьПриложение("""" + ИмяИсполняемогоФайла + """ ENTERPRISE /IBConnectionString" + СтрокаСоединения + " " + ДопПараметры);	
КонецПроцедуры

Процедура ПриАктивизацииСтрокиT9(Параметры, Отказ, СтандартнаяОбработка)
	ПолеТекстаПрограммы = ВосстановитьЗначениеСеансаКонфигуратора("ПолеТекстаПрограммы");
	ОписаниеКом = ПолеТекстаПрограммы.ОписаниеТекущегоСловаАвтодополнения(Параметры.Значение, Параметры.ЭтоМетод, Параметры.КлючСловаря);
	Описание = Новый Структура;
	Описание.Вставить("Описание", ОписаниеКом.Описание);
	Описание.Вставить("Тип", ОписаниеКом.Тип);
	Попытка
		Описание.Вставить("ЕстьПараметры", ОписаниеКом.ЕстьПараметры);
	Исключение
		// 6.95-
	КонецПопытки;
	Параметры.Описание = Описание;
КонецПроцедуры

ТурбоКонф = Новый ТурбоКонф;
БлокироватьЗакрытиеСлужебногоПриложения = Ложь;

// настройки
ПапкаПортативногоИР = ""; // Сюда можно вручную прописать путь, если нужен портативный вариант ИР из конкретной папки. По умолчанию он ищется в папке ".\user_scripts\ИР"
АвтоМаксимизацияОконМодулей = Ложь;

МинимальнаяВерсияИР = "6.99";
МинимальнаяВерсияТурбоКонф = "5.18.8668.31421";
ВерсияАдаптера = "1.03";
